{"version":3,"sources":["random.ts","idallocator.ts","language.ts","tribe.ts","tribe_events_disasters.ts","region.ts","tribe_events_discovery.ts","tribe_events.ts"],"names":[],"mappings":";AAAa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAb,IAAA,EAAA,WAAA,SAAA,KAqBA,OApBS,EAAA,SAAP,SAAgB,EAAa,GACpB,OAAA,KAAK,MAAM,KAAK,UAAY,EAAM,EAAM,IAAM,GAGhD,EAAA,OAAP,SAAiB,GAER,OAAA,EADO,EAAO,SAAS,EAAG,EAAM,OAAS,KAI3C,EAAA,OAAP,SAAc,GACR,OAAA,KAAK,SAAW,GAIf,EAAA,kBAAP,SAAyB,EAAW,EAAkB,GAC9C,IAAA,EAAQ,KAAK,IAAI,EAAW,EAAG,GAEjC,OAAA,KAAK,SAAW,GAGxB,EArBA,GAAa,QAAA,OAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAb,IAAA,EAAA,WAAA,SAAA,KAaA,OAVS,EAAA,SAAP,SAAgB,GACT,EAAY,IAAI,eAAe,KAClC,EAAY,IAAI,GAAQ,GAGtB,IAAA,EAAiB,EAAI,IAAI,EAAY,IAAI,GAGtC,OAFP,EAAY,IAAI,KAET,GAVM,EAAA,IAAe,GAYhC,EAbA,GAAa,QAAA,YAAA;;ACsCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAlCb,IAJA,IAAA,EAAA,QAAA,YAEM,EAAsB,GAEnB,EAAI,EAAG,EAAI,GAAI,IACtB,EAAS,GAAK,OAAO,aAAa,GAAK,GAGzC,IAAM,EAAmB,CAAC,IAAK,IAAK,IAAK,IAAK,KAExC,EAAuB,EAAS,OAAO,SAAU,EAAG,EAAG,GAAY,OAAqB,GAArB,EAAM,QAAQ,KAEvF,EAAA,WAQA,OAJI,SAAY,EAAgB,GACnB,KAAA,OAAS,EACT,KAAA,SAAW,GANxB,GAUA,EAAA,WAcA,OANI,SAAY,EAAc,EAAiB,EAAmB,GACrD,KAAA,KAAO,EACP,KAAA,OAAS,EACT,KAAA,SAAW,EACX,KAAA,WAAa,GAZ1B,GAAa,QAAA,KAAA,EAgBb,IAAA,EAAA,WAmCI,SAAA,IACS,KAAA,OAAS,EAAS,YAClB,KAAA,SAAW,EAAS,YACpB,KAAA,UAAY,EAAS,YAEtB,EAAA,OAAO,OAAO,IACT,KAAA,gBAAkB,EAAS,SAAS,OAGpC,KAAA,gBAAkB,EAAS,SAAS,MAGxC,KAAA,aAAe,GAsF5B,OApIkB,EAAA,WAAd,SAAyB,GACjB,IAAA,EAAsB,EAAK,MAAM,GAC9B,OAAA,EAAK,OAAO,GAAG,cAAgB,GAG5B,EAAA,QAAd,SAAsB,GACb,OAAA,EAAS,MAAM,KAAK,IAAI,EAAS,YAAY,KAAK,MAG5C,EAAA,UAAf,WACQ,IAAA,EAAoB,EAAA,OAAO,OAAO,GAElC,EAAkB,EAAA,OAAO,OAAO,GAAa,EAAA,OAAO,OAAO,GAExD,OAAA,IAAI,EAAO,EAAQ,IAGf,EAAA,UAAf,SAAyB,EAAc,GAM5B,OALH,EAAU,QAAQ,EAAK,EAAK,OAAO,KAAO,IAC1C,GAAQ,EAAO,UAEnB,GAAQ,EAAO,QA4BnB,EAAA,UAAA,UAAA,SAAU,GAGW,IAFb,IAAA,EAAgC,GAEnB,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAU,CAAlB,IAAA,EAAI,EAAA,GACL,EAA0B,KAAK,cAAc,EAAK,MAElD,EAAK,SAAQ,EAAiB,EAAS,UAAU,EAAgB,KAAK,SACtE,EAAK,WAAU,EAAiB,EAAS,UAAU,EAAgB,KAAK,WAG5D,IADZ,IAAA,EAAwB,GACZ,EAAA,EAAA,EAAA,EAAK,WAAL,EAAA,EAAA,OAAA,IAAiB,CAAxB,IAAA,EAAG,EAAA,GACJ,EAAgB,KAAK,cAAc,GAEvC,EAAgB,EAAS,UAAU,EAAe,KAAK,WAEvD,EAAW,KAAK,GAGhB,KAAK,iBAAmB,EAAS,SAAS,SAC1C,EAAqB,EAAmB,OAAO,IAGnD,EAAmB,KAAK,GAEpB,KAAK,iBAAmB,EAAS,SAAS,QAC1C,EAAqB,EAAmB,OAAO,IAIhD,OAAA,EAAmB,KAAK,MAG3B,EAAA,UAAA,cAAR,SAAsB,GAMC,IAJf,IAAA,EAAsB,GAEtB,EAA0B,GAEX,EAAA,EAAA,EAAA,EAAK,MAAM,IAAX,EAAA,EAAA,OAAA,IAAgB,CAA1B,IAAA,EAAM,EAAA,GACP,GAAA,EAAe,OAAS,EAAG,CACvB,IAAA,EAAa,EAAe,EAAe,OAAS,GAEpD,EAAM,QAAQ,IAAe,GAC7B,EAAS,KAAK,GACd,EAAiB,IAEX,EAAU,QAAQ,IAAe,GAAO,EAAU,QAAQ,IAAW,GACvE,GAAc,IACd,EAAS,KAAK,GACd,EAAiB,IAK7B,GAAkB,EAGlB,EAAe,OAAS,GAAG,EAAS,KAAK,GAK/B,IAFV,IAAA,EAA0B,GAEhB,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAU,CAAf,IAAA,EAAC,EAAA,GACN,GAAkB,KAAK,iBAAiB,GAGrC,OAAA,GAGH,EAAA,UAAA,iBAAR,SAAyB,GACjB,IAAC,KAAK,aAAa,eAAe,GAAU,CAGzB,IAFf,IAAA,EAAa,GAEE,EAAA,EAAA,EAAA,EAAQ,MAAM,IAAd,EAAA,EAAA,OAAA,IAAmB,CAA7B,IAAA,EAAM,EAAA,GACP,EAAU,QAAQ,IAAW,EAAG,GAAK,EAAA,OAAO,OAAO,GAClD,GAAK,EAAA,OAAO,OAAO,GAGvB,KAAA,aAAa,GAAW,EAG1B,OAAA,KAAK,aAAa,IAEjC,EArIA,GAAa,QAAA,SAAA,EAuIb,SAAiB,IACb,SAAY,GACR,EAAA,OAAA,SACA,EAAA,MAAA,QAFJ,CAAY,EAAA,WAAA,EAAA,SAAQ,KADxB,CAAiB,EAAA,QAAA,WAAA,QAAA,SAAQ,KAvIZ,QAAA,SAAA;;ACiPA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAvRb,IAAA,EAAA,QAAA,YACA,EAAA,QAAA,iBACA,EAAA,QAAA,cAGA,EAAA,WAqBE,SAAA,EAAY,GACL,KAAA,GAAK,EAAA,YAAY,SAAS,SAE1B,KAAA,YAAc,EACd,KAAA,iBAAmB,KACnB,KAAA,eAAiB,GAEjB,KAAA,WAAa,GAEb,KAAA,YAAc,GACd,KAAA,SAAW,GAEX,KAAA,MAAQ,GAER,KAAA,UAAY,IAAI,EAEhB,KAAA,UAAU,SAAW,EAAU,SAAS,cAExC,KAAA,MAAO,EAEP,KAAA,UAAU,OAAS,EAAA,OAAO,OAAO,CACpC,EAAU,OAAO,WACjB,EAAU,OAAO,UACjB,EAAU,OAAO,WACjB,EAAU,OAAO,UAGd,KAAA,UAAU,MAAQ,EAAA,OAAO,OAAO,CACnC,EAAU,MAAM,QAChB,EAAU,MAAM,QAChB,EAAU,MAAM,QAChB,EAAU,MAAM,WAGb,KAAA,UAAU,KAAO,EAAA,OAAO,OAAO,CAClC,EAAU,KAAK,aACf,EAAU,KAAK,cAGZ,KAAA,UAAY,IAAI,EAAA,SAoNzB,OAjNE,EAAA,UAAA,WAAA,WACS,OAAA,KAAK,aAGd,EAAA,UAAA,mBAAA,SAAmB,GACZ,KAAA,aAAe,GAGtB,EAAA,UAAA,mBAAA,SAAmB,GACZ,KAAA,aAAe,GAItB,EAAA,UAAA,KAAA,WACwB,KAAK,aAQtB,IARC,IAEF,EAAuB,EACvB,EAAsB,EAEpB,EAAa,KAAK,aAClB,EAAY,KAAK,YAEd,EAAI,EAAG,EAAI,GAAI,IAClB,EAAA,OAAO,OAAO,KAAa,GAAgB,KAAK,MAAwB,IAAlB,KAAK,eAC3D,EAAA,OAAO,OAAO,KAAY,GAAe,KAAK,MAAwB,IAAlB,KAAK,eAI1D,KAAA,mBAAmB,GACnB,KAAA,mBAAmB,IAK1B,EAAA,UAAA,MAAA,SAAM,GAIU,IAHV,IAAA,EAAyB,GACzB,EAAsB,GAEZ,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAa,CAAlB,IAAA,EAAC,EAAA,GACR,EAAY,KAAK,KAAK,MAAM,KAAK,YAAY,IAGjC,IAAA,IAAA,EAAA,EAAA,EAAA,EAAY,MAAM,GAAlB,EAAA,EAAA,OAAA,IAAsB,CAA3B,IACH,EAAY,IAAI,EADb,EAAC,EAAA,IAIR,EAAE,UAAU,SAAW,KAAK,UAAU,SACtC,EAAE,UAAU,OAAS,KAAK,UAAU,OACpC,EAAE,UAAU,MAAQ,KAAK,UAAU,MACnC,EAAE,UAAU,KAAO,KAAK,UAAU,KAGjB,IAAA,IAAA,EAAA,EAAA,EAAA,KAAK,YAAL,EAAA,EAAA,OAAA,IAAkB,CAA1B,IAAA,EAAI,EAAA,GACX,EAAE,cAAc,GAGD,IAAA,IAAA,EAAA,EAAA,EAAA,KAAK,SAAL,EAAA,EAAA,OAAA,IAAe,CAAvB,IAAA,EAAI,EAAA,GACX,EAAE,WAAW,GAIf,EAAE,mBAAmB,KAAK,kBAE1B,EAAU,KAAK,GAOV,OAHF,KAAA,YAAc,KAAK,MAAM,EAAY,GAAK,KAAK,aAG7C,GAGT,EAAA,UAAA,aAAA,SAAa,GACP,OAAC,KAAK,WAAW,eAAe,EAAM,IAInC,KAAK,WAAW,EAAM,IAHpB,GAMX,EAAA,UAAA,mBAAA,SAAmB,EAAc,GAC1B,KAAK,WAAW,eAAe,EAAM,MACnC,KAAA,WAAW,EAAM,IAAM,GAGzB,KAAA,WAAW,EAAM,KAAO,EAE7B,QAAQ,IAAI,uBAAuB,KAAK,GAAE,QAAQ,EAAM,GAAE,OAAO,KAAK,WAAW,EAAM,IAAG,MAG5F,EAAA,UAAA,OAAA,WACM,IAAA,EAAkB,EAKf,OAHH,KAAK,UAAU,QAAU,EAAU,OAAO,aAAY,GAAU,GAChE,KAAK,cAAc,WAAU,GAAU,GAEpC,GAGT,EAAA,UAAA,QAAA,WACM,IAAA,EAAmB,EAKhB,OAHH,KAAK,UAAU,QAAU,EAAU,OAAO,YAAW,GAAW,GAChE,KAAK,cAAc,kBAAiB,GAAW,GAE5C,GAGT,EAAA,UAAA,QAAA,WACS,OAAA,EAAA,OAAO,OAAO,KAAK,mBAG5B,EAAA,UAAA,mBAAA,SAAmB,GACZ,KAAA,iBAAmB,GAG1B,EAAA,UAAA,SAAA,SAAS,GACA,OAAA,KAAK,eAAe,EAAE,KAG/B,EAAA,UAAA,iBAAA,SAAiB,EAAe,GAE1B,IAAA,EAA2B,EAG3B,KAAK,eAAe,eAAe,EAAE,MAAK,EAAkB,KAAK,eAAe,EAAE,KAGjF,KAAA,eAAe,EAAE,IAAM,EAAgB,GAG9C,EAAA,UAAA,cAAA,SAAc,GACP,KAAA,eAAe,EAAE,IAAM,GAG9B,EAAA,UAAA,cAAA,SAAc,GACR,KAAK,YAAY,QAAQ,IAAe,GACvC,KAAA,YAAY,KAAK,IAGxB,EAAA,UAAA,iBAAA,SAAiB,GAET,IAAA,EAAI,KAAK,YAAY,QAAQ,IACzB,GAAN,GAEC,KAAA,YAAY,OAAO,EAAG,IAG7B,EAAA,UAAA,cAAA,SAAc,GACR,OAAA,KAAK,YAAY,QAAQ,IAAe,GAI9C,EAAA,UAAA,WAAA,SAAW,GACL,KAAK,SAAS,QAAQ,IAAY,GACjC,KAAA,SAAS,KAAK,IAGrB,EAAA,UAAA,cAAA,SAAc,GAEN,IAAA,EAAI,KAAK,SAAS,QAAQ,IACtB,GAAN,GAEC,KAAA,SAAS,OAAO,EAAG,IAG1B,EAAA,UAAA,WAAA,SAAW,GACL,OAAA,KAAK,SAAS,QAAQ,IAAY,GAIxC,EAAA,UAAA,MAAA,WACM,OAAqB,GAArB,KAAK,MAAM,OAAoB,UACvB,OAAS,EAAA,SAAS,QAAQ,KAAK,UAAU,UAAU,KAAK,SAGtE,EAAA,UAAA,iBAAA,WACM,OAAqB,GAArB,KAAK,MAAM,OAAoB,UACvB,OAAS,EAAA,SAAS,QAAQ,KAAK,UAAU,UAAU,KAAK,SAGtE,EAAA,UAAA,QAAA,SAAQ,GACD,KAAA,MAAQ,GAGf,EAAA,UAAA,KAAA,WACS,OAAA,KAAK,OAGd,EAAA,UAAA,SAAA,WACS,OAAA,KAAK,WAGN,EAAA,UAAA,WAAR,WACM,IAAA,EAAa,KAMV,OAJH,KAAK,cAAc,UAAS,GAAI,GAEhC,KAAK,cAAc,iBAAgB,GAAI,GAEpC,GAGD,EAAA,UAAA,UAAR,WAGS,OAFU,MAIrB,EAhRA,GAAa,QAAA,MAAA,EAkRb,IAAA,EAAA,WAwCE,SAAA,KAmBF,OArDS,EAAA,eAAP,SAAsB,GACb,OAAA,GACA,KAAA,EAAU,SAAS,cAAsB,MAAA,gBACzC,KAAA,EAAU,SAAS,QAAgB,MAAA,UACnC,KAAA,EAAU,SAAS,cAAsB,MAAA,gBACzC,KAAA,EAAU,SAAS,QAAgB,MAAA,YAIrC,EAAA,aAAP,SAAoB,GACX,OAAA,GACA,KAAA,EAAU,OAAO,WAAmB,MAAA,aACpC,KAAA,EAAU,OAAO,UAAkB,MAAA,YACnC,KAAA,EAAU,OAAO,WAAmB,MAAA,aACpC,KAAA,EAAU,OAAO,QAAgB,MAAA,YAInC,EAAA,YAAP,SAAmB,GACV,OAAA,GACA,KAAA,EAAU,MAAM,QAAgB,MAAA,eAChC,KAAA,EAAU,MAAM,QAAgB,MAAA,cAChC,KAAA,EAAU,MAAM,QAAgB,MAAA,aAChC,KAAA,EAAU,MAAM,SAAiB,MAAA,iBAInC,EAAA,WAAP,SAAkB,GACT,OAAA,GACA,KAAA,EAAU,KAAK,aAAqB,MAAA,eACpC,KAAA,EAAU,KAAK,YAAoB,MAAA,gBAQ5C,EAAA,UAAA,eAAA,WACS,OAAA,EAAU,eAAe,KAAK,WAGvC,EAAA,UAAA,aAAA,WACS,OAAA,EAAU,aAAa,KAAK,SAGrC,EAAA,UAAA,YAAA,WACS,OAAA,EAAU,YAAY,KAAK,QAGpC,EAAA,UAAA,WAAA,WACS,OAAA,EAAU,WAAW,KAAK,OAErC,EA3DA,GAAa,QAAA,UAAA,EA6Db,SAAiB,IACf,SAAY,GACV,EAAA,cAAA,gBACA,EAAA,QAAA,UACA,EAAA,cAAA,gBACA,EAAA,QAAA,UAJF,CAAY,EAAA,WAAA,EAAA,SAAQ,KAOpB,SAAY,GACV,EAAA,WAAA,aACA,EAAA,UAAA,YACA,EAAA,WAAA,aACA,EAAA,QAAA,UAJF,CAAY,EAAA,SAAA,EAAA,OAAM,KAOlB,SAAY,GACV,EAAA,QAAA,UACA,EAAA,QAAA,UACA,EAAA,QAAA,UACA,EAAA,SAAA,WAJF,CAAY,EAAA,QAAA,EAAA,MAAK,KAOjB,SAAY,GACV,EAAA,aAAA,eACA,EAAA,YAAA,cAFF,CAAY,EAAA,OAAA,EAAA,KAAI,KAtBlB,CAAiB,EAAA,QAAA,YAAA,QAAA,UAAS,KA7Db,QAAA,UAAA;;ACvEA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAhNb,IAAA,EAAA,QAAA,YACA,EAAA,QAAA,WAGA,EAAA,WAAA,SAAA,KAqFA,OAlFS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GACxC,SAAE,EAAM,cAAc,UAAW,EAAM,cAAc,mBAErD,EAAM,WAAW,YAAoB,EAAA,OAAO,OAAO,MAC3C,EAAA,OAAO,OAAO,QAGrB,EAAA,SAAP,SAAgB,EAAc,GACrB,OAAA,GAGF,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,CACL,2BACA,mCAIG,EAAA,aAAP,SAAoB,GACX,MAAA,8BAA8B,EAAM,QAAO,8OAK7C,EAAA,gBAAP,SAAuB,EAAc,GAC5B,MAAA,CACL,wEACA,uHAIG,EAAA,iBAAP,SAAwB,EAAc,GAC7B,MAAA,CACL,WAIM,EAAA,OAAO,OAAO,IAChB,EAAM,UAAU,SAAW,EAAA,UAAU,SAAS,cAG9C,EAAM,UAAU,SAAW,EAAA,UAAU,SAAS,QAGhD,EAAM,WAAW,0BAGX,IAAA,EAA6B,EAAM,aACnC,EAAa,KAAK,MAAwB,GAAlB,GACxB,EAAa,KAAK,MAAwB,GAAlB,GAE9B,EAAM,mBAAmB,EAAA,OAAO,SAAS,EAAY,IAErD,QAAQ,IAAI,mBAAmB,EAAM,eAEvC,WAGM,EAAA,OAAO,OAAO,IAChB,EAAM,UAAU,SAAW,EAAA,UAAU,SAAS,QAG9C,EAAM,UAAU,SAAW,EAAA,UAAU,SAAS,QAI1C,IAAA,EAA6B,EAAM,aACnC,EAAa,KAAK,MAAwB,GAAlB,GACxB,EAAa,KAAK,MAAwB,GAAlB,GAE9B,EAAM,mBAAmB,EAAA,OAAO,SAAS,EAAY,IAErD,EAAM,WAAW,YAEjB,QAAQ,IAAI,mBAAmB,EAAM,iBAhF7B,EAAA,GAAc,mBAoF9B,EArFA,GAAa,QAAA,iBAAA,EAuFb,IAAA,EAAA,WAAA,SAAA,KAmHA,OAhHS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GACxC,IAAC,EAAM,cAAc,eAAgB,OAAO,EAIxC,OAAA,EAAO,SACR,KAAA,EAAU,OAAA,EAAA,OAAO,OAAO,MACxB,KAAA,EAAU,OAAA,EAAA,OAAO,OAAO,MACxB,KAAA,EAAU,OAAA,EAAA,OAAO,OAAO,MAC7B,QAAgB,OAAA,IAIb,EAAA,SAAP,SAAgB,EAAc,GACrB,OAAA,GAGF,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,CACL,2BACA,qCACA,6DAIG,EAAA,aAAP,SAAoB,GACX,MAAA,oFACF,EAAM,QAAO,oFAGb,EAAA,gBAAP,SAAuB,EAAc,GAC/B,IAAA,EAA6B,GAgB1B,OAdH,EAAM,WAAW,0BACnB,EAAgB,KACd,4JAKF,EAAgB,KACd,oFAGJ,EAAgB,KAAK,mEACrB,EAAgB,KAAK,sFAEd,GAGF,EAAA,iBAAP,SAAwB,EAAc,GAC7B,MAAA,CACL,WAIM,EAAA,OAAO,OAAO,IAChB,EAAM,UAAU,SAAW,EAAA,UAAU,SAAS,cAG9C,EAAM,UAAU,SAAW,EAAA,UAAU,SAAS,QAGhD,EAAM,WAAW,0BAGX,IAAA,EAA6B,EAAM,aACnC,EAAa,KAAK,MAAwB,GAAlB,GACxB,EAAa,KAAK,MAAwB,GAAlB,GAE9B,EAAM,mBAAmB,EAAA,OAAO,SAAS,EAAY,IAErD,QAAQ,IAAI,mBAAmB,EAAM,eAEvC,WAEM,IAAA,EAAe,EAAO,SAEtB,EAAyB,EAAA,OAAO,OAAO,GAE3C,EAAO,YAAY,GACnB,EAAc,SAAS,GAGjB,IAAA,EAA6B,EAAM,aACnC,EAAa,KAAK,MAAwB,GAAlB,GACxB,EAAa,KAAK,MAAwB,GAAlB,GAE9B,EAAM,mBAAmB,EAAA,OAAO,SAAS,EAAY,IAErD,QAAQ,IAAI,mBAAmB,EAAM,eAEvC,WAEE,EAAM,WAAW,wBACjB,EAAM,iBAAiB,eAGjB,IAAA,EAA6B,EAAM,aACnC,EAAa,KAAK,MAAwB,GAAlB,GACxB,EAAa,KAAK,MAAwB,GAAlB,GAE9B,EAAM,mBAAmB,EAAA,OAAO,SAAS,EAAY,IAErD,QAAQ,IAAI,mBAAmB,EAAM,iBA9G7B,EAAA,GAAc,eAkH9B,EAnHA,GAAa,QAAA,aAAA,EAqHb,IAAA,EAAA,WAAA,SAAA,KA4DE,OAzDS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GACxC,OAAA,EAAM,cAAc,gBAEpB,EAAM,aAAe,OAErB,EAAM,cAAc,YAAoB,EAAA,OAAO,OAAO,MAC9C,EAAA,OAAO,OAAO,SAGrB,EAAA,SAAP,SAAgB,EAAc,GACrB,OAAA,GAGF,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,IAGF,EAAA,aAAP,SAAoB,GACX,MAAA,IAGF,EAAA,gBAAP,SAAuB,EAAc,GAC/B,IAAA,EAAmB,0BAA0B,EAAM,QAAO,qKAUvD,OAPH,EAAM,WAAW,0BACnB,GAAW,+FAEJ,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,UACtD,GAAW,sGAGN,CAAC,IAGH,EAAA,iBAAP,SAAwB,EAAc,GAC7B,MAAA,CACL,WAEQ,IAAA,EAA6B,EAAM,aACnC,EAAa,KAAK,MAAwB,GAAlB,GACxB,EAAa,KAAK,MAAwB,IAAlB,GAE9B,EAAM,mBAAmB,EAAA,OAAO,SAAS,EAAY,IAErD,QAAQ,IAAI,mBAAmB,EAAM,cAEjC,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,SACjD,EAAM,WAAW,sBAtDX,EAAA,GAAc,cA2D9B,EA5DF,GAAa,QAAA,YAAA;;ACvMA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IATb,IAAA,EAAA,QAAA,YASA,EAAA,WA+BE,SAAA,IACO,KAAA,aAAc,EACd,KAAA,QAAU,GACV,KAAA,eAAiB,GACjB,KAAA,YAAc,GAGf,IAAA,EAAI,EAAA,OAAO,SAAS,EAAG,GAGpB,OAFF,KAAA,MAAQ,EAAO,KAAK,UAElB,GACA,KAAA,EAAQ,KAAA,MAAQ,EAAO,KAAK,OAAQ,MACpC,KAAA,EAAQ,KAAA,MAAQ,EAAO,KAAK,UAAW,MACvC,KAAA,EAAQ,KAAA,MAAQ,EAAO,KAAK,MAAO,MACnC,KAAA,EAAQ,KAAA,MAAQ,EAAO,KAAK,UAAW,MACvC,KAAA,EAAQ,KAAA,MAAQ,EAAO,KAAK,OAAQ,MACpC,KAAA,EAAQ,KAAA,MAAQ,EAAO,KAAK,OAAQ,MACpC,KAAA,EAAQ,KAAA,MAAQ,EAAO,KAAK,WAK9B,KAAA,MAAQ,EAAA,OAAO,SAAS,EAAG,GAC3B,KAAA,OAAS,EAAA,OAAO,SAAS,EAAG,GAC5B,KAAA,WAAa,EAAA,OAAO,SAAS,EAAG,GA4JzC,OAnMU,EAAA,UAAA,YAAR,SAAoB,GACX,OAAA,GAEA,KAAA,EAAU,MAAA,KACV,KAAA,EAAU,MAAA,SACV,KAAA,EAAU,MAAA,kBACV,KAAA,EAAU,MAAA,WACV,KAAA,EAAU,MAAA,aACV,KAAA,EAAU,MAAA,YACV,KAAA,EAAU,MAAA,WAGV,MAAA,WA+BT,EAAA,UAAA,KAAA,WACS,OAAA,KAAK,OAGd,EAAA,UAAA,WAAA,WACS,OAAA,EAAO,KAAK,KAAK,QAG1B,EAAA,UAAA,oBAAA,WACS,OAAA,KAAK,OACL,KAAA,EAAO,KAAK,OAAe,MAAA,SAC3B,KAAA,EAAO,KAAK,UAAkB,MAAA,YAC9B,KAAA,EAAO,KAAK,MAAc,MAAA,QAC1B,KAAA,EAAO,KAAK,UAAkB,MAAA,YAC9B,KAAA,EAAO,KAAK,OAAe,MAAA,SAC3B,KAAA,EAAO,KAAK,OAAe,MAAA,SAC3B,KAAA,EAAO,KAAK,WAAmB,MAAA,aAC/B,KAAA,EAAO,KAAK,UAAkB,MAAA,cAKvC,EAAA,UAAA,gBAAA,WACS,OAAA,KAAK,OACL,KAAA,EAAO,KAAK,OAAe,MAAA,SAC3B,KAAA,EAAO,KAAK,UAAkB,MAAA,YAC9B,KAAA,EAAO,KAAK,MAAc,MAAA,QAC1B,KAAA,EAAO,KAAK,UAAkB,MAAA,cAC9B,KAAA,EAAO,KAAK,OAAe,MAAA,SAC3B,KAAA,EAAO,KAAK,OAAe,MAAA,SAC3B,KAAA,EAAO,KAAK,WAAmB,MAAA,aAC/B,KAAA,EAAO,KAAK,UAAkB,MAAA,cAKvC,EAAA,UAAA,KAAA,WACS,OAAA,KAAK,OACL,KAAA,EAAO,KAAK,OAAe,OAAA,KAAK,MAAQ,EACxC,KAAA,EAAO,KAAK,UAAkB,OAAA,KAAK,MAAQ,EAC3C,KAAA,EAAO,KAAK,MAAc,OAAA,KAAK,MAC/B,KAAA,EAAO,KAAK,UAAkB,OAAA,KAAK,MAAQ,EAC3C,KAAA,EAAO,KAAK,OAAe,OAAA,KAAK,MAAQ,EACxC,KAAA,EAAO,KAAK,OAAe,OAAA,KAAK,MAAQ,EACxC,KAAA,EAAO,KAAK,WAAmB,OAAA,KAAK,MAAQ,EAC5C,KAAA,EAAO,KAAK,UAAkB,OAAA,IAKvC,EAAA,UAAA,WAAA,WACS,OAAA,KAAK,YAAY,KAAK,SAI/B,EAAA,UAAA,MAAA,WACS,OAAA,KAAK,OACL,KAAA,EAAO,KAAK,OAAe,OAAA,KAAK,OAAS,EACzC,KAAA,EAAO,KAAK,UAAkB,OAAA,KAAK,OACnC,KAAA,EAAO,KAAK,MAAc,OAAA,KAAK,OAAS,EACxC,KAAA,EAAO,KAAK,UACZ,KAAA,EAAO,KAAK,OAAe,OAAA,KAAK,OAAS,EACzC,KAAA,EAAO,KAAK,OAAe,OAAA,KAAK,OAAS,EACzC,KAAA,EAAO,KAAK,WAAmB,OAAA,KAAK,OACpC,KAAA,EAAO,KAAK,UAAkB,OAAA,IAKvC,EAAA,UAAA,YAAA,WACS,OAAA,KAAK,YAAY,KAAK,UAI/B,EAAA,UAAA,UAAA,WACS,OAAA,KAAK,OACL,KAAA,EAAO,KAAK,OAAe,OAAA,KAAK,WAAa,EAC7C,KAAA,EAAO,KAAK,UAAkB,OAAA,KAAK,WAAa,EAChD,KAAA,EAAO,KAAK,MAAc,OAAA,KAAK,WAAa,EAC5C,KAAA,EAAO,KAAK,UAAkB,OAAA,KAAK,WAAa,EAChD,KAAA,EAAO,KAAK,OAAe,OAAA,KAAK,WAChC,KAAA,EAAO,KAAK,OAAe,OAAA,KAAK,WAAa,EAC7C,KAAA,EAAO,KAAK,WAAmB,OAAA,KAAK,WACpC,KAAA,EAAO,KAAK,UAAkB,OAAA,IAKvC,EAAA,UAAA,gBAAA,WACS,OAAA,KAAK,YAAY,KAAK,cAI/B,EAAA,UAAA,YAAA,WACS,OAAA,KAAK,QAAQ,QAItB,EAAA,UAAA,OAAA,WACS,OAAA,KAAK,SAId,EAAA,UAAA,WAAA,WAGgB,IAFV,IAAA,EAAe,EAEL,EAAA,EAAA,EAAA,KAAK,QAAL,EAAA,EAAA,OAAA,IAAc,CAC1B,GADQ,EAAA,GACC,aAGJ,OAAA,GAIT,EAAA,UAAA,SAAA,SAAS,GACF,KAAA,QAAQ,KAAK,IAKpB,EAAA,UAAA,YAAA,SAAY,GACJ,IAAA,EAAQ,KAAK,QAAQ,QAAQ,GAE/B,GAAS,GACN,KAAA,QAAQ,OAAO,EAAO,IAI/B,EAAA,UAAA,gBAAA,SAAgB,GAEV,KAAK,eAAe,QAAQ,IAAW,IAGtC,KAAA,eAAe,KAAK,GAGzB,EAAO,gBAAgB,QAGzB,EAAA,UAAA,OAAA,WACS,OAAA,KAAK,gBAGd,EAAA,UAAA,aAAA,SAAa,GACP,KAAK,YAAY,QAAQ,IAAc,GACtC,KAAK,YAAY,KAAK,IAG7B,EAAA,UAAA,aAAA,SAAa,GACP,OAAA,KAAK,YAAY,QAAQ,IAAc,GAG/C,EAnNA,GAAa,QAAA,OAAA,EAqNb,SAAiB,IACf,SAAY,GACV,EAAA,OAAA,SACA,EAAA,UAAA,YACA,EAAA,MAAA,QACA,EAAA,UAAA,YACA,EAAA,OAAA,SACA,EAAA,OAAA,SACA,EAAA,WAAA,aACA,EAAA,UAAA,YARF,CAAY,EAAA,OAAA,EAAA,KAAI,KADlB,CAAiB,EAAA,QAAA,SAAA,QAAA,OAAM,KArNV,QAAA,OAAA;;ACgRA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAzRb,IAAA,EAAA,QAAA,YACA,EAAA,QAAA,WACA,EAAA,QAAA,YACA,EAAA,QAAA,cAEA,EAAA,WAAA,SAAA,KAiEA,OA9DW,EAAA,SAAP,SAAgB,EAAc,EAAgB,GACtC,GAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAe,OAAO,EACrE,GAAA,EAAM,cAAc,QAAS,OAAO,EACpC,GAAA,EAAM,WAAW,gBAAiB,OAAO,EAEzC,IAAA,EAAa,KAGV,OAFH,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,UAAS,EAAI,MAEzD,EAAA,OAAO,kBAAkB,EAAG,EAAU,OAG1C,EAAA,SAAP,SAAgB,EAAc,GACtB,OAAA,EAAM,cAAc,QAAgB,EACpC,EAAM,WAAW,gBAAwB,EACzC,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAsB,EAErE,EAAO,QAAU,EAAA,OAAO,KAAK,OAAe,EAAA,OAAO,SAAS,EAAG,GACvD,EAAA,OAAO,UAAU,EAAG,IAG7B,EAAA,SAAP,WACW,OAAA,GAGJ,EAAA,QAAP,SAAe,GACJ,MAAA,CACH,kBACA,uBAID,EAAA,aAAP,SAAoB,GACT,MAAA,kDAAkD,EAAM,QAAO,wKAInE,EAAA,gBAAP,SAAuB,EAAc,GAC1B,MAAA,CACH,uKAEA,0GAID,EAAA,iBAAP,SAAwB,EAAc,GAC3B,MAAA,CACH,WACA,EAAM,cAAc,QAEhB,EAAA,OAAO,OAAO,MAAM,EAAM,UAAU,SAAW,EAAA,UAAU,SAAS,SAEtE,QAAQ,IAAO,EAAM,QAAO,0BAE5B,WACA,EAAM,WAAW,gBAEb,EAAA,OAAO,OAAO,MAAM,EAAM,UAAU,SAAW,EAAA,UAAU,SAAS,SAEtE,QAAQ,IAAO,EAAM,QAAO,yBA5Db,EAAA,GAAc,oBAgEzC,EAjEA,GAAa,QAAA,kBAAA,EAmEb,IAAA,EAAA,WAAA,SAAA,KAiDE,OA9CS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GACtC,GAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAe,OAAO,EACrE,GAAA,EAAM,cAAc,SAAU,OAAO,EAErC,IAAA,EAAa,KAGV,OAFH,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,UAAS,EAAI,MAEzD,EAAA,OAAO,kBAAkB,EAAG,EAAU,OAG1C,EAAA,SAAP,SAAgB,EAAc,GACtB,OAAA,EAAM,cAAc,SAAiB,EACrC,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAsB,EAErE,EAAO,YAAc,EAAU,EAAA,OAAO,SAAS,EAAG,GAC1C,EAAA,OAAO,UAAU,EAAG,IAG7B,EAAA,SAAP,WACW,OAAA,GAGJ,EAAA,QAAP,SAAe,GACJ,MAAA,IAGJ,EAAA,aAAP,SAAoB,GACT,MAAA,IAGJ,EAAA,gBAAP,SAAuB,EAAc,GAC1B,MAAA,CACH,sBAAsB,EAAM,QAAO,4NAMpC,EAAA,iBAAP,SAAwB,EAAc,GAC3B,MAAA,CACH,WACA,EAAM,cAAc,SACpB,QAAQ,IAAO,EAAM,QAAO,6BA5Cb,EAAA,GAAc,qBAgDvC,EAjDF,GAAa,QAAA,mBAAA,EAmDb,IAAA,EAAA,WAAA,SAAA,KA2DE,OAxDS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GAKtC,GAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAe,OAAO,EACrE,IAAC,EAAM,cAAc,SAAU,OAAO,EACtC,GAAA,EAAM,cAAc,gBAAiB,OAAO,EAE5C,IAAA,EAAa,KAGV,OAFH,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,YAAW,EAAI,MAEvD,EAAA,OAAO,kBAAkB,EAAG,EAAU,OAG1C,EAAA,SAAP,SAAgB,EAAc,GAKtB,OAAC,EAAM,cAAc,SACrB,EAAM,cAAc,gBAAwB,EAC5C,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAsB,EAErE,EAAO,YAAc,EAAU,EAAA,OAAO,SAAS,EAAG,GAC1C,EAL8B,GAQvC,EAAA,SAAP,WACW,OAAA,GAGJ,EAAA,QAAP,SAAe,GACJ,MAAA,IAGJ,EAAA,aAAP,SAAoB,GACT,MAAA,IAGJ,EAAA,gBAAP,SAAuB,EAAc,GAC1B,MAAA,CACA,EAAM,mBAAkB,yIAK5B,EAAA,iBAAP,SAAwB,EAAc,GAC3B,MAAA,CACH,WACI,EAAM,cAAc,gBACpB,EAAM,mBAAmB,GACzB,QAAQ,IAAO,EAAM,QAAO,oCAtDjB,EAAA,GAAc,4BA0DvC,EA3DF,GAAa,QAAA,0BAAA,EA6Db,IAAA,EAAA,WAAA,SAAA,KA+FE,OA1FS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GAKtC,GAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAe,OAAO,EACrE,GAAA,EAAM,cAAc,YAAa,OAAO,EACxC,GAAA,EAAM,aAAe,GAAI,OAAO,EAEhC,IAAA,EAAa,KAGV,OAFH,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,aAAY,EAAI,MAExD,EAAA,OAAO,kBAAkB,EAAG,EAAU,MAG1C,EAAA,SAAP,SAAgB,EAAc,GAItB,OAAA,EAAM,cAAc,YAAoB,EACxC,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAsB,EACrE,EAAM,aAAe,GAAW,EAE7B,EAAA,OAAO,SAAS,EAAG,IAGvB,EAAA,SAAP,WACW,OAAA,GAGJ,EAAA,QAAP,SAAe,GACJ,MAAA,IAGJ,EAAA,aAAP,SAAoB,GACT,MAAA,IAGJ,EAAA,gBAAP,SAAuB,EAAc,GAG1B,OAFP,EAAsB,UAAY,EAAsB,kBAAkB,EAAO,GAE1E,CACH,mMAEE,EAAA,SAAS,QAAQ,EAAM,WAAW,UAAU,EAAsB,YAAW,MAIhF,EAAA,iBAAP,SAAwB,EAAc,GAC5B,IAAA,EAAY,EAAsB,UACjC,MAAA,CACH,WACA,EAAM,cAAc,YACpB,EAAM,QAAQ,GACd,QAAQ,IAAI,uCAKL,EAAA,kBAAf,SAAiC,EAAc,GAEvC,IAAA,EAA4B,GAE5B,EAAqB,GAyBlB,OAvBH,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAC/C,EAAY,SAEP,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,QACpD,EAAY,UAEP,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,UACpD,EAAY,WAGZ,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,WAC3C,EAAiB,KAAK,IAAI,EAAA,KAAK,WAAW,GAAM,EAAO,CAAC,KAEnD,EAAM,UAAU,OAAS,EAAA,UAAU,MAAM,QAC9C,EAAiB,KAAK,IAAI,EAAA,KAAK,YAAY,GAAM,EAAO,CAAC,KAEpD,EAAM,UAAU,MAAQ,EAAA,UAAU,KAAK,YAC5C,EAAiB,KAAK,IAAI,EAAA,KAAK,aAAa,GAAO,EAAO,CAAC,KAG3D,EAAiB,KAAK,IAAI,EAAA,KAAK,UAAU,GAAM,EAAO,CAAC,KAGpD,GA5FY,EAAA,GAAc,wBA8FvC,EA/FF,GAAa,QAAA,sBAAA,EAiGb,IAAA,EAAA,WAAA,SAAA,KAwEE,OArES,EAAA,SAAP,SAAgB,EAAc,EAAgB,GAMtC,GAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAe,OAAO,EACrE,GAAA,EAAM,cAAc,eAAgB,OAAO,EAC3C,GAAA,EAAM,aAAe,IAAK,OAAO,EACjC,IAAC,EAAM,cAAc,SAAU,OAAO,EAGtC,GAAA,EAAM,WAAW,wBAAyB,OAAO,EAEjD,IAAA,EAAa,KAMV,OAHH,EAAO,OAAS,EAAG,EAAI,KAClB,EAAO,OAAS,IAAG,EAAI,MAEzB,EAAA,OAAO,kBAAkB,EAAG,EAAU,MAG1C,EAAA,SAAP,SAAgB,EAAc,GAKtB,OAAA,EAAM,cAAc,eAAuB,EAE3C,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAsB,EACrE,EAAM,aAAe,IAAY,EAChC,EAAM,cAAc,SAErB,EAAM,WAAW,wBAAgC,EAEjD,EAAO,OAAS,EAAU,EAAA,OAAO,SAAS,EAAG,GACxC,EAAO,OAAS,EAAU,EAAA,OAAO,UAAU,EAAG,GAC3C,EAAA,OAAO,UAAU,EAAG,GANU,GASvC,EAAA,SAAP,WACW,OAAA,GAGJ,EAAA,QAAP,SAAe,GACJ,MAAA,IAGJ,EAAA,aAAP,SAAoB,GACT,MAAA,IAGJ,EAAA,gBAAP,SAAuB,EAAc,GAC5B,MAAA,CACD,2BAA2B,EAAM,QAAO,oOAMzC,EAAA,iBAAP,SAAwB,EAAc,GAC3B,MAAA,CACH,WACI,EAAM,cAAc,eACpB,QAAQ,IAAI,0CAnED,EAAA,GAAc,2BAuEvC,EAxEF,GAAa,QAAA,yBAAA;;AC0xCA,aAAA,IAAA,EAAA,MAAA,KAAA,cAAA,SAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,OAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,EAAA,QAAA,EAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAljDb,IAAA,EAAA,QAAA,WACA,EAAA,QAAA,YACA,EAAA,QAAA,cAEA,EAAA,EAAA,QAAA,6BACA,EAAA,EAAA,QAAA,6BAgBA,EAAA,WAAA,SAAA,KAkDA,OA7CS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GACxC,OAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,iBAE1C,EAAO,aAIX,EAAA,SAAP,SAAgB,EAAc,GACrB,OAAA,GAGF,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,IAGF,EAAA,aAAP,SAAoB,GACX,MAAA,IAGF,EAAA,gBAAP,SAAuB,EAAc,GAE3B,OADK,EAAA,OAAO,SAAS,EAAG,IAEzB,KAAA,EAAG,EAAe,YAAc,EAAA,UAAU,SAAS,QAAS,MAC5D,KAAA,EAAG,EAAe,YAAc,EAAA,UAAU,SAAS,cAAe,MAClE,KAAA,EAAG,EAAe,YAAc,EAAA,UAAU,SAAS,QAGnD,MAAA,CAAC,4BAA4B,EAAM,aAAY,0BAC3C,EAAM,UAAU,eAAc,KAAK,EAAM,UAAU,cAAa,cACrE,EAAM,UAAU,aAAY,oBACtB,EAAA,UAAU,eAAe,EAAe,aAAY,kBAG3D,EAAA,iBAAP,SAAwB,EAAc,GAC9B,IAAA,EAAgC,EAAe,YAE9C,MAAA,CAAC,WACN,EAAM,UAAU,SAAW,EAC3B,QAAQ,IAAI,2CAA2C,EAAA,UAAU,eAAe,OA9C7D,EAAA,GAAc,iBAiDvC,EAlDA,GAoDA,EAAA,WAAA,SAAA,KA2DA,OAtDS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GACxC,OAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,eAGvB,EAAO,SAAS,OAC1C,SAAU,EAAO,EAAO,GACd,OAAA,GAAS,GAAW,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,gBAG/D,OAAS,GAIpB,EAAA,SAAP,SAAgB,EAAc,GACrB,OAAA,GAGF,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,IAGF,EAAA,aAAP,SAAoB,GACX,MAAA,IAGF,EAAA,gBAAP,SAAuB,EAAc,GAE/B,IAAA,EAAwB,EAAO,SAAS,OAC1C,SAAU,EAAO,EAAO,GACd,OAAA,GAAS,GAAW,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,gBAK/E,EAAuB,WAAa,EAAA,OAAO,OAAO,GAE9C,IAAA,EAAoB,EAAA,UAAU,eAAe,EAAuB,WAAW,UAAU,UAEtF,MAAA,CAAI,EAAM,mBAAkB,mCAAmC,EAAM,aAAY,iDACtD,EAAQ,MAGrC,EAAA,iBAAP,SAAwB,EAAc,GAC9B,IAAA,EAAgC,EAAuB,WAAW,UAAU,SAE3E,MAAA,CAAC,WACN,EAAM,UAAU,SAAW,EAC3B,QAAQ,IAAI,2BAA2B,EAAM,QAAO,gBAAgB,EAAA,UAAU,eAAe,OAvD1E,EAAA,GAAc,yBA0DvC,EA3DA,GA6DA,EAAA,WAAA,SAAA,KAoCA,OAjCS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GACxC,OAAA,EAAM,cAAgB,GAIrB,EAAA,SAAP,SAAgB,EAAc,GACrB,OAAA,GAGF,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,IAGF,EAAA,aAAP,SAAoB,GACX,MAAA,IAGF,EAAA,gBAAP,SAAuB,EAAc,GAC/B,OAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAC1C,CAAC,IAGD,CAAC,2BAA2B,EAAM,mBAAkB,iBAIxD,EAAA,iBAAP,SAAwB,EAAc,GAC7B,MAAA,CAAC,WAAa,EAAM,MAAO,EAAM,QAAQ,IAAO,EAAM,QAAO,iBAjC/C,EAAA,GAAc,sBAmCvC,EApCA,GAsCA,EAAA,WAAA,SAAA,KA2HA,OArHS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GACxC,IAAA,EAAa,KACb,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,aAAY,EAAI,MAG3D,IAAA,EAAwB,EAAO,SAAS,OAAO,SAAU,EAAO,EAAO,GAAe,OAAA,GAAS,IAW/F,OAPA,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,UAC7C,EAAc,EAAY,OAAO,SAAU,EAAG,EAAG,GAAW,OAAA,EAAM,aAAa,KAAO,IAE/E,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,aAClD,EAAc,EAAY,OAAO,SAAU,EAAG,EAAG,GAAW,OAAA,EAAM,aAAa,KAAO,KAG9D,GAAtB,EAAY,WAGZ,EAAA,OAAO,OAAO,KAChB,EAAY,SAAW,EAAA,OAAO,OAAO,IAC9B,KAOJ,EAAA,SAAP,SAAgB,EAAc,GACrB,OAAA,GAGF,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,IAGF,EAAA,aAAP,SAAoB,GACX,MAAA,IAGF,EAAA,gBAAP,SAAuB,EAAc,GAC/B,IAaA,EAbA,EAAmB,EAEjB,GAAyB,EAAA,OAAO,SAAS,EAAG,IAAM,EAAS,UAAY,KAAK,MAA4B,GAAtB,EAAS,cAC3F,GAAyB,EAAA,OAAO,SAAS,EAAG,IAAM,EAAY,SAAS,WAAa,KAAK,MAAwC,GAAlC,EAAY,SAAS,cAKrH,GAHL,EAAY,QAAW,EAAe,EAGjC,EAAS,UAAU,UAAY,EAAA,UAAU,SAAS,eAC/C,EAAY,SAAS,UAAU,UAAY,EAAA,UAAU,SAAS,cAC7D,MAAA,CAAC,IAIN,IAAA,EAAwB,GAExB,GAAA,EAAY,QAAU,EAAG,CACvB,IAAA,EAAiB,KAAK,IAAI,EAAY,SAAS,aAAc,EAAY,SAE7E,EAAiB,6BAGf,EADE,GAAkB,EAAY,SAAS,aACzB,qCAGA,2BAA2B,EAAc,8BAGxD,GAAI,EAAY,QAAU,EAAG,CAC5B,IAAA,EAAiB,KAAK,IAAI,EAAS,cAAe,EAAY,SAElE,EAAiB,2BAGf,EADE,GAAkB,EAAS,aACb,qCAGA,2BAA2B,EAAc,8BAI3D,EAAiB,mCAGZ,MAAA,CAAI,EAAS,mBAAkB,iBAAiB,EAAY,SAAS,QAAO,UACjF,EAAc,SACd,IAGG,EAAA,iBAAP,SAAwB,EAAc,GAC9B,IAAA,EAAmB,EAAY,SAC/B,EAAmB,EAAY,QAEjC,OAAA,EAAU,EACL,CAAC,WACN,QAAQ,IAAI,oBAAoB,EAAO,KACvC,EAAS,mBAAmB,GAC5B,EAAM,mBAAmB,KAAK,MAAM,EAAQ,MAGvC,EAAU,EACV,CAAC,WACN,QAAQ,IAAI,oBAAoB,EAAO,KACvC,EAAM,oBAAoB,KAIrB,CAAC,WACN,QAAQ,IAAI,wBAtHK,EAAA,GAAc,cA0HvC,EA3HA,GA6HA,EAAA,WAAA,SAAA,KAgDA,OA3CS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GACrC,OAAA,EAAM,WAGR,EAAA,SAAP,SAAgB,EAAc,GACrB,OAAA,GAGF,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,IAGF,EAAA,aAAP,SAAoB,GACX,MAAA,IAGF,EAAA,gBAAP,SAAuB,EAAc,GAC/B,IAAA,EAAe,EAAO,SAGtB,OAFJ,EAAe,cAAgB,EAAA,OAAO,OAAO,GAEzC,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAC1C,CACF,EAAM,mBAAkB,wBAAwB,EAAO,kBAAiB,yBACvE,EAAe,cAAc,kBAAiB,YAG1C,CAAC,KAGR,EAAA,iBAAP,SAAwB,EAAc,GAC9B,IAAA,EAAgB,EAAe,cAE9B,MAAA,CAAC,WACN,EAAO,YAAY,GACnB,EAAc,SAAS,GAEvB,QAAQ,IAAO,EAAM,QAAO,sBAAsB,EAAO,aAAY,OAAO,EAAc,aAAY,QA5CnF,EAAA,GAAc,iBA+CvC,EAhDA,GAkDA,EAAA,WAAA,SAAA,KA4EA,OAzES,EAAA,SAAP,SAAgB,EAAc,EAAgB,GACxC,OAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,kBAC9C,EAAO,eAGR,EAAM,WAAW,qBAId,EAAA,OAAO,kBAAkB,KAAQ,EAAU,OAG7C,EAAA,SAAP,SAAgB,EAAc,GACrB,OAAA,EAAA,OAAO,SAAS,EAAG,IAGrB,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,CACL,sBACA,iCACA,6CAIG,EAAA,aAAP,SAAoB,GACR,OAAA,EAAM,mBAAkB,8MAI7B,EAAA,gBAAP,SAAuB,EAAc,GAC5B,MAAA,CACL,6FACA,sFACA,yJAKG,EAAA,iBAAP,SAAwB,EAAc,GAC7B,MAAA,CACL,WAGM,GAAA,EAAA,OAAO,OAAO,IAChB,EAAM,UAAU,SAAW,EAAA,UAAU,SAAS,YAE3C,CACC,IAAA,EAAe,EAAO,SAEtB,EAAyB,EAAA,OAAO,OAAO,GAE3C,EAAO,YAAY,GACnB,EAAc,SAAS,KAG3B,WAEE,EAAM,UAAU,SAAW,EAAA,UAAU,SAAS,cAC9C,EAAM,WAAW,oBACjB,EAAM,mBAAmB,IAE3B,WAEE,EAAM,UAAU,SAAW,EAAA,UAAU,SAAS,QAC9C,EAAM,WAAW,oBACjB,EAAM,WAAW,oBAvET,EAAA,GAAc,6BA2E9B,EA5EA,GA8EA,EAAA,WAAA,SAAA,KAqDA,OAlDS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GACxC,OAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,YAC9C,EAAO,eAGR,EAAM,WAAW,sBAId,EAAA,OAAO,kBAAkB,KAAQ,EAAU,OAG7C,EAAA,SAAP,SAAgB,EAAc,GACrB,OAAA,EAAA,OAAO,SAAS,EAAG,IAGrB,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,CACL,yBACA,mCAIG,EAAA,aAAP,SAAoB,GACX,MAAA,8BAA8B,EAAM,QAAO,iMAK7C,EAAA,gBAAP,SAAuB,EAAc,GAC5B,MAAA,CACL,2EACA,iDAIG,EAAA,iBAAP,SAAwB,EAAc,GAC7B,MAAA,CACL,WACE,EAAM,WAAW,sBAEnB,WACE,EAAM,UAAU,SAAW,EAAA,UAAU,SAAS,WAhDtC,EAAA,GAAc,8BAoD9B,EArDA,GAuDA,EAAA,WAAA,SAAA,KA6CA,OA1CS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GACxC,OAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,YAC9C,EAAO,eAGR,EAAM,WAAW,kBAId,EAAA,OAAO,kBAAkB,KAAQ,EAAU,OAG7C,EAAA,SAAP,SAAgB,EAAc,GACrB,OAAA,EAAA,OAAO,SAAS,EAAG,IAGrB,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,IAGF,EAAA,aAAP,SAAoB,GACX,MAAA,IAGF,EAAA,gBAAP,SAAuB,EAAc,GAC5B,MAAA,CACL,cAAc,EAAM,QAAO,oHAKxB,EAAA,iBAAP,SAAwB,EAAc,GAC7B,MAAA,CACL,WACE,EAAM,WAAW,oBAxCT,EAAA,GAAc,0BA4C9B,EA7CA,GA+CA,EAAA,WAAA,SAAA,KAmEA,OAhES,EAAA,SAAP,SAAgB,EAAc,EAAgB,GACxC,OAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,YAC9C,EAAO,gBACP,EAAM,WAAW,yBACjB,EAAM,cAAc,eAErB,EAAM,WAAW,sBACjB,EAAM,WAAW,oBAEd,EAAA,OAAO,kBAAkB,KAAS,EAAU,WAG9C,EAAA,SAAP,SAAgB,EAAc,GACxB,OAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,QAAgB,EAC9D,EAAO,aACP,EAAM,WAAW,sBACjB,EAAM,cAAc,YAErB,EAAM,WAAW,mBAA2B,EAC5C,EAAM,WAAW,mBAA2B,EAEzC,EAPyB,GAU3B,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,CACL,6BACA,yBACA,+BAIG,EAAA,aAAP,SAAoB,GACX,MAAA,uDAAuD,EAAM,QAAO,6JAKtE,EAAA,gBAAP,SAAuB,EAAc,GAC5B,MAAA,CACL,+MAEA,iGACA,+GAIG,EAAA,iBAAP,SAAwB,EAAc,GAC7B,MAAA,CACL,WACE,EAAM,WAAW,oBAEnB,WACE,EAAM,WAAW,oBAEnB,WACE,EAAM,WAAW,sBA9DT,EAAA,GAAc,gCAkE9B,EAnEA,GAqEA,EAAA,WAAA,SAAA,KAgFA,OA3ES,EAAA,SAAP,SAAgB,EAAc,EAAgB,GAKxC,QAAC,EAAO,gBACP,EAAM,WAAW,wBACjB,EAAM,cAAc,mBAGrB,EAAuB,cAEvB,EAAA,OAAO,kBAAkB,KAAS,EAAU,OAC9C,EAAuB,WAAY,GAC5B,QAOJ,EAAA,SAAP,SAAgB,EAAc,GACxB,OAAC,EAAO,aACP,EAAM,WAAW,qBACjB,EAAM,cAAc,gBAErB,EAAuB,UAAkB,EAEtC,EANyB,GAS3B,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,CACL,oCACA,iCAIG,EAAA,aAAP,SAAoB,GACX,MAAA,8BAA8B,EAAM,QAAO,mNAK7C,EAAA,gBAAP,SAAuB,EAAc,GAC5B,MAAA,CACL,uNAGA,kFAIG,EAAA,iBAAP,SAAwB,EAAc,GAC7B,MAAA,CACL,WACE,EAAO,aAAa,yBAChB,IAAA,EAAe,EAAO,SAEtB,EAAyB,EAAA,OAAO,OAAO,GAE3C,EAAO,YAAY,GACnB,EAAc,SAAS,IAEzB,WACE,EAAM,WAAW,sBACjB,EAAM,WAAW,kBACjB,EAAO,aAAa,qBA3EZ,EAAA,GAAc,yBAEb,EAAA,WAAsB,EA6EvC,EAhFA,GAkFA,EAAA,WAAA,SAAA,KA2FA,OAtFS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GACxC,OAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,YAC9C,EAAO,gBACP,EAAM,WAAW,qBACjB,EAAM,cAAc,YAGrB,EAAO,aAAa,sBAKpB,EAA0B,cAE1B,EAAA,OAAO,kBAAkB,KAAS,EAAU,OAC9C,EAA0B,WAAY,GAC/B,UAOJ,EAAA,SAAP,SAAgB,EAAc,GACxB,OAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,QAAgB,EAC9D,EAAO,aACP,EAAM,WAAW,kBACjB,EAAM,cAAc,SAGrB,EAAO,aAAa,mBACf,EAIL,EAA0B,UAAkB,EAEzC,EAZyB,GAe3B,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,CACL,0BACA,+BAIG,EAAA,aAAP,SAAoB,GACX,MAAA,gCAAgC,EAAM,QAAO,uTAM/C,EAAA,gBAAP,SAAuB,EAAc,GAC5B,MAAA,CACL,iEACA,uLAKG,EAAA,iBAAP,SAAwB,EAAc,GAE9B,IAAA,EAAwB,EAAO,SAAS,OAAO,SAAU,EAAG,EAAG,GAC3D,OAAA,GAAK,GAAW,EAAE,UAAU,UAAY,EAAA,UAAU,SAAS,UAG9D,MAAA,CACL,WACgB,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAa,CAAjB,EAAA,GACN,mBAAmB,GAAQ,GAG/B,EAAO,aAAa,oBAEtB,WACE,EAAM,UAAU,SAAW,EAAA,UAAU,SAAS,QAC9C,EAAO,aAAa,sBAtFZ,EAAA,GAAc,4BAEb,EAAA,WAAsB,EAwFvC,EA3FA,GA6FA,EAAA,WAAA,SAAA,KAyEA,OApES,EAAA,SAAP,SAAgB,EAAc,EAAgB,GACxC,OAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,YAC9C,EAAO,gBACP,EAAM,WAAW,yBACjB,EAAM,cAAc,oBACpB,EAAO,aAAa,sBAGrB,EAAO,aAAa,sBAKpB,EAA2B,cAE3B,EAAA,OAAO,kBAAkB,KAAS,EAAU,OAC9C,EAA2B,WAAY,GAChC,WAOJ,EAAA,SAAP,SAAgB,EAAc,GACxB,OAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,QAAgB,EAC9D,EAAO,aACP,EAAM,WAAW,sBACjB,EAAM,cAAc,iBACpB,EAAO,aAAa,mBAGrB,EAAO,aAAa,mBACf,EAIL,EAA2B,UAAkB,EAE1C,EAbyB,GAgB3B,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,IAGF,EAAA,aAAP,SAAoB,GACX,MAAA,IAGF,EAAA,gBAAP,SAAuB,EAAc,GAC5B,MAAA,CAAI,EAAM,mBAAkB,oRAM9B,EAAA,iBAAP,SAAwB,EAAc,GAC7B,MAAA,CACL,WACE,EAAO,aAAa,sBApEZ,EAAA,GAAc,6BAEb,EAAA,WAAsB,EAsEvC,EAzEA,GA2EA,EAAA,WAAA,SAAA,KAsFA,OAnFS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GAKxC,OAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,kBAC9C,EAAM,cAAc,gBACpB,EAAM,cAAc,kBAErB,EAAM,WAAW,YAEd,EAAA,OAAO,kBAAkB,KAAS,EAAU,UAG9C,EAAA,SAAP,SAAgB,EAAc,GACxB,OAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAsB,EACpE,EAAM,cAAc,aACpB,EAAM,cAAc,eAErB,EAAM,WAAW,WAAmB,EAEjC,EAAA,OAAO,SAAS,EAAG,GALmB,GAQxC,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,IAGF,EAAA,aAAP,SAAoB,GACX,MAAA,IAGF,EAAA,gBAAP,SAAuB,EAAc,GAC/B,IAAA,EAAuB,GACnB,OAAA,EAAM,UAAU,QACjB,KAAA,EAAA,UAAU,OAAO,WAAY,EAAc,gBAAiB,MAC5D,KAAA,EAAA,UAAU,OAAO,UAAW,EAAc,4BAA6B,MACvE,KAAA,EAAA,UAAU,OAAO,WAAY,EAAc,+BAAgC,MAC3E,KAAA,EAAA,UAAU,OAAO,QAAS,EAAc,uBAG3C,IAAA,EAAsB,GAClB,OAAA,EAAM,UAAU,OACjB,KAAA,EAAA,UAAU,MAAM,QAAS,EAAa,oCAAqC,MAC3E,KAAA,EAAA,UAAU,MAAM,QAAS,EAAa,6BAA8B,MACpE,KAAA,EAAA,UAAU,MAAM,QAAS,EAAa,gCAAiC,MACvE,KAAA,EAAA,UAAU,MAAM,SAAU,EAAa,2CAG1C,IAAA,EAAqB,GACjB,OAAA,EAAM,UAAU,MACjB,KAAA,EAAA,UAAU,KAAK,aAAc,EAAY,wBAAyB,MAClE,KAAA,EAAA,UAAU,KAAK,YAAa,EAAY,4BAK3C,IAAA,EAAyB,GACrB,OAAA,EAAM,UAAU,UACjB,KAAA,EAAA,UAAU,SAAS,QAAS,EAAgB,wCAAyC,MACrF,KAAA,EAAA,UAAU,SAAS,cAAe,EAAgB,qCAAsC,MACxF,KAAA,EAAA,UAAU,SAAS,QAAS,EAAgB,gCAG5C,MAAA,CACF,EAAM,mBAAkB,oIACuC,EAAW,KAAK,EAAU,YAC1F,EAAS,SAAS,EAAa,MAI9B,EAAA,iBAAP,SAAwB,EAAc,GAC7B,MAAA,CACL,WACE,EAAM,WAAW,WACjB,QAAQ,IAAO,EAAM,QAAO,kCAjFpB,EAAA,GAAc,oBAqF9B,EAtFA,GAwFA,EAAA,WAAA,SAAA,KAmEA,OAhES,EAAA,SAAP,SAAgB,EAAc,EAAgB,GAKxC,OAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,kBAC9C,EAAM,WAAW,eAClB,EAAM,aAAe,QAErB,EAAM,WAAW,kBACjB,EAAM,WAAW,cAEd,EAAA,OAAO,kBAAkB,KAAS,EAAU,WAG9C,EAAA,SAAP,SAAgB,EAAc,GACxB,OAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAsB,EACpE,EAAM,WAAW,WAClB,EAAM,aAAe,IAAY,EAEjC,EAAM,WAAW,eAAuB,EACxC,EAAM,WAAW,aAAqB,EAEnC,EAAA,OAAO,SAAS,EAAG,GANe,GASpC,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,CACL,6BACA,mCAIG,EAAA,aAAP,SAAoB,GACX,MAAA,yBAAyB,EAAM,QAAO,8LAKxC,EAAA,gBAAP,SAAuB,EAAc,GAC5B,MAAA,CACL,yHAEA,8IAKG,EAAA,iBAAP,SAAwB,EAAc,GAC7B,MAAA,CACL,WACE,EAAM,WAAW,aACjB,QAAQ,IAAO,EAAM,QAAO,2BAE9B,WACE,EAAM,WAAW,eACjB,QAAQ,IAAO,EAAM,QAAO,+BA9DpB,EAAA,GAAc,mBAkE9B,EAnEA,GAqEA,EAAA,WAAA,SAAA,KAkEA,OA/DS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GAKxC,OAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,kBAC9C,EAAM,WAAW,iBACjB,EAAM,WAAW,uBAElB,EAAM,WAAW,gBAEd,EAAA,OAAO,kBAAkB,KAAS,EAAU,UAG9C,EAAA,SAAP,SAAgB,EAAc,GACxB,OAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAsB,EACpE,EAAM,WAAW,cACjB,EAAM,WAAW,oBAElB,EAAM,WAAW,eAAuB,EAErC,EAAA,OAAO,SAAS,EAAG,GALiB,GAQtC,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,CACL,mCACA,mCAIG,EAAA,aAAP,SAAoB,GACX,MAAA,qCAAqC,EAAM,QAAO,uRAMpD,EAAA,gBAAP,SAAuB,EAAc,GAC5B,MAAA,CACL,2PAGA,qFAIG,EAAA,iBAAP,SAAwB,EAAc,GAC7B,MAAA,CACL,WACE,EAAM,WAAW,eACjB,EAAM,UAAU,KAAO,EAAA,UAAU,KAAK,cAExC,WACE,EAAM,WAAW,eACjB,EAAM,UAAU,KAAO,EAAA,UAAU,KAAK,gBA7D9B,EAAA,GAAc,mBAiE9B,EAlEA,GAoEA,EAAA,WAAA,SAAA,KA2HA,OAtHS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GAMxC,OAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,gBAC/C,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,UAC3C,EAAM,UAAU,OAAS,EAAA,UAAU,MAAM,WACzC,EAAM,WAAW,qBAEd,EAAA,OAAO,OAAO,UAGhB,EAAA,SAAP,SAAgB,EAAc,GACrB,OAAA,GAGF,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,CACL,uCACA,6CAIG,EAAA,aAAP,SAAoB,GACX,MAAA,sBAAsB,EAAM,QAAO,sPAKrC,EAAA,gBAAP,SAAuB,EAAc,GAC/B,IAAA,EAAmB,GAGnB,GAAA,EAAM,OAAO,OAAS,EAAG,CAErB,IACF,EAAsB,GAClB,OAFK,EAAA,OAAO,SAAS,EAAG,IAGzB,KAAA,EAAG,EAAa,QAAS,MACzB,KAAA,EAAG,EAAa,WAAY,MAC5B,KAAA,EAAG,EAAa,YAAa,MAC7B,KAAA,EAAG,EAAa,WAAY,MAC5B,KAAA,EAAG,EAAa,UAMT,IADV,IACU,EAAA,EAAA,EAAA,EAAM,OAAN,EAAA,EAAA,OAAA,IAAc,CAAnB,IAAA,EAAC,EAAA,GAEN,EAAQ,KAAK,IAAI,EAAA,KAAK,EAAE,KAAM,EAAE,QAAQ,EAAM,EAAE,aAOpD,EAAU,CAAC,IAAI,EAAA,KAAK,GAAY,GAAM,EAAO,KAAK,OAAO,GAKvD,OAFJ,EAAqC,aAAe,EAEhD,EAAQ,OAAS,EACZ,CACL,yRAGA,2IACiC,EAAA,SAAS,QAAQ,EAAM,WAAW,UAAU,IAAS,KAIjF,CACL,yRAGA,oGAKC,EAAA,iBAAP,SAAwB,EAAc,GAC9B,IAAA,EAAmB,EAAqC,aAEvD,MAAA,CACL,WACE,EAAM,WAAW,qBAEnB,WACM,IAAA,EAAmB,EAAM,MAAM,CAAC,GAAK,KAAM,GAG3C,EAAQ,OAAS,GACnB,EAAS,QAAQ,GAInB,EAAS,UAAU,OAAS,EAAA,UAAU,OAAO,WAC7C,EAAS,UAAU,MAAQ,EAAA,UAAU,MAAM,QAG3C,EAAS,mBAAmB,MAGxB,IAAA,EAAe,EAAO,SAEG,EAAA,OAAO,OAAO,GAE7B,SAAS,MAtHf,EAAA,GAAc,uCA0H9B,EA3HA,GA6HA,EAAA,WAAA,SAAA,KA2LA,OAtLS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GAKxC,GAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAe,OAAO,EACrE,GAAA,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,WAAY,OAAO,EAC9D,IAAC,EAAM,cAAc,YAAa,OAAO,EAGzC,IAAA,EAAwB,EAAO,SAAS,OAAO,SAAU,EAAG,EAAG,GACzD,OAAA,GAAK,GAAW,EAAE,cAAc,aAA0C,GAAzB,EAAM,aAAa,KAG1E,OAAsB,GAAtB,EAAY,WAGZ,EAAA,OAAO,OAAO,QAChB,EAAqB,WAAa,EAAA,OAAO,OAAO,IACzC,KAKJ,EAAA,SAAP,SAAgB,EAAc,GACrB,OAAA,GAGF,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACP,IAAA,EAAQ,EAAqB,WAM/B,OAAA,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,WACtC,CACL,4BACA,qCAGK,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,UAC3C,CACL,mCACA,iCAGK,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,WAC3C,CACL,oCACA,kCAIK,CACL,mCACA,yCAKC,EAAA,aAAP,SAAoB,GACZ,IAAA,EAAQ,EAAqB,WAE/B,EAAsB,EAAM,mBAAkB,wEAChD,EAAM,QAAO,qIAsBR,OAnBH,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,WAC7C,GAAW,IAAI,EAAM,mBAAkB,gHAGhC,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,UAClD,GAAW,IAAI,EAAM,mBAAkB,wNAIhC,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,WAClD,GAAW,IAAI,EAAM,mBAAkB,4MAErC,EAAM,QAAO,0BAA0B,EAAM,QAAO,6BAGtD,GAAW,IAAI,EAAM,mBAAkB,iMAIlC,GAGF,EAAA,gBAAP,SAAuB,EAAc,GAC7B,IAAA,EAAQ,EAAqB,WAE/B,OAAA,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,WACtC,CACF,EAAM,mBAAkB,kHAExB,EAAM,mBAAkB,mIAItB,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,UAC3C,CACF,EAAM,mBAAkB,0CAA0C,EAAM,QAAO,kFAE/E,EAAM,mBAAkB,0CAA0C,EAAM,QAAO,wEAI7E,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,WAC3C,CACF,EAAM,mBAAkB,0CAA0C,EAAM,QAAO,qFAE/E,EAAM,mBAAkB,+BAA+B,EAAM,QAAO,qFAKlE,CACF,EAAM,mBAAkB,gDACxB,EAAM,mBAAkB,oGACS,EAAM,QAAO,eAKhD,EAAA,iBAAP,SAAwB,EAAc,GAC9B,IAAA,EAAQ,EAAqB,WAE/B,OAAA,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,WACtC,CACL,WACE,EAAM,mBAAmB,GAAQ,GACjC,EAAM,mBAAmB,GAAQ,IAEnC,WACE,EAAM,mBAAmB,GAAQ,GACjC,EAAM,mBAAmB,GAAQ,KAI9B,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,UAC3C,CACL,WACE,EAAM,mBAAmB,EAAO,GAChC,EAAM,mBAAmB,EAAO,IAElC,WACE,EAAM,mBAAmB,EAAO,GAChC,EAAM,mBAAmB,EAAO,KAI7B,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,WAC3C,CACL,WACE,EAAM,mBAAmB,EAAO,GAChC,EAAM,mBAAmB,EAAO,IAElC,WACE,EAAM,mBAAmB,EAAO,GAChC,EAAM,mBAAmB,EAAO,KAK7B,CACL,WACE,EAAM,mBAAmB,GAAQ,GACjC,EAAM,mBAAmB,GAAQ,IAEnC,WACE,EAAM,mBAAmB,GAAQ,GACjC,EAAM,mBAAmB,GAAQ,MArL3B,EAAA,GAAc,uBA0L9B,EA3LA,GA6LA,EAAA,WAAA,SAAA,KA4HA,OAzHS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GAMxC,QAAC,EAAO,gBACP,EAAM,WAAW,0BACjB,EAAM,cAAc,gBACpB,EAAO,aAAa,oBAGrB,EAAW,KACN,EAAA,OAAO,OAAO,UAKlB,EAAA,SAAP,SAAgB,EAAc,GAMxB,OAAC,EAAO,aACP,EAAM,WAAW,uBACjB,EAAM,cAAc,aACpB,EAAO,aAAa,kBAElB,EALyB,GAQ3B,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACT,OAAA,EAAM,WAAW,kBACZ,CACL,oBACA,+BAIK,CACL,uCACA,8CAKC,EAAA,aAAP,SAAoB,GACd,OAAA,EAAM,WAAW,kBACf,EAAM,WAAW,kBACT,EAAM,mBAAkB,8eAOxB,EAAM,mBAAkB,+dAQhC,EAAM,WAAW,kBACT,EAAM,mBAAkB,sRAKxB,EAAM,mBAAkB,wQAOjC,EAAA,gBAAP,SAAuB,EAAc,GAC/B,OAAA,EAAM,WAAW,kBACZ,CACL,+DACA,sDAIK,CACL,gDACA,gKAOC,EAAA,iBAAP,SAAwB,EAAc,GAChC,OAAA,EAAM,WAAW,kBACZ,CACL,WACE,EAAM,mBAAmB,GACrB,EAAA,OAAO,OAAO,KAAM,EAAM,cAAc,mBAE9C,WACE,EAAM,mBAAmB,KAKtB,CACL,aAEA,WACE,EAAM,WAAW,qBAtHX,EAAA,GAAc,+BA2H9B,EA5HA,GA8HA,EAAA,WAAA,SAAA,KAyEA,OAtES,EAAA,SAAP,SAAgB,EAAc,EAAgB,GAMxC,OAAA,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,aAC3C,EAAM,UAAU,MAAQ,EAAA,UAAU,KAAK,iBACvC,EAAM,aAAe,OACrB,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,iBAE/C,EAAM,WAAW,iBAEd,EAAA,OAAO,kBAAkB,KAAS,EAAU,WAG9C,EAAA,SAAP,SAAgB,EAAc,GAMxB,OAAA,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,WAAmB,EAC9D,EAAM,UAAU,MAAQ,EAAA,UAAU,KAAK,aAAqB,EAC5D,EAAM,aAAe,IAAY,EACjC,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAsB,EAErE,EAAM,WAAW,gBAAwB,EAEtC,GAGF,EAAA,SAAP,WACS,OAAA,GAGF,EAAA,QAAP,SAAe,GACN,MAAA,CACL,sCACA,0CAIG,EAAA,aAAP,SAAoB,GACX,MAAA,kCAAkC,EAAM,QAAO,+KAKjD,EAAA,gBAAP,SAAuB,EAAc,GAC5B,MAAA,CACL,yMAEA,uEAIG,EAAA,iBAAP,SAAwB,EAAc,GAC7B,MAAA,CACL,WACQ,IAAA,EAAa,KAAK,MAA2B,GAArB,EAAM,cAC9B,EAAa,KAAK,MAA2B,GAArB,EAAM,cACpC,EAAM,mBAAmB,EAAA,OAAO,SAAS,EAAY,IACrD,EAAM,UAAU,KAAO,EAAA,UAAU,KAAK,aAExC,WACE,EAAM,WAAW,mBApET,EAAA,GAAc,yBAwE9B,EAzEA,GA2Ea,QAAA,YAA6B,CACxC,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAEA,EAAU,iBACV,EAAU,aACV,EAAU,YAEV,EAAU,kBACV,EAAU,mBACV,EAAU,0BACV,EAAU,sBACV,EAAU","file":"tribe_events.5e662fe0.js","sourceRoot":"../src","sourcesContent":["export class Random {\n  static interval(min: number, max: number) : number {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  static choice<T>(array: T[]) : T {\n    const index = Random.interval(0, array.length - 1);\n    return array[index];\n  }\n\n  static chance(c: number) : boolean {\n    if (Math.random() < c) return true;\n    else return false;\n  }\n\n  static progressiveChance(c: number, progress: number, upperBound: number) : boolean {\n    const limit = Math.min(progress * c, upperBound);\n  \n    if (Math.random() < limit) return true;\n    else return false;\n  }\n}","export class IDAllocator {\n  private static ids : Object = {};\n\n  static allocate(base: string) : string {\n    if (!IDAllocator.ids.hasOwnProperty(base)) {\n      IDAllocator.ids[base] = 0;\n    }\n\n    let id : string = `${base}-${IDAllocator.ids[base]}`;\n    IDAllocator.ids[base]++;\n\n    return id;\n  }\n}","import { Random } from \"./random\";\n\nconst Alphabet : string[] = []\n\nfor (let i = 0; i < 26; i++) {\n  Alphabet[i] = String.fromCharCode(97 + i);  \n}\n\nconst Vowel : string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\nconst Consonant : string[] = Alphabet.filter(function (v, i, a) {return (Vowel.indexOf(v) == -1)});\n\nclass Suffix {\n    public readonly suffix : string;\n    public readonly optional : string;\n\n    constructor(suffix: string, optional: string) {\n        this.suffix = suffix;\n        this.optional = optional;\n    }\n}\n\nexport class Noun {\n    public readonly base : string;\n    \n    public readonly plural : boolean;\n    public readonly genitive : boolean;\n    \n    public readonly adjectives : string[];\n\n    constructor(base: string, plural: boolean, genitive: boolean, adjectives: string[]) {\n        this.base = base;\n        this.plural = plural;\n        this.genitive = genitive;\n        this.adjectives = adjectives;\n    }\n}\n\nexport class Language {\n    public static capitalize(word: string) : string {\n        let restOfWord : string = word.slice(1);\n        return word.charAt(0).toUpperCase() + restOfWord;\n    }\n\n    public static toTitle(sentence: string) : string {\n      return sentence.split(' ').map(Language.capitalize).join(' ');\n    }\n\n    private static getSuffix() : Suffix {\n        let optional : string = Random.choice(Vowel);\n\n        let suffix : string = Random.choice(Consonant) + Random.choice(Vowel);\n\n        return new Suffix(suffix, optional);\n    }\n\n    private static addSuffix(word: string, suffix: Suffix) : string {\n        if (Consonant.indexOf(word[word.length-1]) > -1) {\n            word += suffix.optional;\n        }\n        word += suffix.suffix;\n\n        return word;\n    }\n\n    private readonly plural : Suffix;\n    private readonly genitive : Suffix;\n    private readonly adjective : Suffix;\n\n    private readonly adjectivePolicy : Language.Position;\n\n    private translations : Object;\n\n    constructor() {\n        this.plural = Language.getSuffix();\n        this.genitive = Language.getSuffix();\n        this.adjective = Language.getSuffix();\n\n        if (Random.chance(0.5)) {\n            this.adjectivePolicy = Language.Position.Before;\n        }\n        else {\n            this.adjectivePolicy = Language.Position.After;\n        }\n\n        this.translations = {};\n    }\n\n    translate(sentence: Noun[]) : string {\n        let sentenceTranslated : string[] = [];\n        \n        for (let word of sentence) {\n            let wordTranslated : string = this.translateWord(word.base);\n\n            if (word.plural) wordTranslated = Language.addSuffix(wordTranslated, this.plural);\n            if (word.genitive) wordTranslated = Language.addSuffix(wordTranslated, this.genitive);\n\n            let adjectives : string[] = []\n            for (let adj of word.adjectives) {\n                let adjTranslated = this.translateWord(adj);\n\n                adjTranslated = Language.addSuffix(adjTranslated, this.adjective);\n\n                adjectives.push(adjTranslated);\n            }\n\n            if (this.adjectivePolicy == Language.Position.Before) {\n                sentenceTranslated = sentenceTranslated.concat(adjectives);\n            }\n\n            sentenceTranslated.push(wordTranslated);\n\n            if (this.adjectivePolicy == Language.Position.After) {\n                sentenceTranslated = sentenceTranslated.concat(adjectives);\n            }\n        }\n\n        return sentenceTranslated.join(\" \");\n    }\n\n    private translateWord(word: string) {\n        // First split word into phonemes.\n        let phonemes : string[] = [];\n\n        let currentPhoneme : string = \"\";\n\n        for (let letter of word.split('')) {\n            if (currentPhoneme.length > 0) {\n                let lastLetter = currentPhoneme[currentPhoneme.length - 1];\n\n                if (Vowel.indexOf(lastLetter) > -1) {\n                    phonemes.push(currentPhoneme);\n                    currentPhoneme = \"\";\n                }\n                else if ((Consonant.indexOf(lastLetter) > -1) && (Consonant.indexOf(letter) > -1)) {\n                    if (lastLetter != letter) {\n                        phonemes.push(currentPhoneme);\n                        currentPhoneme = \"\";\n                    }\n                }\n            }\n\n            currentPhoneme += letter;\n        }\n\n        if (currentPhoneme.length > 0) phonemes.push(currentPhoneme);\n\n        // Translate each phoneme.\n        let wordTranslated : string = \"\";\n\n        for (let p of phonemes) {\n            wordTranslated += this.translatePhoneme(p);\n        }\n\n        return wordTranslated;\n    }\n\n    private translatePhoneme(phoneme: string) {\n        if (!this.translations.hasOwnProperty(phoneme)) {\n            let t : string = \"\";\n\n            for (let letter of phoneme.split('')) {\n                if (Consonant.indexOf(letter) > -1) t += Random.choice(Consonant);\n                else t += Random.choice(Vowel);\n            }\n\n            this.translations[phoneme] = t;\n        }\n\n        return this.translations[phoneme];\n    }\n}\n\nexport namespace Language {\n    export enum Position {\n        Before = \"Before\",\n        After = \"After\",\n    }\n}","import { Random } from \"./random\";\nimport { IDAllocator } from \"./idallocator\";\nimport { Language, Noun } from \"./language\";\n\n// A tribe is a group of people with common traits.\nexport class Tribe {\n  private _population : number;\n\n  private _migrationChance : number;\n\n  private _eventProgress : Object;\n\n  private _technology : string[];\n  private _culture : string[];\n\n  private _name : Noun[];\n  private _language : Language;\n\n  private _relations : Object;\n\n  public attitudes: Attitudes;\n\n  public dead : boolean;\n\n  public readonly id : string;\n\n  constructor(population: number) {\n    this.id = IDAllocator.allocate(\"tribe\");\n\n    this._population = population;\n    this._migrationChance = 0.000001;\n    this._eventProgress = {};\n\n    this._relations = {};\n\n    this._technology = [];\n    this._culture = [];\n\n    this._name = [];\n\n    this.attitudes = new Attitudes();\n\n    this.attitudes.monolith = Attitudes.Monolith.Unencountered;\n\n    this.dead = false;\n\n    this.attitudes.others = Random.choice([\n      Attitudes.Others.Aggressive,\n      Attitudes.Others.Defensive,\n      Attitudes.Others.Diplomatic,\n      Attitudes.Others.Insular\n    ]);\n\n    this.attitudes.world = Random.choice([\n      Attitudes.World.Exploit,\n      Attitudes.World.Explore,\n      Attitudes.World.Harmony,\n      Attitudes.World.Survival\n    ])\n\n    this.attitudes.self = Random.choice([\n      Attitudes.Self.Hierarchical,\n      Attitudes.Self.Egalitarian\n    ])\n\n    this._language = new Language();\n  }\n\n  population() : number {\n    return this._population;\n  }\n\n  decreasePopulation(value: number) {\n    this._population -= value;\n  }\n\n  increasePopulation(value: number) {\n    this._population += value;\n  }\n\n  // Determines change in tribe's population.\n  grow() {\n    const oldPopulation = this.population();\n\n    let growthCount : number = 0;\n    let deathCount : number = 0;\n\n    const growthRate = this.growthRate();\n    const deathRate = this.deathRate();\n\n    for (let i = 0; i < 20; i++) {\n      if (Random.chance(growthRate)) growthCount += (Math.floor(this.population()*0.05));\n      if (Random.chance(deathRate)) deathCount += (Math.floor(this.population()*0.05));\n    }\n\n    // Increase population by growth count and decrease by death count.\n    this.increasePopulation(growthCount);\n    this.decreasePopulation(deathCount);\n  }\n\n  // Splits the tribe into multiple groups according to the proportions given.\n  // Returns a list of the new tribes (excluding the original).\n  split(proportions: number[]) : Tribe[] {\n    let populations : number[] = [];\n    let newTribes : Tribe[] = [];\n\n    for (let p of proportions) {\n      populations.push(Math.floor(this._population*p));\n    }\n\n    for (let p of populations.slice(1)) {\n      let t : Tribe = new Tribe(p);\n\n      // Set attitudes of the new tribe to the same as this one.\n      t.attitudes.monolith = this.attitudes.monolith;\n      t.attitudes.others = this.attitudes.others;\n      t.attitudes.world = this.attitudes.world;\n      t.attitudes.self = this.attitudes.self;\n\n      // Set technology and culture of new tribe.\n      for (let tech of this._technology) {\n        t.addTechnology(tech);\n      }\n\n      for (let cult of this._culture) {\n        t.addCulture(cult);\n      }\n\n      // Set migration chance of new tribe.\n      t.setMigrationChance(this._migrationChance);\n\n      newTribes.push(t);\n    }\n\n    // Reduce this tribe's population to the first proportion.\n    this._population = Math.floor(proportions[0] * this._population);\n\n    // Return the new tribes.\n    return newTribes;\n  }\n\n  relationship(tribe: Tribe) : number {\n    if (!this._relations.hasOwnProperty(tribe.id)) {\n      return 0;\n    }\n\n    return this._relations[tribe.id];\n  }\n\n  changeRelationship(tribe: Tribe, value: number) {\n    if (!this._relations.hasOwnProperty(tribe.id)) {\n      this._relations[tribe.id] = 0;\n    }\n\n    this._relations[tribe.id] += value;\n\n    console.log(`Set relationship of ${this.id} for ${tribe.id} to ${this._relations[tribe.id]}.`);\n  }\n\n  attack() : number {\n    let attack : number = 0;\n\n    if (this.attitudes.others == Attitudes.Others.Aggressive) attack += 1;\n    if (this.hasTechnology(\"tools\")) attack += 1;\n\n    return attack;\n  }\n\n  defense() : number {\n    let defense : number = 0;\n\n    if (this.attitudes.others == Attitudes.Others.Defensive) defense += 1;\n    if (this.hasTechnology(\"construction\")) defense += 1;\n\n    return defense;\n  }\n\n  migrate() : boolean {\n    return Random.chance(this._migrationChance);\n  }\n\n  setMigrationChance(c: number) {\n    this._migrationChance = c;\n  }\n\n  progress(e: TribeEvent) : number {\n    return this._eventProgress[e.id];\n  }\n\n  increaseProgress(e: TribeEvent, progress: number) {\n    // Default to starting from 0 if no progress is stored.\n    let currentProgress : number = 0;\n\n    // Get the progress from the map if it exists.\n    if (this._eventProgress.hasOwnProperty(e.id)) currentProgress = this._eventProgress[e.id];\n\n    // Set the new progress.\n    this._eventProgress[e.id] = currentProgress+progress;\n  }\n\n  resetProgress(e: TribeEvent) {\n    this._eventProgress[e.id] = 0;\n  }\n\n  addTechnology(technology: string) {\n    if (this._technology.indexOf(technology) > -1) return;\n    this._technology.push(technology);\n  }\n\n  removeTechnology(technology: string) {\n    // Return silently if tribe doesn't have technology.\n    const i = this._technology.indexOf(technology);\n    if (i == -1) return;\n\n    this._technology.splice(i, 1);\n  }\n\n  hasTechnology(technology: string) : boolean {\n    if (this._technology.indexOf(technology) > -1) return true;\n    else return false;\n  }\n\n  addCulture(culture: string) {\n    if (this._culture.indexOf(culture) > -1) return;\n    this._culture.push(culture);\n  }\n\n  removeCulture(culture: string) {\n    // Return silently if tribe doesn't have culture.\n    const i = this._culture.indexOf(culture);\n    if (i == -1) return;\n\n    this._culture.splice(i, 1);\n  }\n\n  hasCulture(culture: string) : boolean {\n    if (this._culture.indexOf(culture) > -1) return true;\n    else return false;\n  }\n\n  title() : string {\n    if (this._name.length == 0) return \"a tribe\";\n    else return \"the \" + Language.toTitle(this._language.translate(this._name));\n  }\n\n  titleCapitalized() : string {\n    if (this._name.length == 0) return \"A tribe\";\n    else return \"The \" + Language.toTitle(this._language.translate(this._name));\n  }\n\n  setName(name: Noun[]) {\n    this._name = name;\n  }\n\n  name() : Noun[] {\n    return this._name;\n  }\n\n  language() : Language {\n    return this._language;\n  }\n\n  private growthRate() : number {\n    let g : number = 0.0001;\n\n    if (this.hasTechnology(\"fire\")) g = 4 * g;\n\n    if (this.hasTechnology(\"agriculture\")) g = 4 * g;\n\n    return g;\n  }\n\n  private deathRate() : number {\n    let d : number = 0.0001;\n\n    return d;\n  }\n}\n\nexport class Attitudes {\n  public monolith: Attitudes.Monolith;\n  public others: Attitudes.Others;\n  public world: Attitudes.World;\n  public self: Attitudes.Self;\n\n  static MonolithString(monolith: Attitudes.Monolith) : string {\n    switch(monolith) {\n      case Attitudes.Monolith.Unencountered: return \"unencountered\";\n      case Attitudes.Monolith.Curious: return \"curious\";\n      case Attitudes.Monolith.Superstitious: return \"superstitious\";\n      case Attitudes.Monolith.Fearful: return \"fearful\";\n    }\n  }\n\n  static OthersString(others: Attitudes.Others) : string {\n    switch(others) {\n      case Attitudes.Others.Aggressive: return \"aggressive\";\n      case Attitudes.Others.Defensive: return \"defensive\";\n      case Attitudes.Others.Diplomatic: return \"diplomatic\";\n      case Attitudes.Others.Insular: return \"insular\";\n    }\n  }\n\n  static WorldString(world: Attitudes.World) : string {\n    switch(world) {\n      case Attitudes.World.Exploit: return \"exploitative\";\n      case Attitudes.World.Explore: return \"explorative\";\n      case Attitudes.World.Harmony: return \"harmonious\";\n      case Attitudes.World.Survival: return \"survivalists\";\n    }\n  }\n\n  static SelfString(self: Attitudes.Self) : string {\n    switch(self) {\n      case Attitudes.Self.Hierarchical: return \"hierarchical\";\n      case Attitudes.Self.Egalitarian: return \"egalitarian\";\n    }\n  }\n\n  constructor() {\n\n  }\n\n  monolithString() : string {\n    return Attitudes.MonolithString(this.monolith);\n  }\n\n  othersString() : string {\n    return Attitudes.OthersString(this.others);\n  }\n\n  worldString() : string {\n    return Attitudes.WorldString(this.world);\n  }\n\n  selfString() : string {\n    return Attitudes.SelfString(this.self);\n  }\n}\n\nexport namespace Attitudes {\n  export enum Monolith {\n    Unencountered = \"unencountered\",\n    Curious = \"curious\",\n    Superstitious = \"superstitious\",\n    Fearful = \"fearful\",\n  }\n\n  export enum Others {\n    Aggressive = \"aggressive\",\n    Defensive = \"defensive\",\n    Diplomatic = \"diplomatic\",\n    Insular = \"insular\",\n  }\n\n  export enum World {\n    Exploit = \"exploit\",\n    Explore = \"explore\",\n    Harmony = \"harmony\",\n    Survival = \"survival\",\n  }\n\n  export enum Self {\n    Hierarchical = \"hierarchical\",\n    Egalitarian = \"egalitarian\",\n  }\n}","import { Random } from \"./random\";\nimport { Tribe, Attitudes } from \"./tribe\";\nimport { Region } from \"./region\";\n\nexport class FireSpreadsEvent {\n  public static id : string = \"FireSpreadsEvent\";\n\n  static triggers(tribe: Tribe, region: Region, progress: number) {\n    if (!(tribe.hasTechnology(\"fire\") && tribe.hasTechnology(\"construction\"))) return false\n\n    if (tribe.hasCulture(\"cautious\")) return Random.chance(0.000001);\n    else return Random.chance(0.00003);\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    return 0;\n  }\n\n  static isChoice() : boolean {\n    return true;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    return [\n      \"They are being punished.\",\n      \"This is a learning experience.\"\n    ];\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    return `One day, while a member of ${tribe.title()} is cooking with fire, the roof of their home\n    catches alight. Before long, multiple buildings are in flames. The tribespeople desperately try\n    to put out the fire, and succeed, but not before it has caused significant damage.`;\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    return [\n      `The tribe sees this as a punishment, but for what, they are not sure.`,\n      `The tribe has suffered heavy losses, but finds the strength to continue, and learn how to control the fire better.`\n    ];\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n    return [\n      function () {\n        // 20% chance for tribe to become superstitious,\n        // 80% chance for tribe to become fearful.\n        // Tribe gains the 'disasters are punishment' culture.\n        if (Random.chance(0.2)) {\n          tribe.attitudes.monolith = Attitudes.Monolith.Superstitious;\n        }\n        else {\n          tribe.attitudes.monolith = Attitudes.Monolith.Fearful;\n        }\n\n        tribe.addCulture(\"disastersArePunishment\");\n\n        // Tribe population reduced by 30-70%.\n        const currentPopulation : number = tribe.population();\n        const lowerLimit = Math.floor(currentPopulation*0.3);\n        const upperLimit = Math.floor(currentPopulation*0.7);\n\n        tribe.decreasePopulation(Random.interval(lowerLimit, upperLimit));\n\n        console.log(`New population: ${tribe.population()}`);\n      },\n      function () {\n        // 50% chance for tribe to become curious,\n        // 50% chance for tribe to become fearful.\n        if (Random.chance(0.5)) {\n          tribe.attitudes.monolith = Attitudes.Monolith.Curious;\n        }\n        else {\n          tribe.attitudes.monolith = Attitudes.Monolith.Fearful;\n        }\n\n        // Tribe population reduced by 30-70%.\n        const currentPopulation : number = tribe.population();\n        const lowerLimit = Math.floor(currentPopulation*0.3);\n        const upperLimit = Math.floor(currentPopulation*0.7);\n\n        tribe.decreasePopulation(Random.interval(lowerLimit, upperLimit));\n\n        tribe.addCulture(\"cautious\");\n\n        console.log(`New population: ${tribe.population()}`);\n      }\n    ];\n  }\n}\n\nexport class DroughtEvent {\n  public static id : string = \"DroughtEvent\";\n\n  static triggers(tribe: Tribe, region: Region, progress: number) {\n    if (!tribe.hasTechnology(\"agriculture\")) return false;\n    \n    // Chance dependent on water in region.\n    // 0 chance if water > 2.\n    switch (region.water()) {\n      case 0: return Random.chance(0.0005);\n      case 1: return Random.chance(0.0001);\n      case 2: return Random.chance(0.00005);\n      default: return false;\n    }\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    return 0;\n  }\n\n  static isChoice() : boolean {\n    return true;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    return [\n      \"They are being punished.\",\n      \"They must leave this barren place.\",\n      \"They must abandon their farms and hunt for food instead.\"\n    ];\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    return `There have not been any rains in the region for some time, and the crops\n    of ${tribe.title()} are suffering for it. It looks as though there will not be a harvest this year.`;\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    let outcomeMessages : string[] = []\n\n    if (tribe.hasCulture(\"disastersArePunishment\")) {\n      outcomeMessages.push(\n        `The tribe sees this as a sign of your displeasure.\n        They begin praying in the hope that it will alleviate the drought,\n        but it does not.`);\n    }\n    else {\n      outcomeMessages.push(\n        `The tribe sees this as some kind of punishment, but for what, they are not sure.`);\n    }\n\n    outcomeMessages.push(`The tribe moves on from the region, leaving their farms behind.`);\n    outcomeMessages.push(`The tribe abandons agriculture, and transitions back to a hunter-gatherer society.`);\n\n    return outcomeMessages;\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n    return [\n      function () {\n        // 20% chance for tribe to become superstitious,\n        // 80% chance for tribe to become fearful.\n        // Tribe gains the 'disasters are punishment' culture.\n        if (Random.chance(0.2)) {\n          tribe.attitudes.monolith = Attitudes.Monolith.Superstitious;\n        }\n        else {\n          tribe.attitudes.monolith = Attitudes.Monolith.Fearful;\n        }\n\n        tribe.addCulture(\"disastersArePunishment\");\n\n        // Tribe population reduced by 60-90%.\n        const currentPopulation : number = tribe.population();\n        const lowerLimit = Math.floor(currentPopulation*0.6);\n        const upperLimit = Math.floor(currentPopulation*0.9);\n\n        tribe.decreasePopulation(Random.interval(lowerLimit, upperLimit));\n\n        console.log(`New population: ${tribe.population()}`);\n      },\n      function () {\n        // Tribe migrates to another region.\n        let otherRegions = region.nearby();\n\n        let migrateRegion : Region = Random.choice(otherRegions);\n\n        region.removeTribe(tribe);\n        migrateRegion.addTribe(tribe);\n\n        // Tribe population reduced by 60-90%.\n        const currentPopulation : number = tribe.population();\n        const lowerLimit = Math.floor(currentPopulation*0.6);\n        const upperLimit = Math.floor(currentPopulation*0.9);\n\n        tribe.decreasePopulation(Random.interval(lowerLimit, upperLimit));\n\n        console.log(`New population: ${tribe.population()}`);\n      },\n      function () {\n        // Tribe abandons agriculture.\n        tribe.addCulture(\"abandonedAgriculture\");\n        tribe.removeTechnology(\"agriculture\");\n\n        // Tribe population reduced by 60-90%.\n        const currentPopulation : number = tribe.population();\n        const lowerLimit = Math.floor(currentPopulation*0.6);\n        const upperLimit = Math.floor(currentPopulation*0.9);\n\n        tribe.decreasePopulation(Random.interval(lowerLimit, upperLimit));\n\n        console.log(`New population: ${tribe.population()}`);\n      }\n    ];\n  }\n}\n\nexport class PlagueEvent {\n    public static id : string = \"PlagueEvent\";\n  \n    static triggers(tribe: Tribe, region: Region, progress: number) {\n      if (tribe.hasTechnology(\"vaccines\")) return false;\n\n      if (tribe.population() < 1000) return false;\n\n      if (tribe.hasTechnology(\"medicine\")) return Random.chance(0.001);\n      else return Random.chance(0.005);\n    }\n  \n    static progress(tribe: Tribe, region: Region) : number {\n      return 0;\n    }\n  \n    static isChoice() : boolean {\n      return false;\n    }\n  \n    static choices(tribe: Tribe) : string[] {\n      return [];\n    }\n  \n    static choicePrompt(tribe: Tribe) : string {\n      return \"\";\n    }\n  \n    static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n      let message : string = `With the population of ${tribe.title()} growing rapidly, disease is commonplace in their settlement.\n        Before long, a plague spreads among the tribespeople, killing a significant number of them.`;\n\n      if (tribe.hasCulture(\"disastersArePunishment\")) {\n        message += ` Many in the tribe see this as a punishment for their sins, and pray to you for forgiveness.`;\n      }\n      else if (tribe.attitudes.monolith == Attitudes.Monolith.Curious) {\n        message += ` Some of the tribespeople are committed to finding a way to avoid plagues like this in the future.`;\n      }\n\n      return [message];\n    }\n  \n    static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n      return [\n        function () {\n          // Tribe population reduced by 70-95%.\n          const currentPopulation : number = tribe.population();\n          const lowerLimit = Math.floor(currentPopulation*0.7);\n          const upperLimit = Math.floor(currentPopulation*0.95);\n  \n          tribe.decreasePopulation(Random.interval(lowerLimit, upperLimit));\n  \n          console.log(`New population: ${tribe.population()}`);\n\n          if (tribe.attitudes.monolith == Attitudes.Monolith.Curious) {\n            tribe.addCulture(\"earlyScientists\");\n          }\n        }\n      ];\n    }\n  }","import { Random } from \"./random\";\nimport { Tribe } from \"./tribe\";\n\n// A region is a part of the world that can be inhabited by tribes.\n//\n// Regions have three statistics:\n// food: level of food available in the region.\n// water: level of water available in the region.\n// resources: level of resources available in the region.\nexport class Region {\n  private _food: number;\n  private _water: number;\n  private _resources: number;\n\n  private _type: Region.Type;\n\n  private _tribes: Tribe[];\n\n  private _nearbyRegions: Region[];\n\n  private _structures: string[];\n\n  public hasMonolith: boolean;\n\n  // Given a level number, returns a string description.\n  private levelString(level : number) : string {\n    switch(level)\n    {\n      case 0: return \"no\";\n      case 1: return \"scarce\";\n      case 2: return \"barely adequate\";\n      case 3: return \"adequate\";\n      case 4: return \"sufficient\";\n      case 5: return \"plentiful\";\n      case 6: return \"abundant\";\n    }\n\n    return \"INVALID\";\n  }\n\n  constructor() {\n    this.hasMonolith = false;\n    this._tribes = [];\n    this._nearbyRegions = [];\n    this._structures = [];\n\n    // Choose a random type for the region.\n    let t = Random.interval(0, 6);\n    this._type = Region.Type.Undefined;\n\n    switch(t) {\n      case 0: this._type = Region.Type.Desert; break;\n      case 1: this._type = Region.Type.Grassland; break;\n      case 2: this._type = Region.Type.Hills; break;\n      case 3: this._type = Region.Type.Mountains; break;\n      case 4: this._type = Region.Type.Tundra; break;\n      case 5: this._type = Region.Type.Valley; break;\n      case 6: this._type = Region.Type.Rainforest; break;\n    }\n\n    // Determine food, water, resource levels.\n    // We generate a number between 2 and 4, which is then augmented by the type.\n    this._food = Random.interval(2, 4);\n    this._water = Random.interval(2, 4);\n    this._resources = Random.interval(2, 4);\n  }\n\n  // Returns the type of the region.\n  type() : Region.Type {\n    return this._type;\n  }\n\n  typeString() : string {\n    return Region.Type[this._type];\n  }\n\n  typeStringLowercase() : string {\n    switch(this._type) {\n      case Region.Type.Desert: return \"desert\";\n      case Region.Type.Grassland: return \"grassland\";\n      case Region.Type.Hills: return \"hills\";\n      case Region.Type.Mountains: return \"mountains\";\n      case Region.Type.Tundra: return \"tundra\";\n      case Region.Type.Valley: return \"valley\";\n      case Region.Type.Rainforest: return \"rainforest\";\n      case Region.Type.Undefined: return \"UNDEFINED\";\n    }\n  }\n\n  // Returns the string description of the region's type.\n  typeDescription() : string {\n    switch(this._type) {\n      case Region.Type.Desert: return \"desert\";\n      case Region.Type.Grassland: return \"grassland\";\n      case Region.Type.Hills: return \"hilly\";\n      case Region.Type.Mountains: return \"mountainous\";\n      case Region.Type.Tundra: return \"tundra\";\n      case Region.Type.Valley: return \"valley\";\n      case Region.Type.Rainforest: return \"rainforest\";\n      case Region.Type.Undefined: return \"UNDEFINED\";\n    }\n  }\n\n  // Returns the food level of the region, with the type modifier.\n  food() : number {\n    switch(this._type) {\n      case Region.Type.Desert: return this._food - 1;\n      case Region.Type.Grassland: return this._food + 1;\n      case Region.Type.Hills: return this._food;\n      case Region.Type.Mountains: return this._food - 2;\n      case Region.Type.Tundra: return this._food - 1;\n      case Region.Type.Valley: return this._food + 1;\n      case Region.Type.Rainforest: return this._food + 2;\n      case Region.Type.Undefined: return 0;\n    }\n  }\n\n  // Returns a string representation of the region's food level.\n  foodString() : string {\n    return this.levelString(this.food());\n  }\n\n  // Returns the water level of the region, with the type modifier.\n  water() : number {\n    switch(this._type) {\n      case Region.Type.Desert: return this._water - 2;\n      case Region.Type.Grassland: return this._water;\n      case Region.Type.Hills: return this._water + 1;\n      case Region.Type.Mountains: return this._water - 1;\n      case Region.Type.Tundra: return this._water - 1;\n      case Region.Type.Valley: return this._water + 2;\n      case Region.Type.Rainforest: return this._water;\n      case Region.Type.Undefined: return 0;\n    }\n  }\n\n  // Returns a string representation of the region's water level.\n  waterString() : string {\n    return this.levelString(this.water());\n  }\n\n  // Returns the resource level of the region, with the type modifier.\n  resources() : number {\n    switch(this._type) {\n      case Region.Type.Desert: return this._resources + 1;\n      case Region.Type.Grassland: return this._resources - 2;\n      case Region.Type.Hills: return this._resources + 1;\n      case Region.Type.Mountains: return this._resources + 2;\n      case Region.Type.Tundra: return this._resources;\n      case Region.Type.Valley: return this._resources - 1;\n      case Region.Type.Rainforest: return this._resources;\n      case Region.Type.Undefined: return 0;\n    }\n  }\n\n  // Returns a string representation of the region's resources level.\n  resourcesString() : string {\n    return this.levelString(this.resources());\n  }\n\n  // Returns the number of tribes in this region.\n  tribesCount() : number {\n    return this._tribes.length;\n  }\n\n  // Returns a list of tribes in this region.\n  tribes() : Tribe[] {\n    return this._tribes;\n  }\n\n  // Returns the population of this region.\n  population() : number {\n    let sum : number = 0;\n\n    for (let t of this._tribes) {\n      sum += t.population();\n    }\n\n    return sum;\n  }\n\n  // Adds a tribe to this region.\n  addTribe(tribe: Tribe) {\n    this._tribes.push(tribe);\n  }\n\n  // Removes a tribe from this region.\n  // Exits silently if the tribe isn't in the region.\n  removeTribe(tribe: Tribe) {\n    const index = this._tribes.indexOf(tribe);\n\n    if (index >= 0) {\n      this._tribes.splice(index, 1);\n    }\n  }\n\n  addNearbyRegion(region: Region) {\n    // Do nothing if we've already added this region.\n    if (this._nearbyRegions.indexOf(region) > -1) return;\n\n    // Add the other region.\n    this._nearbyRegions.push(region);\n\n    // Call addNearbyRegion for the other region, passing this.\n    region.addNearbyRegion(this);\n  }\n\n  nearby() : Region[] {\n    return this._nearbyRegions;\n  }\n\n  addStructure(structure: string) {\n    if (this._structures.indexOf(structure) > -1) return;\n    else this._structures.push(structure);\n  }\n\n  hasStructure(structure: string) : boolean {\n    if (this._structures.indexOf(structure) > -1) return true;\n    else return false;\n  }\n}\n\nexport namespace Region {\n  export enum Type {\n    Desert = \"Desert\",\n    Grassland = \"Grassland\",\n    Hills = \"Hills\",\n    Mountains = \"Mountains\",\n    Tundra = \"Tundra\",\n    Valley = \"Valley\",\n    Rainforest = \"Rainforest\",\n    Undefined = \"Undefined\"\n  }\n}\n","import { Random } from \"./random\";\nimport { Tribe, Attitudes } from \"./tribe\";\nimport { Region } from \"./region\";\nimport { Language, Noun } from \"./language\";\n\nexport class DiscoverFireEvent {\n    public static readonly id : string = \"DiscoverFireEvent\";\n  \n    static triggers(tribe: Tribe, region: Region, progress: number) : boolean {\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return false;\n        if (tribe.hasTechnology(\"fire\")) return false;\n        if (tribe.hasCulture(\"afraidOfFire\")) return false;\n    \n        let c : number = 0.000001;\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Curious) c = 0.000002;\n    \n        return Random.progressiveChance(c, progress, 0.005);\n    }\n  \n    static progress(tribe: Tribe, region: Region) : number {\n        if (tribe.hasTechnology(\"fire\")) return 0;\n        if (tribe.hasCulture(\"afraidOfFire\")) return 0;\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return 0;\n    \n        if (region.type() == Region.Type.Desert) return Random.interval(0, 3);\n        else return Random.interval(-1, 2);\n    }\n  \n    static isChoice() : boolean {\n        return true;\n    }\n  \n    static choices(tribe: Tribe) : string[] {\n        return [\n            \"Fire is useful.\",\n            \"Fire is dangerous.\"\n        ];\n    }\n  \n    static choicePrompt(tribe: Tribe) : string {\n        return `While wandering on a hot, dry day, a member of ${tribe.title()} notices food left in the wake of a wildfire.\n        Noticing that the food seems firmer and smells different, the tribesperson brings it back to show the others.`;\n    }\n  \n    static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n        return [\n            `The tribe is curious about the possible uses of this phenomenon. Some begin using it to cook their food,\n            while others use it to provide light at night.`,\n            `The tribe is afraid of this phenomenon. They avoid it, not understanding the benefits it could bring.`\n        ];\n    }\n  \n    static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n        return [\n            function () {\n            tribe.addTechnology(\"fire\");\n\n            if (Random.chance(0.1)) tribe.attitudes.monolith = Attitudes.Monolith.Curious;\n            \n            console.log(`${tribe.title()} has discovered fire.`);\n            },\n            function () {\n            tribe.addCulture(\"afraidOfFire\");\n            \n            if (Random.chance(0.1)) tribe.attitudes.monolith = Attitudes.Monolith.Fearful;\n            \n            console.log(`${tribe.title()} has shunned fire.`);\n            }\n        ];\n    }\n}\n\nexport class DiscoverToolsEvent {\n    public static readonly id : string = \"DiscoverToolsEvent\";\n  \n    static triggers(tribe: Tribe, region: Region, progress: number) : boolean {\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return false;\n        if (tribe.hasTechnology(\"tools\")) return false;\n    \n        let c : number = 0.000001;\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Curious) c = 0.000002;\n    \n        return Random.progressiveChance(c, progress, 0.005);\n    }\n  \n    static progress(tribe: Tribe, region: Region) : number {\n        if (tribe.hasTechnology(\"tools\")) return 0;\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return 0;\n    \n        if (region.resources() > 2) return Random.interval(0, 3);\n        else return Random.interval(-1, 2);\n    }\n  \n    static isChoice() : boolean {\n        return false;\n    }\n  \n    static choices(tribe: Tribe) : string[] {\n        return [];\n    }\n  \n    static choicePrompt(tribe: Tribe) : string {\n        return \"\";\n    }\n  \n    static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n        return [\n            `A small group from ${tribe.title()} have developed simple stone tools to aid them in their daily lives.\n            They show the rest of their tribe, and the tools quickly catch on, with the tribe using them to enhance\n            their abilities.`\n        ];\n    }\n  \n    static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n        return [\n            function () {\n            tribe.addTechnology(\"tools\");\n            console.log(`${tribe.title()} has discovered tools.`);\n            }\n        ];\n    }\n  }\n  \nexport class DiscoverConstructionEvent {\n    public static readonly id : string = \"DiscoverConstructionEvent\";\n  \n    static triggers(tribe: Tribe, region: Region, progress: number) : boolean {\n        // Can't trigger if:\n        // Tribe is unencountered\n        // Tribe doesn't have tools\n        // Tribe already has construction.\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return false;\n        if (!tribe.hasTechnology(\"tools\")) return false;\n        if (tribe.hasTechnology(\"construction\")) return false;\n    \n        let c : number = 0.000001;\n        if (tribe.attitudes.others == Attitudes.Others.Defensive) c = 0.000002;\n    \n        return Random.progressiveChance(c, progress, 0.005);\n    }\n  \n    static progress(tribe: Tribe, region: Region) : number {\n        // Can't progress if:\n        // Tribe is unencountered\n        // Tribe doesn't have tools\n        // Tribe already has construction.\n        if (!tribe.hasTechnology(\"tools\")) return 0;\n        if (tribe.hasTechnology(\"construction\")) return 0;\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return 0;\n    \n        if (region.resources() > 0) return Random.interval(0, 1);\n        else return 0;\n    }\n  \n    static isChoice() : boolean {\n        return false;\n    }\n  \n    static choices(tribe: Tribe) : string[] {\n        return [];\n    }\n  \n    static choicePrompt(tribe: Tribe) : string {\n        return \"\";\n    }\n  \n    static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n        return [\n            `${tribe.titleCapitalized()} has begun using stone and wood, along with their tools, to construct\n            simple buildings in which to live and store food.`\n        ];\n    }\n  \n    static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n        return [\n            function () {\n                tribe.addTechnology(\"construction\");\n                tribe.setMigrationChance(0);\n                console.log(`${tribe.title()} has discovered construction.`);\n            }\n        ];\n    }\n  }\n  \nexport class DiscoverLanguageEvent {\n    public static readonly id : string = \"DiscoverLanguageEvent\";\n\n    private static tribeName : Noun[];\n  \n    static triggers(tribe: Tribe, region: Region, progress: number) : boolean {\n        // Can't trigger if:\n        // Tribe is unencountered\n        // Tribe population is < 80\n        // Tribe already has language\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return false;\n        if (tribe.hasTechnology(\"language\")) return false;\n        if (tribe.population() < 80) return false;\n    \n        let c : number = 0.000001;\n        if (tribe.attitudes.others == Attitudes.Others.Diplomatic) c = 0.000002;\n    \n        return Random.progressiveChance(c, progress, 0.01);\n    }\n  \n    static progress(tribe: Tribe, region: Region) : number {\n        // Can't progress if:\n        // Tribe is unencountered\n        // Tribe population is < 80\n        if (tribe.hasTechnology(\"language\")) return 0;\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return 0;\n        if (tribe.population() < 80) return 0;\n    \n        return Random.interval(0, 3);\n    }\n  \n    static isChoice() : boolean {\n        return false;\n    }\n  \n    static choices(tribe: Tribe) : string[] {\n        return [];\n    }\n  \n    static choicePrompt(tribe: Tribe) : string {\n        return \"\";\n    }\n  \n    static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n        DiscoverLanguageEvent.tribeName = DiscoverLanguageEvent.generateTribeName(tribe, region);\n\n        return [\n            `You notice that a tribe seems to be using a more advanced form of communication.\n            As your language coprocessor engages, you discover that they now call themselves the\n            ${Language.toTitle(tribe.language().translate(DiscoverLanguageEvent.tribeName))}.`\n        ];\n    }\n  \n    static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n        const tribeName = DiscoverLanguageEvent.tribeName;\n        return [\n            function () {\n            tribe.addTechnology(\"language\");\n            tribe.setName(tribeName);\n            console.log(`A tribe has discovered language.`);\n            }\n        ];\n    }\n  \n    private static generateTribeName(tribe: Tribe, region: Region) : Noun[] {\n        // Determine what to call the tribe.\n        let tribeDescription : Noun[] = [];\n\n        let adjective : string = \"\";\n        \n        if (tribe.attitudes.monolith == Attitudes.Monolith.Superstitious) {\n            adjective = \"devout\";\n        }\n        else if (tribe.attitudes.monolith == Attitudes.Monolith.Curious) {\n            adjective = \"curious\";\n        }\n        else if (tribe.attitudes.monolith == Attitudes.Monolith.Fearful) {\n            adjective = \"fearful\";\n        }\n\n        if (tribe.attitudes.others == Attitudes.Others.Aggressive) {\n            tribeDescription.push(new Noun(\"warrior\", true, false, [adjective]));\n        }\n        else if (tribe.attitudes.world == Attitudes.World.Explore) {\n            tribeDescription.push(new Noun(\"explorer\", true, false, [adjective]));\n        }\n        else if (tribe.attitudes.self == Attitudes.Self.Egalitarian) {\n            tribeDescription.push(new Noun(\"community\", false, false, [adjective]));\n        }\n        else {\n            tribeDescription.push(new Noun(\"person\", true, false, [adjective]));\n        }\n\n        return tribeDescription;\n    }\n  }\n\nexport class DiscoverAgricultureEvent {\n    public static readonly id : string = \"DiscoverAgricultureEvent\";\n  \n    static triggers(tribe: Tribe, region: Region, progress: number) : boolean {\n        // Can't trigger if:\n        // Tribe is unencountered\n        // Tribe population is < 200\n        // Tribe doesn't have tools\n        // Tribe already has agriculture\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return false;\n        if (tribe.hasTechnology(\"agriculture\")) return false;\n        if (tribe.population() < 200) return false;\n        if (!tribe.hasTechnology(\"tools\")) return false;\n\n        // If the tribe has already abandoned agriculture in the past, this event cannot trigger.\n        if (tribe.hasCulture(\"abandonedAgriculture\")) return false;\n    \n        let c : number = 0.000001;\n\n        // Increase chance in regions with high food.\n        if (region.food() > 4) c = 0.000005;\n        else if (region.food() > 2) c = 0.000002;\n        \n        return Random.progressiveChance(c, progress, 0.01);\n    }\n  \n    static progress(tribe: Tribe, region: Region) : number {\n        // Can't progress if:\n        // Tribe is unencountered\n        // Tribe population is < 200\n        // Tribe doesn't have tools.\n        if (tribe.hasTechnology(\"agriculture\")) return 0;\n\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return 0;\n        if (tribe.population() < 200) return 0;\n        if (!tribe.hasTechnology(\"tools\")) return 0;\n\n        if (tribe.hasCulture(\"abandonedAgriculture\")) return 0;\n    \n        if (region.food() > 4) return Random.interval(1, 5);\n        else if (region.food() > 2) return Random.interval(-1, 4);\n        else return Random.interval(-2, 3);\n    }\n  \n    static isChoice() : boolean {\n        return false;\n    }\n  \n    static choices(tribe: Tribe) : string[] {\n        return [];\n    }\n  \n    static choicePrompt(tribe: Tribe) : string {\n        return \"\";\n    }\n  \n    static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n      return [\n            `A handful of members of ${tribe.title()} seem to have stopped hunting or gathering,\n            and instead have begun collecting wild seeds and planting them. After the first harvest,\n            this new method of producing food is adopted by the whole tribe.`\n      ];\n    }\n  \n    static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n        return [\n            function () {\n                tribe.addTechnology(\"agriculture\");\n                console.log(`A tribe has discovered agriculture.`);\n            }\n        ];\n    }\n  }","import {Region } from \"./region\";\nimport { Tribe, Attitudes } from \"./tribe\";\nimport { Random } from \"./random\";\nimport { Language, Noun } from \"./language\";\n\nimport * as disasters from \"./tribe_events_disasters\";\nimport * as discovery from \"./tribe_events_discovery\";\n\ninterface TribeEvent {\n  readonly id : string;\n\n  triggers(tribe: Tribe, region: Region, progress: number) : boolean;\n  progress(tribe: Tribe, region: Region) : number;\n\n  isChoice() : boolean;\n  choicePrompt(tribe: Tribe) : string;\n  choices(tribe: Tribe) : string[];\n\n  outcomeMessages(tribe: Tribe, region: Region) : string[];\n  outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[];\n}\n\nclass EncounterEvent {\n  public static readonly id : string = \"EncounterEvent\";\n\n  private static newAttitude : Attitudes.Monolith;\n\n  static triggers(tribe: Tribe, region: Region, progress: number) : boolean {\n    if (tribe.attitudes.monolith != Attitudes.Monolith.Unencountered) return false;\n\n    else if (region.hasMonolith) return true;\n    return false;\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    return 0;\n  }\n\n  static isChoice() : boolean {\n    return false;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    return [];\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    return \"\";\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    const roll = Random.interval(0, 2);\n    switch (roll) {\n      case 0: EncounterEvent.newAttitude = Attitudes.Monolith.Curious; break;\n      case 1: EncounterEvent.newAttitude = Attitudes.Monolith.Superstitious; break;\n      case 2: EncounterEvent.newAttitude = Attitudes.Monolith.Fearful; break;\n    }\n\n    return [`You encounter a tribe of ${tribe.population()} people.\n    They are ${tribe.attitudes.othersString()}, ${tribe.attitudes.worldString()},\n    and ${tribe.attitudes.selfString()}.\n    They seem ${Attitudes.MonolithString(EncounterEvent.newAttitude)} towards you.`];\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n    const attitude : Attitudes.Monolith = EncounterEvent.newAttitude;\n\n    return [function () {\n      tribe.attitudes.monolith = attitude;\n      console.log(`Direct encounter: set tribe attitude to ${Attitudes.MonolithString(attitude)}`);\n    }];\n  }\n}\n\nclass IndirectEncounterEvent {\n  public static readonly id : string = \"IndirectEncounterEvent\";\n\n  private static otherTribe : Tribe;\n\n  static triggers(tribe: Tribe, region: Region, progress: number) : boolean {\n    if (tribe.attitudes.monolith != Attitudes.Monolith.Unencountered) return false;\n\n    // Get any other encountered tribes in the region.\n    let otherTribes : Tribe[] = region.tribes().filter(\n      function (value, index, array) {\n        return (value != tribe) && (value.attitudes.monolith != Attitudes.Monolith.Unencountered);\n      });\n\n    if (otherTribes.length > 0) return true;\n    else return false;\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    return 0;\n  }\n\n  static isChoice() : boolean {\n    return false;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    return [];\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    return \"\";\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    // Get any tribes in the region that have been encountered.\n    let otherTribes : Tribe[] = region.tribes().filter(\n      function (value, index, array) {\n        return (value != tribe) && (value.attitudes.monolith != Attitudes.Monolith.Unencountered);\n      }\n    );\n\n    // Choose one at random.\n    IndirectEncounterEvent.otherTribe = Random.choice(otherTribes);\n\n    let attitude : string = Attitudes.MonolithString(IndirectEncounterEvent.otherTribe.attitudes.monolith);\n\n    return [`${tribe.titleCapitalized()} has encountered a new tribe of ${tribe.population()} people.\n    After hearing of you, they seem ${attitude}.`];\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n    const attitude : Attitudes.Monolith = IndirectEncounterEvent.otherTribe.attitudes.monolith;\n\n    return [function () {\n      tribe.attitudes.monolith = attitude;\n      console.log(`Indirect encounter: set ${tribe.title()} attitude to ${Attitudes.MonolithString(attitude)}`);\n    }];\n  }\n}\n\nclass TribeDestroyedEvent {\n  public static readonly id : string = \"TribeDestroyedEvent\";\n\n  static triggers(tribe: Tribe, region: Region, progress: number) : boolean {\n    if (tribe.population() <= 0) return true;\n    else return false;\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    return 0;\n  }\n\n  static isChoice() : boolean {\n    return false;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    return [];\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    return \"\";\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) {\n      return [\"\"];\n    }\n    else {\n      return [`You sense a great loss. ${tribe.titleCapitalized()} is no more.`];\n    }\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) {\n    return [function () {tribe.dead = true; console.log(`${tribe.title()} has died.`);}];\n  }\n}\n\nclass AttackEvent {\n  public static readonly id : string = \"AttackEvent\";\n\n  private static outcome : number;\n  private static defender : Tribe;\n\n  static triggers(tribe: Tribe, region: Region, progress: number) : boolean {\n    let c : number = 0.0001;\n    if (tribe.attitudes.others == Attitudes.Others.Aggressive) c = 0.0002;\n\n    // Are there any other tribes in this region?\n    let otherTribes : Tribe[] = region.tribes().filter(function (value, index, array) {return value != tribe});\n\n    // Defensive tribes will attack if relationship is -1 or lower.\n    // Any other non-aggressive tribe will attack if -2 or lower.\n    if (tribe.attitudes.others == Attitudes.Others.Defensive) {\n      otherTribes = otherTribes.filter(function (v, i, a) {return tribe.relationship(v) <= -1;});\n    }\n    else if (tribe.attitudes.others != Attitudes.Others.Aggressive) {\n      otherTribes = otherTribes.filter(function (v, i, a) {return tribe.relationship(v) <= -2;});\n    }\n\n    if (otherTribes.length == 0) return false;\n\n    // Triggers with chance 0.0001.\n    if (Random.chance(c)) {\n      AttackEvent.defender = Random.choice(otherTribes);\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    return 0;\n  }\n\n  static isChoice() : boolean {\n    return false;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    return [];\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    return \"\";\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    let attacker : Tribe = tribe;\n\n    const attackerRoll : number = (Random.interval(1, 10) + attacker.attack()) * Math.floor(attacker.population()*0.1);\n    const defenderRoll : number = (Random.interval(1, 10) + AttackEvent.defender.defense()) * Math.floor(AttackEvent.defender.population()*0.1);\n\n    AttackEvent.outcome = (attackerRoll - defenderRoll);\n  \n    // Silent message if none of the tribes involved have been encountered.\n    if ((attacker.attitudes.monolith == Attitudes.Monolith.Unencountered)\n        && (AttackEvent.defender.attitudes.monolith == Attitudes.Monolith.Unencountered)) {\n      return [\"\"];\n    }\n\n    let outcomeMessage : string;\n    let lossesMessage: string = \"\";\n\n    if (AttackEvent.outcome > 0) {\n      let defenderLosses = Math.min(AttackEvent.defender.population(), AttackEvent.outcome);\n\n      outcomeMessage = `The attack was successful.`;\n\n      if (defenderLosses == AttackEvent.defender.population()) {\n        lossesMessage = `The defenders have been wiped out.`;\n      }\n      else {\n        lossesMessage = `The defenders have lost ${defenderLosses} people in the attack.`;\n      }\n    }\n    else if (AttackEvent.outcome < 0) {\n      let attackerLosses = Math.min(attacker.population(), -AttackEvent.outcome);\n\n      outcomeMessage = `The attack was repulsed.`;\n\n      if (attackerLosses == attacker.population()) {\n        lossesMessage = `The attackers have been wiped out.`;\n      }\n      else {\n        lossesMessage = `The attackers have lost ${attackerLosses} people in the attack.`;\n      }\n    }\n    else {\n      outcomeMessage = `The attack ended in a stalemate.`\n    }\n\n    return [`${attacker.titleCapitalized()} has attacked ${AttackEvent.defender.title()}.\n    ${outcomeMessage}\n    ${lossesMessage}`];\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) {\n    const defender : Tribe = AttackEvent.defender;\n    const outcome : number = AttackEvent.outcome;\n\n    if (outcome > 0) {\n      return [function () {\n        console.log(`attack: success (${outcome})`);\n        defender.decreasePopulation(outcome)\n        tribe.increasePopulation(Math.floor(outcome/2));\n      }];\n    }\n    else if (outcome < 0) {\n      return [function () {\n        console.log(`attack: failure (${outcome})`);\n        tribe.decreasePopulation(-outcome)\n      }];\n    }\n    else {\n      return [function () {\n        console.log(\"attack: stalemate\");\n      }];\n    }\n  }\n}\n\nclass MigrationEvent {\n  public static readonly id : string = \"MigrationEvent\";\n\n  private static migrateRegion : Region;\n\n  static triggers(tribe: Tribe, region: Region, progress: number) {\n    return tribe.migrate();\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    return 0;\n  }\n\n  static isChoice() : boolean {\n    return false;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    return [];\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    return \"\";\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    let otherRegions = region.nearby();\n    MigrationEvent.migrateRegion = Random.choice(otherRegions);\n\n    if (tribe.attitudes.monolith != Attitudes.Monolith.Unencountered) {\n      return [\n        `${tribe.titleCapitalized()} has migrated from a ${region.typeDescription()} region to\n        a ${MigrationEvent.migrateRegion.typeDescription()} region.`\n      ];\n    }\n    else return [\"\"];\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) {\n    const migrateRegion = MigrationEvent.migrateRegion;\n\n    return [function () {\n      region.removeTribe(tribe);\n      migrateRegion.addTribe(tribe);\n\n      console.log(`${tribe.title()} has migrated from ${region.typeString()} to ${migrateRegion.typeString()}.`)\n    }];\n  }\n}\n\nclass TribeWorshipsMonolithEvent {\n  public static id : string = \"TribeWorshipsMonolithEvent\";\n\n  static triggers(tribe: Tribe, region: Region, progress: number) {\n    if (tribe.attitudes.monolith != Attitudes.Monolith.Superstitious) return false;\n    if (!region.hasMonolith) return false;\n\n    // This event does not trigger if the tribe already worships the monolith.\n    if (tribe.hasCulture(\"worshipsMonolith\")) {\n      return false;\n    }\n\n    return Random.progressiveChance(0.0001, progress, 0.1);\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    return Random.interval(0, 2);\n  }\n\n  static isChoice() : boolean {\n    return true;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    return [\n      \"I am not their god.\",\n      \"I am their god, and I am good.\",\n      \"I am their god, and they should fear me.\"\n    ];\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    return `${tribe.titleCapitalized()} has taken a great interest in you. Tribe members regularly visit you, bringing\n    small offerings and prostrating themselves at your base. It becomes obvious that this is a form of primitive worship.`;\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    return [\n      `The tribe is confused, but seems to accept the fact that you are not a supernatural being.`,\n      `The tribe rejoices, pleased to have your approval. The visits become more frequent.`,\n      `The tribe is terrified of you, and while they begin bringing larger offerings, it is clear that the reasons\n      for their reverance have changed.`\n    ];\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n    return [\n      function () {\n        // 50% chance for tribe to become curious.\n        // 50% chance for tribe to migrate.\n        if (Random.chance(0.5)) {\n          tribe.attitudes.monolith = Attitudes.Monolith.Curious;\n        }\n        else {\n          let otherRegions = region.nearby();\n\n          let migrateRegion : Region = Random.choice(otherRegions);\n\n          region.removeTribe(tribe);\n          migrateRegion.addTribe(tribe);\n        }\n      },\n      function () {\n        // Tribe stays superstitious and migration chance reduces to 0.\n        tribe.attitudes.monolith = Attitudes.Monolith.Superstitious;\n        tribe.addCulture(\"worshipsMonolith\");\n        tribe.setMigrationChance(0);\n      },\n      function () {\n        // Tribe becomes fearful.\n        tribe.attitudes.monolith = Attitudes.Monolith.Fearful;\n        tribe.addCulture(\"worshipsMonolith\");\n        tribe.addCulture(\"fearsMonolith\");\n      }\n    ];\n  }\n}\n\nclass TribeCuriousOfMonolithEvent {\n  public static id : string = \"TribeCuriousOfMonolithEvent\";\n\n  static triggers(tribe: Tribe, region: Region, progress: number) {\n    if (tribe.attitudes.monolith != Attitudes.Monolith.Curious) return false;\n    if (!region.hasMonolith) return false;\n\n    // This event does not trigger if the tribe already worships the monolith.\n    if (tribe.hasCulture(\"curiousOfMonolith\")) {\n      return false;\n    }\n\n    return Random.progressiveChance(0.0001, progress, 0.1);\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    return Random.interval(0, 2);\n  }\n\n  static isChoice() : boolean {\n    return true;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    return [\n      \"I am merely a machine.\",\n      \"They should not be so curious.\"\n    ];\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    return `You notice that members of ${tribe.title()} have been observing you cautiously since your landing.\n    Every now and then some of them visit you, studying your metal exterior. They are obviously wondering what\n    exactly you are.`;\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    return [\n      `The tribe doesn't understand, but seems even more curious about you now.`,\n      `The tribe is afraid, and stops visiting you.`\n    ];\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n    return [\n      function () {\n        tribe.addCulture(\"curiousOfMonolith\");\n      },\n      function () {\n        tribe.attitudes.monolith = Attitudes.Monolith.Fearful;\n      }\n    ];\n  }\n}\n\nclass TribeFearsMonolithEvent {\n  public static id : string = \"TribeFearsMonolithEvent\";\n\n  static triggers(tribe: Tribe, region: Region, progress: number) {\n    if (tribe.attitudes.monolith != Attitudes.Monolith.Fearful) return false;\n    if (!region.hasMonolith) return false;\n\n    // This event does not trigger if the tribe already worships the monolith.\n    if (tribe.hasCulture(\"fearsMonolith\")) {\n      return false;\n    }\n\n    return Random.progressiveChance(0.0001, progress, 0.1);\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    return Random.interval(0, 2);\n  }\n\n  static isChoice() : boolean {\n    return false;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    return [];\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    return \"\";\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    return [\n      `Members of ${tribe.title()} are taking turns observing you while the rest of the tribe\n      sleeps. They are very clearly afraid of you.`\n    ];\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n    return [\n      function () {\n        tribe.addCulture(\"fearsMonolith\");\n      }\n    ];\n  }\n}\n\nclass TribeAsksMonolithPurposeEvent {\n  public static id : string = \"TribeAsksMonolithPurposeEvent\";\n\n  static triggers(tribe: Tribe, region: Region, progress: number) {\n    if (tribe.attitudes.monolith != Attitudes.Monolith.Curious) return false;\n    if (!region.hasMonolith) return false;\n    if (!tribe.hasCulture(\"curiousOfMonolith\")) return false;\n    if (!tribe.hasTechnology(\"language\")) return false;\n\n    if (tribe.hasCulture(\"touchedByAliens\")) return false;\n    if (tribe.hasCulture(\"acceptsMonolith\")) return false;\n\n    return Random.progressiveChance(0.00001, progress, 0.05);\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    if (tribe.attitudes.monolith != Attitudes.Monolith.Curious) return 0;\n    if (!region.hasMonolith) return 0;\n    if (!tribe.hasCulture(\"curiousOfMonolith\")) return 0;\n    if (!tribe.hasTechnology(\"language\")) return 0;\n\n    if (tribe.hasCulture(\"touchedByAliens\")) return 0;\n    if (tribe.hasCulture(\"acceptsMonolith\")) return 0;\n\n    return 1;\n  }\n\n  static isChoice() : boolean {\n    return true;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    return [\n      \"I came from another world.\",\n      \"I am merely a machine.\",\n      \"I am a part of this world.\"\n    ];\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    return `One day a strange thing happens. A single member of ${tribe.title()} approaches\n    you, and kneels at your base. They place one hand on your metal exterior, and then ask you a question:\n    \"What are you, great stone?\"`;\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    return [\n      `The tribesperson is confused, as they do not know that there are other worlds like this one.\n      However, your interaction seems to plant a seed in their mind, as they consider what you just told them.`,\n      `The tribesperson seems to understand - you are like their tools and buildings, only different.`,\n      `The tribesperson seems to understand - you are a natural formation, like the trees and stones around them.`\n    ];\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n    return [\n      function () {\n        tribe.addCulture(\"touchedByAliens\");\n      },\n      function () {\n        tribe.addCulture(\"acceptsMonolith\");\n      },\n      function () {\n        tribe.addCulture(\"acceptsMonolith\");\n      }\n    ];\n  }\n}\n\nclass TribeBuildsTempleEvent {\n  public static id : string = \"TribeBuildsTempleEvent\";\n\n  private static triggered : boolean = false;\n\n  static triggers(tribe: Tribe, region: Region, progress: number) {\n    // Does not trigger if:\n    // Tribe is not in same region as the monolith\n    // Tribe does not have the 'worships monolith' culture\n    // Tribe does not have construction\n    if (!region.hasMonolith) return false;\n    if (!tribe.hasCulture(\"worshipsMonolith\")) return false;\n    if (!tribe.hasTechnology(\"construction\")) return false;\n\n    // Only triggers once per game.\n    if (TribeBuildsTempleEvent.triggered) return false;\n\n    if (Random.progressiveChance(0.00001, progress, 0.05)) {\n      TribeBuildsTempleEvent.triggered = true;\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    if (!region.hasMonolith) return 0;\n    if (!tribe.hasCulture(\"worshipsMonolith\")) return 0;\n    if (!tribe.hasTechnology(\"construction\")) return 0;\n\n    if (TribeBuildsTempleEvent.triggered) return 0;\n\n    return 1;\n  }\n\n  static isChoice() : boolean {\n    return true;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    return [\n      \"I am not worthy of their worship.\",\n      \"They are right to revere me.\"\n    ];\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    return `You notice that members of ${tribe.title()} have begun bringing construction equipment and materials to you.\n    Before long a handful of standing stones, obviously fashioned in your image, surrounds the rim of the crater where you\n    have landed.`;\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    return [\n      `The tribe is confused, as you had told them you were their god.\n      They are worried that building the temple has disturbed you,\n      and leave your landing site in peace, with the temple only half-finished.`,\n      `The tribe continues constructing the temple, celebrating once it is finished.`\n    ];\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n    return [\n      function () {\n        region.addStructure(\"partialMonolithTemple\");\n        let otherRegions = region.nearby();\n\n        let migrateRegion : Region = Random.choice(otherRegions);\n\n        region.removeTribe(tribe);\n        migrateRegion.addTribe(tribe);\n      },\n      function () {\n        tribe.addCulture(\"celebratesMonolith\");\n        tribe.addCulture(\"templeBuilders\");\n        region.addStructure(\"monolithTemple\");\n      }\n    ];\n  }\n}\n\nclass TribeAttacksMonolithEvent {\n  public static id : string = \"TribeAttacksMonolithEvent\";\n\n  private static triggered : boolean = false;\n\n  static triggers(tribe: Tribe, region: Region, progress: number) {\n    if (tribe.attitudes.monolith != Attitudes.Monolith.Fearful) return false;\n    if (!region.hasMonolith) return false;\n    if (!tribe.hasCulture(\"fearsMonolith\")) return false;\n    if (!tribe.hasTechnology(\"tools\")) return false;\n    \n    // This event does not trigger if the monolith is already damaged.\n    if (region.hasStructure(\"damagedMonolith\")) {\n      return false;\n    }\n\n    // This event only triggers once.\n    if (TribeAttacksMonolithEvent.triggered) return false;\n\n    if (Random.progressiveChance(0.00001, progress, 0.01)) {\n      TribeAttacksMonolithEvent.triggered = true;\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    if (tribe.attitudes.monolith != Attitudes.Monolith.Fearful) return 0;\n    if (!region.hasMonolith) return 0;\n    if (!tribe.hasCulture(\"fearsMonolith\")) return 0;\n    if (!tribe.hasTechnology(\"tools\")) return 0;\n    \n    // This event does not trigger if the monolith is already damaged.\n    if (region.hasStructure(\"damagedMonolith\")) {\n      return 0;\n    }\n\n    // This event only triggers once.\n    if (TribeAttacksMonolithEvent.triggered) return 0;\n\n    return 1;\n  }\n\n  static isChoice() : boolean {\n    return true;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    return [\n      \"They will pay for this.\",\n      \"I am not a threat to them.\"\n    ];\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    return `A large group of people from ${tribe.title()} have gathered around you.\n    Many of them are carrying large stone hammers, or even simply rocks. They begin to attack\n    your metal exterior with them. You are helpless to respond as they make dents in your surface.\n    Once the attack is over, you find that you are thankfully not seriously damaged.`;\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    return [\n      `Other tribes in the area seem angry at them for attacking you.`,\n      `The tribe realises that you are not here to harm them, as otherwise you would have responded to their attack.\n      They still seem afraid, but begin to wonder why you are here.`\n    ];\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n    // Get list of all other non-fearful tribes in the region.\n    const otherTribes : Tribe[] = region.tribes().filter(function (v, i, a) {\n      return (v != tribe) && (v.attitudes.monolith != Attitudes.Monolith.Fearful);\n    });\n\n    return [\n      function () {\n        for (let t of otherTribes) {\n          t.changeRelationship(tribe, -2);\n        }\n\n        region.addStructure(\"damagedMonolith\");\n      },\n      function () {\n        tribe.attitudes.monolith = Attitudes.Monolith.Curious;\n        region.addStructure(\"damagedMonolith\");\n      }\n    ];\n  }\n}\n\nclass TribeRebuildsMonolithEvent {\n  public static id : string = \"TribeRebuildsMonolithEvent\";\n\n  private static triggered : boolean = false;\n\n  static triggers(tribe: Tribe, region: Region, progress: number) {\n    if (tribe.attitudes.monolith != Attitudes.Monolith.Curious) return false;\n    if (!region.hasMonolith) return false;\n    if (!tribe.hasCulture(\"curiousOfMonolith\")) return false;\n    if (!tribe.hasTechnology(\"construction\")) return false;\n    if (!region.hasStructure(\"damagedMonolith\")) return false;\n    \n    // This event does not trigger if the monolith is already damaged.\n    if (region.hasStructure(\"rebuiltMonolith\")) {\n      return false;\n    }\n\n    // This event only triggers once.\n    if (TribeRebuildsMonolithEvent.triggered) return false;\n\n    if (Random.progressiveChance(0.00001, progress, 0.01)) {\n      TribeRebuildsMonolithEvent.triggered = true;\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    if (tribe.attitudes.monolith != Attitudes.Monolith.Curious) return 0;\n    if (!region.hasMonolith) return 0;\n    if (!tribe.hasCulture(\"curiousOfMonolith\")) return 0;\n    if (!tribe.hasTechnology(\"construction\")) return 0;\n    if (!region.hasStructure(\"damagedMonolith\")) return 0;\n    \n    // This event does not trigger if the monolith is already damaged.\n    if (region.hasStructure(\"rebuiltMonolith\")) {\n      return 0;\n    }\n\n    // This event only triggers once.\n    if (TribeRebuildsMonolithEvent.triggered) return 0;\n\n    return 1;\n  }\n\n  static isChoice() : boolean {\n    return false;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    return [];\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    return \"\";\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    return [`${tribe.titleCapitalized()} have begun bringing stone slabs and wooden planks to your\n    landing site. Before long a group of tribespeople are using stone tools to erect a shell\n    around the parts of your surface that were dented in the attack. They seem unhappy to have seen you\n    damaged.`];\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n    return [\n      function () {\n        region.addStructure(\"rebuiltMonolith\");\n      }\n    ];\n  }\n}\n\nclass FirstStoriesEvent {\n  public static id : string = \"FirstStoriesEvent\";\n\n  static triggers(tribe: Tribe, region: Region, progress: number) {\n    // Does not trigger if:\n    // Tribe is unencountered.\n    // Tribe does not have language.\n    // Tribe does not have agriculture.\n    if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return false;\n    if (!tribe.hasTechnology(\"language\")) return false;\n    if (!tribe.hasTechnology(\"agriculture\")) return false;\n\n    if (tribe.hasCulture(\"stories\")) return false;\n\n    return Random.progressiveChance(0.00001, progress, 0.005);\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return 0;\n    if (!tribe.hasTechnology(\"language\")) return 0;\n    if (!tribe.hasTechnology(\"agriculture\")) return 0;\n\n    if (tribe.hasCulture(\"stories\")) return 0;\n\n    return Random.interval(0, 3);\n  }\n\n  static isChoice() : boolean {\n    return false;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    return [];\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    return \"\";\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    let othersTheme : string = \"\";\n    switch (tribe.attitudes.others) {\n      case Attitudes.Others.Aggressive: othersTheme = \"heroes of war\"; break;\n      case Attitudes.Others.Defensive: othersTheme = \"defenders of their people\"; break;\n      case Attitudes.Others.Diplomatic: othersTheme = \"friendship with other tribes\"; break;\n      case Attitudes.Others.Insular: othersTheme = \"fear of other tribes\"; break;\n    }\n\n    let worldTheme : string = \"\";\n    switch (tribe.attitudes.world) {\n      case Attitudes.World.Exploit: worldTheme = \"exploitation of their environment\"; break;\n      case Attitudes.World.Explore: worldTheme = \"exploration of the unknown\"; break;\n      case Attitudes.World.Harmony: worldTheme = \"living in harmony with nature\"; break;\n      case Attitudes.World.Survival: worldTheme = \"surviving in their dangerous environment\"; break;\n    }\n\n    let selfTheme : string = \"\";\n    switch (tribe.attitudes.self) {\n      case Attitudes.Self.Hierarchical: selfTheme = \"their rightful rulers\"; break;\n      case Attitudes.Self.Egalitarian: selfTheme = \"their egalitarian society\"; break;\n    }\n\n    // We don't have to handle the unencountered attitude as we guard against that when\n    // deciding if the event triggers.\n    let monolithTheme : string = \"\";\n    switch (tribe.attitudes.monolith) {\n      case Attitudes.Monolith.Curious: monolithTheme = \"their curiosity about the Great Stone\"; break;\n      case Attitudes.Monolith.Superstitious: monolithTheme = \"their reverance of the Great Stone\"; break;\n      case Attitudes.Monolith.Fearful: monolithTheme = \"their fear of the Great Stone\"; break;\n    }\n\n    return [\n      `${tribe.titleCapitalized()} has begun telling stories in the evenings once all their\n      work for the day is done. The major themes of their stories are ${othersTheme}, ${worldTheme},\n      ${selfTheme}, and ${monolithTheme}.`\n    ];\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n    return [\n      function () {\n        tribe.addCulture(\"stories\");\n        console.log(`${tribe.title()} has begun writing stories.`);\n      }\n    ];\n  }\n}\n\nclass OralHistoryEvent {\n  public static id : string = \"OralHistoryEvent\";\n\n  static triggers(tribe: Tribe, region: Region, progress: number) {\n    // Does not trigger if:\n    // Tribe is unencountered.\n    // Tribe does not have stories.\n    // Tribe does not have > 400 population.\n    if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return false;\n    if (!tribe.hasCulture(\"stories\")) return false;\n    if (tribe.population() < 400) return false;\n\n    if (tribe.hasCulture(\"oralHistory\")) return false;\n    if (tribe.hasCulture(\"noHistory\")) return false;\n\n    return Random.progressiveChance(0.00001, progress, 0.005);\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return 0;\n    if (!tribe.hasCulture(\"stories\")) return 0;\n    if (tribe.population() < 400) return 0;\n\n    if (tribe.hasCulture(\"oralHistory\")) return 0;\n    if (tribe.hasCulture(\"noHistory\")) return 0;\n\n    return Random.interval(0, 3);\n  }\n\n  static isChoice() : boolean {\n    return true;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    return [\n      \"The past is not important.\",\n      \"The past should be remembered.\"\n    ];\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    return `The simple stories of ${tribe.title()} have evolved into more complex tales,\n    often depicting events that occurred in the tribe's past. These tales\n    form an oral history through which the tribe remembers its origins.`;\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    return [\n      `The tribe is not interested in the past, and the tales reflect this, no longer emphasising the\n      tribe's history.`,\n      `The tales become a central part of the tribe's culture, with all members gathering regularly\n      to hear about the events of the past.`\n    ];\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n    return [\n      function () {\n        tribe.addCulture(\"noHistory\");\n        console.log(`${tribe.title()} rejects oral history.`)\n      },\n      function () {\n        tribe.addCulture(\"oralHistory\");\n        console.log(`${tribe.title()} has begun oral history.`);\n      }\n    ];\n  }\n}\n\nclass PriestClassEvent {\n  public static id : string = \"PriestClassEvent\";\n\n  static triggers(tribe: Tribe, region: Region, progress: number) {\n    // Does not trigger if:\n    // Tribe is unencountered.\n    // Tribe has oral history (i.e. doesn't have the no-history culture).\n    // Tribe is not supersitious or hierarchical.\n    if (tribe.attitudes.monolith != Attitudes.Monolith.Superstitious) return false;\n    if (!tribe.hasCulture(\"noHistory\")) return false;\n    if (!tribe.hasCulture(\"worshipsMonolith\")) return false;\n\n    if (tribe.hasCulture(\"priestsRule\")) return false;\n\n    return Random.progressiveChance(0.00001, progress, 0.005);\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    if (tribe.attitudes.monolith != Attitudes.Monolith.Superstitious) return 0;\n    if (!tribe.hasCulture(\"noHistory\")) return 0;\n    if (!tribe.hasCulture(\"worshipsMonolith\")) return 0;\n\n    if (tribe.hasCulture(\"priestsRule\")) return 0;\n\n    return Random.interval(0, 3);\n  }\n\n  static isChoice() : boolean {\n    return true;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    return [\n      \"The priests do not speak for me.\",\n      \"The priests are my messengers.\"\n    ];\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    return `A priestly class has developed in ${tribe.title()}, with a select group of priests\n    claiming to be your messengers and acting in accordance with your will. The priests use stories\n    and myths to influence the other tribespeople, who, without any understanding of their history,\n    have no reason not to believe them.`;\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    return [\n      `The priests convince the rest of the tribe that your displeasure is the result of some\n      wrongdoing on their part. Before long, the tribespeople are desperate for the guidance of their\n      religious leaders, who are all too happy to oblige.`,\n      `With your blessing, the priests continue their rule over the other tribespeople.`\n    ];\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n    return [\n      function () {\n        tribe.addCulture(\"priestsRule\");\n        tribe.attitudes.self = Attitudes.Self.Hierarchical;\n      },\n      function () {\n        tribe.addCulture(\"priestsRule\");\n        tribe.attitudes.self = Attitudes.Self.Hierarchical;\n      }\n    ];\n  }\n}\n\nclass GroupBreaksAwayFromInsularTribeEvent {\n  public static id : string = \"GroupBreaksAwayFromInsularTribeEvent\";\n\n  private static newTribeName : Noun[];\n\n  static triggers(tribe: Tribe, region: Region, progress: number) {\n    // Does not trigger if:\n    // Tribe is not insular.\n    // Tribe is explorative.\n    // Tribe has not been encountered.\n    // Tribe has the 'no outside contact' culture.\n    if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return false;\n    if (tribe.attitudes.others != Attitudes.Others.Insular) return false;\n    if (tribe.attitudes.world == Attitudes.World.Explore) return false;\n    if (tribe.hasCulture(\"noOutsideContact\")) return false;\n\n    return Random.chance(0.0005);\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    return 0;\n  }\n\n  static isChoice() : boolean {\n    return true;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    return [\n      \"They should not be allowed to leave.\",\n      \"They can explore the world if they wish.\"\n    ];\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    return `A small group from ${tribe.title()} are unhappy with the tribe's insular nature,\n    and have decided they want to break away and form their own tribe. Many of the other tribe members\n    are unhappy with the group's choice, fearing that they will come to harm if they leave.`;\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    let newName : Noun[] = []\n\n    // Set name of new tribe if the old tribe has one.\n    if (tribe.name().length > 0) {\n      // Get descriptor for tribe.\n      const roll = Random.interval(0, 4);\n      let descriptor : string = \"\";\n      switch (roll) {\n        case 0: descriptor = \"exile\"; break;\n        case 1: descriptor = \"fugitive\"; break;\n        case 2: descriptor = \"displaced\"; break;\n        case 3: descriptor = \"rejected\"; break;\n        case 4: descriptor = \"outcast\"; break;\n      }\n\n      // Build up the new name.\n      \n      let first : boolean = true;\n      for (let n of tribe.name()) {\n        if (first) {\n          newName.push(new Noun(n.base, n.plural, true, n.adjectives));\n        }\n        else {\n          newName.push(new Noun(n.base, n.plural, n.genitive, n.adjectives));\n        }\n      }\n\n      newName = [new Noun(descriptor, true, false, [])].concat(newName);\n    }\n\n    GroupBreaksAwayFromInsularTribeEvent.newTribeName = newName;\n\n    if (newName.length > 0) {\n      return [\n        `The small group is forced to stay against their will. Knowing that there is no way to overpower the\n        will of the others, they resign themselves to life in the tribe. The tribe avoids contact with the outside world,\n        fearing that otherwise this will happen again.`,\n        `The rest of the tribe is unhappy, but ultimately willing to let the group forge their own path.\n        The new tribe calls themselves ${Language.toTitle(tribe.language().translate(newName))}.`\n      ];\n    }\n    else {\n      return [\n        `The small group is forced to stay against their will. Knowing that there is no way to overpower the\n        will of the others, they resign themselves to life in the tribe. The tribe avoids contact with the outside world,\n        fearing that otherwise this will happen again.`,\n        `The rest of the tribe is unhappy, but ultimately willing to let the group forge their own path.`\n      ];\n    }\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n    const newName : Noun[] = GroupBreaksAwayFromInsularTribeEvent.newTribeName;\n\n    return [\n      function () {\n        tribe.addCulture(\"noOutsideContact\");\n      },\n      function () {\n        let newTribe : Tribe = tribe.split([0.8, 0.2])[0];\n\n        // Set the new tribe's name if it has one.\n        if (newName.length > 0) {\n          newTribe.setName(newName);\n        }\n\n        // New tribe is diplomatic and explorative.\n        newTribe.attitudes.others = Attitudes.Others.Diplomatic;\n        newTribe.attitudes.world = Attitudes.World.Explore;\n\n        // Set new tribe's migration chance.\n        newTribe.setMigrationChance(0.00001);\n\n        // New tribe migrates to another region.\n        let otherRegions = region.nearby();\n\n        let migrateRegion : Region = Random.choice(otherRegions);\n\n        migrateRegion.addTribe(newTribe);\n      }\n    ];\n  }\n}\n\nclass DiplomaticEnvoyEvent {\n  public static id : string = \"DiplomaticEnvoyEvent\";\n\n  private static otherTribe : Tribe;\n\n  static triggers(tribe: Tribe, region: Region, progress: number) {\n    // Does not trigger if:\n    // Tribe is not diplomatic.\n    // Tribe has not been encountered.\n    // Tribe doesn't have language.\n    if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return false;\n    if (tribe.attitudes.others != Attitudes.Others.Diplomatic) return false;\n    if (!tribe.hasTechnology(\"language\")) return false;\n\n    // Only triggers if there is another tribe in the region with language.\n    let otherTribes : Tribe[] = region.tribes().filter(function (v, i, a) {\n      return (v != tribe) && (v.hasTechnology(\"language\")) && (tribe.relationship(v) == 0);\n    });\n\n    if (otherTribes.length == 0) return false;\n\n    // Select the other tribe to be the target of the envoy.\n    if (Random.chance(0.0005)) {\n      DiplomaticEnvoyEvent.otherTribe = Random.choice(otherTribes);\n      return true;\n    }\n    else return false;\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    return 0;\n  }\n\n  static isChoice() : boolean {\n    return true;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    const other = DiplomaticEnvoyEvent.otherTribe;\n\n    // If other tribe is aggressive, they attack the envoy.\n    // If other tribe is defensive, increase in relationship.\n    // If other tribe is diplomatic, large increase in relationship.\n    // If other tribe is insular, nothing happens.\n    if (other.attitudes.others == Attitudes.Others.Aggressive) {\n      return [\n        \"The dead must be avenged.\",\n        \"The aggressors should be avoided.\"\n      ]\n    }\n    else if (other.attitudes.others == Attitudes.Others.Defensive) {\n      return [\n        \"They would make valuable allies.\",\n        \"They should be left in peace.\"\n      ]\n    }\n    else if (other.attitudes.others == Attitudes.Others.Diplomatic) {\n      return [\n        \"They would make valuable friends.\",\n        \"Their kindness is appreciated.\"\n      ]\n    }\n    else {\n      return [\n        \"How dare they reject the envoys?\",\n        \"Their isolation should be respected.\"\n      ]\n    }\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    const other = DiplomaticEnvoyEvent.otherTribe;\n\n    let message : string = `${tribe.titleCapitalized()} has decided to send a small group of envoys to a nearby tribe,\n    ${other.title()}, in the hopes of getting to know them better. A group of tribespeople leave one morning,\n    bearing gifts for their neighbours.`;\n\n    if (other.attitudes.others == Attitudes.Others.Aggressive) {\n      message += ` ${other.titleCapitalized()} are aggressive toward the envoys. Shortly after arriving in their camp,\n      they are all brutally killed.`;\n    }\n    else if (other.attitudes.others == Attitudes.Others.Defensive) {\n      message += ` ${other.titleCapitalized()} seem suspicious of the envoys. They are allowed to enter the camp,\n      and after a short while the tribe realizes that they mean no harm. The gifts seem appreciated, and the envoys\n      return to their home.`;\n    }\n    else if (other.attitudes.others == Attitudes.Others.Diplomatic) {\n      message += ` ${other.titleCapitalized()} are welcoming of the envoys, and seem pleased to have met another tribe.\n      The gifts are greatly appreciated, and the envoys return to their home. A few days later, a group of envoys from\n      ${other.title()} arrive at the camp of ${tribe.title()}, bearing gifts in return.`;\n    }\n    else {\n      message += ` ${other.titleCapitalized()} are deeply suspicious of the envoys, refusing to allow them anywhere near\n      the camp. The envoys are disappointed, but decide it is better to leave in peace than risk provoking anyone.`;\n    }\n\n    return message;\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    const other = DiplomaticEnvoyEvent.otherTribe;\n\n    if (other.attitudes.others == Attitudes.Others.Aggressive) {\n      return [\n        `${tribe.titleCapitalized()} are angry at the loss of their envoys, and the tribespeople swear\n        that their deaths shall be avenged.`,\n        `${tribe.titleCapitalized()} are angry at the loss of their envoys, but realise that to escalate\n        the conflict would only result in further deaths.`\n      ];\n    }\n    else if (other.attitudes.others == Attitudes.Others.Defensive) {\n      return [\n        `${tribe.titleCapitalized()} are pleased to have made contact with ${other.title()},\n        and decide that it would be good to further improve their relations.`,\n        `${tribe.titleCapitalized()} are pleased to have made contact with ${other.title()},\n        but decide it would be better if they were left in peace.`\n      ];\n    }\n    else if (other.attitudes.others == Attitudes.Others.Diplomatic) {\n      return [\n        `${tribe.titleCapitalized()} are pleased to have made contact with ${other.title()},\n        and both tribes decide that they would like to improve their relations.`,\n        `${tribe.titleCapitalized()} appreciate the kindness of ${other.title()}, and are\n        glad to know of other tribes that have the same views as them.`\n      ];\n    }\n    else {\n      return [\n        `${tribe.titleCapitalized()} are offended at their envoys being rejected.`,\n        `${tribe.titleCapitalized()} are disappointed at their envoys being rejected, but\n        decide that it is better to leave ${other.title()} in peace.`\n      ];\n    }\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n    const other = DiplomaticEnvoyEvent.otherTribe;\n\n    if (other.attitudes.others == Attitudes.Others.Aggressive) {\n      return [\n        function () {\n          tribe.changeRelationship(other, -2);\n          other.changeRelationship(tribe, -2);\n        },\n        function () {\n          tribe.changeRelationship(other, -1);\n          other.changeRelationship(tribe, -1);\n        }\n      ];\n    }\n    else if (other.attitudes.others == Attitudes.Others.Defensive) {\n      return [\n        function () {\n          tribe.changeRelationship(other, 2);\n          other.changeRelationship(tribe, 2);\n        },\n        function () {\n          tribe.changeRelationship(other, 1);\n          other.changeRelationship(tribe, 1);\n        }\n      ];\n    }\n    else if (other.attitudes.others == Attitudes.Others.Diplomatic) {\n      return [\n        function () {\n          tribe.changeRelationship(other, 3);\n          other.changeRelationship(tribe, 3);\n        },\n        function () {\n          tribe.changeRelationship(other, 2);\n          other.changeRelationship(tribe, 2);\n        }\n      ];\n    }\n    else {\n      return [\n        function () {\n          tribe.changeRelationship(other, -2);\n          other.changeRelationship(tribe, -2);\n        },\n        function () {\n          tribe.changeRelationship(other, -1);\n          other.changeRelationship(tribe, -1);\n        }\n      ];\n    }\n  }\n}\n\nclass TribeCelebratesMonolithEvent {\n  public static id : string = \"TribeCelebratesMonolithEvent\";\n\n  static triggers(tribe: Tribe, region: Region, progress: number) {\n    // Does not trigger if:\n    // Tribe is not in same region as the monolith\n    // Tribe does not have the 'celebrates monolith' culture\n    // Tribe does not have language\n    // There is no temple.\n    if (!region.hasMonolith) return false;\n    if (!tribe.hasCulture(\"celebratesMonolith\")) return false;\n    if (!tribe.hasTechnology(\"language\")) return false;\n    if (!region.hasStructure(\"monolithTemple\")) return false;\n\n    // Triggers semi-regularly.\n    if (progress > 400) {\n      return Random.chance(0.05);\n    }\n    else return false;\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    // Does not trigger if:\n    // Tribe is not in same region as the monolith\n    // Tribe does not have the 'celebrates monolith' culture\n    // Tribe does not have language\n    // There is no temple.\n    if (!region.hasMonolith) return 0;\n    if (!tribe.hasCulture(\"celebratesMonolith\")) return 0;\n    if (!tribe.hasTechnology(\"language\")) return 0;\n    if (!region.hasStructure(\"monolithTemple\")) return 0;\n\n    return 1;\n  }\n\n  static isChoice() : boolean {\n    return true;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    if (tribe.hasCulture(\"humanSacrifice\")) {\n      return [\n        \"This is horrible.\",\n        \"This is a worthy sacrifice.\"\n      ]\n    }\n    else {\n      return [\n        \"Their songs and offerings please me.\",\n        \"Their songs and offerings are not enough.\"\n      ];\n    }\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    if (tribe.hasCulture(\"humanSacrifice\")) {\n      if (tribe.hasCulture(\"templeBuilders\")) {\n        return `${tribe.titleCapitalized()} have gathered at the temple they built in your name.\n        Many of them have brought offerings to place at your base in the hope that they will be blessed\n        by you. Once all the offerings have been made, they stand in a circle around you and sing songs of worship.\n        After the songs are complete, two of the tribe's priests bring a young man to you.\n        \"We offer this sacrifice in the hope that it pleases you, great stone,\" they say, as they slit the man's throat.`;\n      }\n      else {\n        return `${tribe.titleCapitalized()} has made a pilgramage to your temple.\n        Many of them have brought offerings to place at your base in the hope that they will be blessed\n        by you. Once all the offerings have been made, they stand in a circle around you and sing songs of worship.\n        After the songs are complete, two of the tribe's priests bring a young man to you.\n        \"We offer this sacrifice in the hope that it pleases you, great stone,\" they say, as they slit the man's throat.`;\n      }\n    }\n    else {\n      if (tribe.hasCulture(\"templeBuilders\")) {\n        return `${tribe.titleCapitalized()} have gathered at the temple they built in your name.\n        Many of them have brought offerings to place at your base in the hope that they will be blessed\n        by you. Once all the offerings have been made, they stand in a circle around you and sing songs of worship.`;\n      }\n      else {\n        return `${tribe.titleCapitalized()} has made a pilgramage to your temple.\n        Many of them have brought offerings to place at your base in the hope that they will be blessed\n        by you. Once all the offerings have been made, they stand in a circle around you and sing songs of worship.`;\n      }\n    }\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    if (tribe.hasCulture(\"humanSacrifice\")) {\n      return [\n        \"The tribe is confused as to what they must do to please you.\",\n        \"The tribe is glad that this sacrifice pleases you.\"\n      ]\n    }\n    else {\n      return [\n        `The tribe is glad to have earned your favour.`,\n        `The tribe is scared that they have displeased you.\n        As they leave the temple, their priests discuss what must be done to earn\n        your favour.`\n      ];\n    }\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n    if (tribe.hasCulture(\"humanSacrifice\")) {\n      return [\n        function () {\n          tribe.decreasePopulation(1);\n          if (Random.chance(0.2)) tribe.removeCulture(\"humanSacrifice\");\n        },\n        function () {\n          tribe.decreasePopulation(1);\n        }\n      ]\n    }\n    else {\n      return [\n        function () {\n        },\n        function () {\n          tribe.addCulture(\"humanSacrifice\");\n        }\n      ];\n    }\n  }\n}\n\nclass WarlordsTakePowerEvent {\n  public static id : string = \"WarlordsTakePowerEvent\";\n\n  static triggers(tribe: Tribe, region: Region, progress: number) {\n    // Does not trigger if:\n    // Tribe is not aggressive\n    // Tribe is not hierarchical\n    // Tribe has < 150 population\n    // Tribe has not been encountered\n    if (tribe.attitudes.others != Attitudes.Others.Aggressive) return false;\n    if (tribe.attitudes.self != Attitudes.Self.Hierarchical) return false;\n    if (tribe.population() < 150) return false;\n    if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return false;\n\n    if (tribe.hasCulture(\"warlordsRule\")) return false;\n\n    return Random.progressiveChance(0.00001, progress, 0.005);\n  }\n\n  static progress(tribe: Tribe, region: Region) : number {\n    // Does not trigger if:\n    // Tribe is not aggressive\n    // Tribe is not hierarchical\n    // Tribe has < 150 population\n    // Tribe has not been encountered\n    if (tribe.attitudes.others != Attitudes.Others.Aggressive) return 0;\n    if (tribe.attitudes.self != Attitudes.Self.Hierarchical) return 0;\n    if (tribe.population() < 150) return 0;\n    if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return 0;\n\n    if (tribe.hasCulture(\"warlordsRule\")) return 0;\n\n    return 1;\n  }\n\n  static isChoice() : boolean {\n    return true;\n  }\n\n  static choices(tribe: Tribe) : string[] {\n    return [\n      \"The warlords have no right to rule.\",\n      \"The warlords are the rightful rulers.\"\n    ];\n  }\n\n  static choicePrompt(tribe: Tribe) : string {\n    return `A small group of warlords from ${tribe.title()} have decided that they are the tribe's\n    rightful rulers. They have proven themselves on the battlefield and feel that they are most capable of\n    leading the tribe.`;\n  }\n\n  static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n    return [\n      `The tribe attempts to force the warlords out of their settlement, but they refuse, preferring to fight.\n      In the ensuing battle, a number of tribespeople are killed, as are all of the warlords.`,\n      `The warlords take their place as the rightful rulers of the tribe.`\n    ];\n  }\n\n  static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n    return [\n      function () {\n        const upperLimit = Math.floor(tribe.population() * 0.3);\n        const lowerLimit = Math.floor(tribe.population() * 0.1);\n        tribe.decreasePopulation(Random.interval(lowerLimit, upperLimit));\n        tribe.attitudes.self = Attitudes.Self.Egalitarian;\n      },\n      function () {\n        tribe.addCulture(\"warlordsRule\");\n      }\n    ];\n  }\n}\n\nexport const TribeEvents : TribeEvent[] = [\n  TribeDestroyedEvent,\n  EncounterEvent,\n  IndirectEncounterEvent,\n  TribeWorshipsMonolithEvent,\n  TribeCuriousOfMonolithEvent,\n  TribeFearsMonolithEvent,\n  TribeBuildsTempleEvent,\n  TribeAsksMonolithPurposeEvent,\n  TribeAttacksMonolithEvent,\n  TribeRebuildsMonolithEvent,\n  GroupBreaksAwayFromInsularTribeEvent,\n  TribeCelebratesMonolithEvent,\n  DiplomaticEnvoyEvent,\n  FirstStoriesEvent,\n  OralHistoryEvent,\n  PriestClassEvent,\n  WarlordsTakePowerEvent,\n  AttackEvent,\n  MigrationEvent,\n\n  disasters.FireSpreadsEvent,\n  disasters.DroughtEvent,\n  disasters.PlagueEvent,\n  \n  discovery.DiscoverFireEvent,\n  discovery.DiscoverToolsEvent,\n  discovery.DiscoverConstructionEvent,\n  discovery.DiscoverLanguageEvent,\n  discovery.DiscoverAgricultureEvent,\n]"]}