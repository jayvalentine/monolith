{"version":3,"sources":["random.ts","idallocator.ts","language.ts","tribe.ts"],"names":[],"mappings":"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","file":"tribe.620083ed.js","sourceRoot":"../src","sourcesContent":["export class Random {\n  static interval(min: number, max: number) : number {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  static choice<T>(array: T[]) : T {\n    const index = Random.interval(0, array.length - 1);\n    return array[index];\n  }\n\n  static chance(c: number) : boolean {\n    if (Math.random() < c) return true;\n    else return false;\n  }\n\n  static progressiveChance(c: number, progress: number, upperBound: number) : boolean {\n    const limit = Math.min(progress * c, upperBound);\n  \n    if (Math.random() < limit) return true;\n    else return false;\n  }\n}","export class IDAllocator {\n  private static ids : Object = {};\n\n  static allocate(base: string) : string {\n    if (!IDAllocator.ids.hasOwnProperty(base)) {\n      IDAllocator.ids[base] = 0;\n    }\n\n    let id : string = `${base}-${IDAllocator.ids[base]}`;\n    IDAllocator.ids[base]++;\n\n    return id;\n  }\n}","import { Random } from \"./random\";\n\nconst Alphabet : string[] = []\n\nfor (let i = 0; i < 26; i++) {\n  Alphabet[i] = String.fromCharCode(97 + i);  \n}\n\nconst Vowel : string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\nconst Consonant : string[] = Alphabet.filter(function (v, i, a) {return (Vowel.indexOf(v) == -1)});\n\nclass Suffix {\n    public readonly suffix : string;\n    public readonly optional : string;\n\n    constructor(suffix: string, optional: string) {\n        this.suffix = suffix;\n        this.optional = optional;\n    }\n}\n\nexport class Noun {\n    public readonly base : string;\n    \n    public readonly plural : boolean;\n    public readonly genitive : boolean;\n    \n    public readonly adjectives : string[];\n\n    constructor(base: string, plural: boolean, genitive: boolean, adjectives: string[]) {\n        this.base = base;\n        this.plural = plural;\n        this.genitive = genitive;\n        this.adjectives = adjectives;\n    }\n}\n\nexport class Language {\n    public static capitalize(word: string) : string {\n        let restOfWord : string = word.slice(1);\n        return word.charAt(0).toUpperCase() + restOfWord;\n    }\n\n    public static toTitle(sentence: string) : string {\n      return sentence.split(' ').map(Language.capitalize).join(' ');\n    }\n\n    private static getSuffix() : Suffix {\n        let optional : string = Random.choice(Vowel);\n\n        let suffix : string = Random.choice(Consonant) + Random.choice(Vowel);\n\n        return new Suffix(suffix, optional);\n    }\n\n    private static addSuffix(word: string, suffix: Suffix) : string {\n        if (Consonant.indexOf(word[word.length-1]) > -1) {\n            word += suffix.optional;\n        }\n        word += suffix.suffix;\n\n        return word;\n    }\n\n    private readonly plural : Suffix;\n    private readonly genitive : Suffix;\n    private readonly adjective : Suffix;\n\n    private readonly adjectivePolicy : Language.Position;\n\n    private translations : Object;\n\n    constructor() {\n        this.plural = Language.getSuffix();\n        this.genitive = Language.getSuffix();\n        this.adjective = Language.getSuffix();\n\n        if (Random.chance(0.5)) {\n            this.adjectivePolicy = Language.Position.Before;\n        }\n        else {\n            this.adjectivePolicy = Language.Position.After;\n        }\n\n        this.translations = {};\n    }\n\n    translate(sentence: Noun[]) : string {\n        let sentenceTranslated : string[] = [];\n        \n        for (let word of sentence) {\n            let wordTranslated : string = this.translateWord(word.base);\n\n            if (word.plural) wordTranslated = Language.addSuffix(wordTranslated, this.plural);\n            if (word.genitive) wordTranslated = Language.addSuffix(wordTranslated, this.genitive);\n\n            let adjectives : string[] = []\n            for (let adj of word.adjectives) {\n                let adjTranslated = this.translateWord(adj);\n\n                adjTranslated = Language.addSuffix(adjTranslated, this.adjective);\n\n                adjectives.push(adjTranslated);\n            }\n\n            if (this.adjectivePolicy == Language.Position.Before) {\n                sentenceTranslated = sentenceTranslated.concat(adjectives);\n            }\n\n            sentenceTranslated.push(wordTranslated);\n\n            if (this.adjectivePolicy == Language.Position.After) {\n                sentenceTranslated = sentenceTranslated.concat(adjectives);\n            }\n        }\n\n        return sentenceTranslated.join(\" \");\n    }\n\n    private translateWord(word: string) {\n        // First split word into phonemes.\n        let phonemes : string[] = [];\n\n        let currentPhoneme : string = \"\";\n\n        for (let letter of word.split('')) {\n            if (currentPhoneme.length > 0) {\n                let lastLetter = currentPhoneme[currentPhoneme.length - 1];\n\n                if (Vowel.indexOf(lastLetter) > -1) {\n                    phonemes.push(currentPhoneme);\n                    currentPhoneme = \"\";\n                }\n                else if ((Consonant.indexOf(lastLetter) > -1) && (Consonant.indexOf(letter) > -1)) {\n                    if (lastLetter != letter) {\n                        phonemes.push(currentPhoneme);\n                        currentPhoneme = \"\";\n                    }\n                }\n            }\n\n            currentPhoneme += letter;\n        }\n\n        if (currentPhoneme.length > 0) phonemes.push(currentPhoneme);\n\n        // Translate each phoneme.\n        let wordTranslated : string = \"\";\n\n        for (let p of phonemes) {\n            wordTranslated += this.translatePhoneme(p);\n        }\n\n        return wordTranslated;\n    }\n\n    private translatePhoneme(phoneme: string) {\n        if (!this.translations.hasOwnProperty(phoneme)) {\n            let t : string = \"\";\n\n            for (let letter of phoneme.split('')) {\n                if (Consonant.indexOf(letter) > -1) t += Random.choice(Consonant);\n                else t += Random.choice(Vowel);\n            }\n\n            this.translations[phoneme] = t;\n        }\n\n        return this.translations[phoneme];\n    }\n}\n\nexport namespace Language {\n    export enum Position {\n        Before = \"Before\",\n        After = \"After\",\n    }\n}","import { Random } from \"./random\";\nimport { IDAllocator } from \"./idallocator\";\nimport { Language, Noun } from \"./language\";\n\n// A tribe is a group of people with common traits.\nexport class Tribe {\n  private _population : number;\n\n  private _migrationChance : number;\n\n  private _eventProgress : Object;\n\n  private _technology : string[];\n  private _culture : string[];\n\n  private _name : Noun[];\n  private _language : Language;\n\n  private _relations : Object;\n\n  public attitudes: Attitudes;\n\n  public dead : boolean;\n\n  public readonly id : string;\n\n  constructor(population: number) {\n    this.id = IDAllocator.allocate(\"tribe\");\n\n    this._population = population;\n    this._migrationChance = 0.000001;\n    this._eventProgress = {};\n\n    this._relations = {};\n\n    this._technology = [];\n    this._culture = [];\n\n    this._name = [];\n\n    this.attitudes = new Attitudes();\n\n    this.attitudes.monolith = Attitudes.Monolith.Unencountered;\n\n    this.dead = false;\n\n    this.attitudes.others = Random.choice([\n      Attitudes.Others.Aggressive,\n      Attitudes.Others.Defensive,\n      Attitudes.Others.Diplomatic,\n      Attitudes.Others.Insular\n    ]);\n\n    this.attitudes.world = Random.choice([\n      Attitudes.World.Exploit,\n      Attitudes.World.Explore,\n      Attitudes.World.Harmony,\n      Attitudes.World.Survival\n    ])\n\n    this.attitudes.self = Random.choice([\n      Attitudes.Self.Hierarchical,\n      Attitudes.Self.Egalitarian\n    ])\n\n    this._language = new Language();\n  }\n\n  population() : number {\n    return this._population;\n  }\n\n  decreasePopulation(value: number) {\n    this._population -= value;\n  }\n\n  increasePopulation(value: number) {\n    this._population += value;\n  }\n\n  // Determines change in tribe's population.\n  grow() {\n    const oldPopulation = this.population();\n\n    let growthCount : number = 0;\n    let deathCount : number = 0;\n\n    const growthRate = this.growthRate();\n    const deathRate = this.deathRate();\n\n    for (let i = 0; i < 20; i++) {\n      if (Random.chance(growthRate)) growthCount += (Math.floor(this.population()*0.05));\n      if (Random.chance(deathRate)) deathCount += (Math.floor(this.population()*0.05));\n    }\n\n    // Increase population by growth count and decrease by death count.\n    this.increasePopulation(growthCount);\n    this.decreasePopulation(deathCount);\n  }\n\n  // Splits the tribe into multiple groups according to the proportions given.\n  // Returns a list of the new tribes (excluding the original).\n  split(proportions: number[]) : Tribe[] {\n    let populations : number[] = [];\n    let newTribes : Tribe[] = [];\n\n    for (let p of proportions) {\n      populations.push(Math.floor(this._population*p));\n    }\n\n    for (let p of populations.slice(1)) {\n      let t : Tribe = new Tribe(p);\n\n      // Set attitudes of the new tribe to the same as this one.\n      t.attitudes.monolith = this.attitudes.monolith;\n      t.attitudes.others = this.attitudes.others;\n      t.attitudes.world = this.attitudes.world;\n      t.attitudes.self = this.attitudes.self;\n\n      // Set technology and culture of new tribe.\n      for (let tech of this._technology) {\n        t.addTechnology(tech);\n      }\n\n      for (let cult of this._culture) {\n        t.addCulture(cult);\n      }\n\n      // Set migration chance of new tribe.\n      t.setMigrationChance(this._migrationChance);\n\n      newTribes.push(t);\n    }\n\n    // Reduce this tribe's population to the first proportion.\n    this._population = Math.floor(proportions[0] * this._population);\n\n    // Return the new tribes.\n    return newTribes;\n  }\n\n  relationship(tribe: Tribe) : number {\n    if (!this._relations.hasOwnProperty(tribe.id)) {\n      return 0;\n    }\n\n    return this._relations[tribe.id];\n  }\n\n  changeRelationship(tribe: Tribe, value: number) {\n    if (!this._relations.hasOwnProperty(tribe.id)) {\n      this._relations[tribe.id] = 0;\n    }\n\n    this._relations[tribe.id] += value;\n\n    console.log(`Set relationship of ${this.id} for ${tribe.id} to ${this._relations[tribe.id]}.`);\n  }\n\n  attack() : number {\n    let attack : number = 0;\n\n    if (this.attitudes.others == Attitudes.Others.Aggressive) attack += 1;\n    if (this.hasTechnology(\"tools\")) attack += 1;\n\n    return attack;\n  }\n\n  defense() : number {\n    let defense : number = 0;\n\n    if (this.attitudes.others == Attitudes.Others.Defensive) defense += 1;\n    if (this.hasTechnology(\"construction\")) defense += 1;\n\n    return defense;\n  }\n\n  migrate() : boolean {\n    return Random.chance(this._migrationChance);\n  }\n\n  setMigrationChance(c: number) {\n    this._migrationChance = c;\n  }\n\n  progress(e: TribeEvent) : number {\n    return this._eventProgress[e.id];\n  }\n\n  increaseProgress(e: TribeEvent, progress: number) {\n    // Default to starting from 0 if no progress is stored.\n    let currentProgress : number = 0;\n\n    // Get the progress from the map if it exists.\n    if (this._eventProgress.hasOwnProperty(e.id)) currentProgress = this._eventProgress[e.id];\n\n    // Set the new progress.\n    this._eventProgress[e.id] = currentProgress+progress;\n  }\n\n  resetProgress(e: TribeEvent) {\n    this._eventProgress[e.id] = 0;\n  }\n\n  addTechnology(technology: string) {\n    if (this._technology.indexOf(technology) > -1) return;\n    this._technology.push(technology);\n  }\n\n  removeTechnology(technology: string) {\n    // Return silently if tribe doesn't have technology.\n    const i = this._technology.indexOf(technology);\n    if (i == -1) return;\n\n    this._technology.splice(i, 1);\n  }\n\n  hasTechnology(technology: string) : boolean {\n    if (this._technology.indexOf(technology) > -1) return true;\n    else return false;\n  }\n\n  addCulture(culture: string) {\n    if (this._culture.indexOf(culture) > -1) return;\n    this._culture.push(culture);\n  }\n\n  removeCulture(culture: string) {\n    // Return silently if tribe doesn't have culture.\n    const i = this._culture.indexOf(culture);\n    if (i == -1) return;\n\n    this._culture.splice(i, 1);\n  }\n\n  hasCulture(culture: string) : boolean {\n    if (this._culture.indexOf(culture) > -1) return true;\n    else return false;\n  }\n\n  title() : string {\n    if (this._name.length == 0) return \"a tribe\";\n    else return \"the \" + Language.toTitle(this._language.translate(this._name));\n  }\n\n  titleCapitalized() : string {\n    if (this._name.length == 0) return \"A tribe\";\n    else return \"The \" + Language.toTitle(this._language.translate(this._name));\n  }\n\n  setName(name: Noun[]) {\n    this._name = name;\n  }\n\n  name() : Noun[] {\n    return this._name;\n  }\n\n  language() : Language {\n    return this._language;\n  }\n\n  private growthRate() : number {\n    let g : number = 0.0001;\n\n    if (this.hasTechnology(\"fire\")) g = 4 * g;\n\n    if (this.hasTechnology(\"agriculture\")) g = 4 * g;\n\n    return g;\n  }\n\n  private deathRate() : number {\n    let d : number = 0.0001;\n\n    return d;\n  }\n}\n\nexport class Attitudes {\n  public monolith: Attitudes.Monolith;\n  public others: Attitudes.Others;\n  public world: Attitudes.World;\n  public self: Attitudes.Self;\n\n  static MonolithString(monolith: Attitudes.Monolith) : string {\n    switch(monolith) {\n      case Attitudes.Monolith.Unencountered: return \"unencountered\";\n      case Attitudes.Monolith.Curious: return \"curious\";\n      case Attitudes.Monolith.Superstitious: return \"superstitious\";\n      case Attitudes.Monolith.Fearful: return \"fearful\";\n    }\n  }\n\n  static OthersString(others: Attitudes.Others) : string {\n    switch(others) {\n      case Attitudes.Others.Aggressive: return \"aggressive\";\n      case Attitudes.Others.Defensive: return \"defensive\";\n      case Attitudes.Others.Diplomatic: return \"diplomatic\";\n      case Attitudes.Others.Insular: return \"insular\";\n    }\n  }\n\n  static WorldString(world: Attitudes.World) : string {\n    switch(world) {\n      case Attitudes.World.Exploit: return \"exploitative\";\n      case Attitudes.World.Explore: return \"explorative\";\n      case Attitudes.World.Harmony: return \"harmonious\";\n      case Attitudes.World.Survival: return \"survivalists\";\n    }\n  }\n\n  static SelfString(self: Attitudes.Self) : string {\n    switch(self) {\n      case Attitudes.Self.Hierarchical: return \"hierarchical\";\n      case Attitudes.Self.Egalitarian: return \"egalitarian\";\n    }\n  }\n\n  constructor() {\n\n  }\n\n  monolithString() : string {\n    return Attitudes.MonolithString(this.monolith);\n  }\n\n  othersString() : string {\n    return Attitudes.OthersString(this.others);\n  }\n\n  worldString() : string {\n    return Attitudes.WorldString(this.world);\n  }\n\n  selfString() : string {\n    return Attitudes.SelfString(this.self);\n  }\n}\n\nexport namespace Attitudes {\n  export enum Monolith {\n    Unencountered = \"unencountered\",\n    Curious = \"curious\",\n    Superstitious = \"superstitious\",\n    Fearful = \"fearful\",\n  }\n\n  export enum Others {\n    Aggressive = \"aggressive\",\n    Defensive = \"defensive\",\n    Diplomatic = \"diplomatic\",\n    Insular = \"insular\",\n  }\n\n  export enum World {\n    Exploit = \"exploit\",\n    Explore = \"explore\",\n    Harmony = \"harmony\",\n    Survival = \"survival\",\n  }\n\n  export enum Self {\n    Hierarchical = \"hierarchical\",\n    Egalitarian = \"egalitarian\",\n  }\n}"]}