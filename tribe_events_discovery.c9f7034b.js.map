{"version":3,"sources":["random.ts","idallocator.ts","language.ts","tribe.ts","region.ts","tribe_events_discovery.ts"],"names":[],"mappings":";AAAa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAb,IAAA,EAAA,WAAA,SAAA,KAqBA,OApBS,EAAA,SAAP,SAAgB,EAAa,GACpB,OAAA,KAAK,MAAM,KAAK,UAAY,EAAM,EAAM,IAAM,GAGhD,EAAA,OAAP,SAAiB,GAER,OAAA,EADO,EAAO,SAAS,EAAG,EAAM,OAAS,KAI3C,EAAA,OAAP,SAAc,GACR,OAAA,KAAK,SAAW,GAIf,EAAA,kBAAP,SAAyB,EAAW,EAAkB,GAC9C,IAAA,EAAQ,KAAK,IAAI,EAAW,EAAG,GAEjC,OAAA,KAAK,SAAW,GAGxB,EArBA,GAAa,QAAA,OAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAb,IAAA,EAAA,WAAA,SAAA,KAaA,OAVS,EAAA,SAAP,SAAgB,GACT,EAAY,IAAI,eAAe,KAClC,EAAY,IAAI,GAAQ,GAGtB,IAAA,EAAiB,EAAI,IAAI,EAAY,IAAI,GAGtC,OAFP,EAAY,IAAI,KAET,GAVM,EAAA,IAAe,GAYhC,EAbA,GAAa,QAAA,YAAA;;ACsCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAlCb,IAJA,IAAA,EAAA,QAAA,YAEM,EAAsB,GAEnB,EAAI,EAAG,EAAI,GAAI,IACtB,EAAS,GAAK,OAAO,aAAa,GAAK,GAGzC,IAAM,EAAmB,CAAC,IAAK,IAAK,IAAK,IAAK,KAExC,EAAuB,EAAS,OAAO,SAAU,EAAG,EAAG,GAAY,OAAqB,GAArB,EAAM,QAAQ,KAEvF,EAAA,WAQA,OAJI,SAAY,EAAgB,GACnB,KAAA,OAAS,EACT,KAAA,SAAW,GANxB,GAUA,EAAA,WAcA,OANI,SAAY,EAAc,EAAiB,EAAmB,GACrD,KAAA,KAAO,EACP,KAAA,OAAS,EACT,KAAA,SAAW,EACX,KAAA,WAAa,GAZ1B,GAAa,QAAA,KAAA,EAgBb,IAAA,EAAA,WAmCI,SAAA,IACS,KAAA,OAAS,EAAS,YAClB,KAAA,SAAW,EAAS,YACpB,KAAA,UAAY,EAAS,YAEtB,EAAA,OAAO,OAAO,IACT,KAAA,gBAAkB,EAAS,SAAS,OAGpC,KAAA,gBAAkB,EAAS,SAAS,MAGxC,KAAA,aAAe,GAsF5B,OApIkB,EAAA,WAAd,SAAyB,GACjB,IAAA,EAAsB,EAAK,MAAM,GAC9B,OAAA,EAAK,OAAO,GAAG,cAAgB,GAG5B,EAAA,QAAd,SAAsB,GACb,OAAA,EAAS,MAAM,KAAK,IAAI,EAAS,YAAY,KAAK,MAG5C,EAAA,UAAf,WACQ,IAAA,EAAoB,EAAA,OAAO,OAAO,GAElC,EAAkB,EAAA,OAAO,OAAO,GAAa,EAAA,OAAO,OAAO,GAExD,OAAA,IAAI,EAAO,EAAQ,IAGf,EAAA,UAAf,SAAyB,EAAc,GAM5B,OALH,EAAU,QAAQ,EAAK,EAAK,OAAO,KAAO,IAC1C,GAAQ,EAAO,UAEnB,GAAQ,EAAO,QA4BnB,EAAA,UAAA,UAAA,SAAU,GAGW,IAFb,IAAA,EAAgC,GAEnB,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAU,CAAlB,IAAA,EAAI,EAAA,GACL,EAA0B,KAAK,cAAc,EAAK,MAElD,EAAK,SAAQ,EAAiB,EAAS,UAAU,EAAgB,KAAK,SACtE,EAAK,WAAU,EAAiB,EAAS,UAAU,EAAgB,KAAK,WAG5D,IADZ,IAAA,EAAwB,GACZ,EAAA,EAAA,EAAA,EAAK,WAAL,EAAA,EAAA,OAAA,IAAiB,CAAxB,IAAA,EAAG,EAAA,GACJ,EAAgB,KAAK,cAAc,GAEvC,EAAgB,EAAS,UAAU,EAAe,KAAK,WAEvD,EAAW,KAAK,GAGhB,KAAK,iBAAmB,EAAS,SAAS,SAC1C,EAAqB,EAAmB,OAAO,IAGnD,EAAmB,KAAK,GAEpB,KAAK,iBAAmB,EAAS,SAAS,QAC1C,EAAqB,EAAmB,OAAO,IAIhD,OAAA,EAAmB,KAAK,MAG3B,EAAA,UAAA,cAAR,SAAsB,GAMC,IAJf,IAAA,EAAsB,GAEtB,EAA0B,GAEX,EAAA,EAAA,EAAA,EAAK,MAAM,IAAX,EAAA,EAAA,OAAA,IAAgB,CAA1B,IAAA,EAAM,EAAA,GACP,GAAA,EAAe,OAAS,EAAG,CACvB,IAAA,EAAa,EAAe,EAAe,OAAS,GAEpD,EAAM,QAAQ,IAAe,GAC7B,EAAS,KAAK,GACd,EAAiB,IAEX,EAAU,QAAQ,IAAe,GAAO,EAAU,QAAQ,IAAW,GACvE,GAAc,IACd,EAAS,KAAK,GACd,EAAiB,IAK7B,GAAkB,EAGlB,EAAe,OAAS,GAAG,EAAS,KAAK,GAK/B,IAFV,IAAA,EAA0B,GAEhB,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAU,CAAf,IAAA,EAAC,EAAA,GACN,GAAkB,KAAK,iBAAiB,GAGrC,OAAA,GAGH,EAAA,UAAA,iBAAR,SAAyB,GACjB,IAAC,KAAK,aAAa,eAAe,GAAU,CAGzB,IAFf,IAAA,EAAa,GAEE,EAAA,EAAA,EAAA,EAAQ,MAAM,IAAd,EAAA,EAAA,OAAA,IAAmB,CAA7B,IAAA,EAAM,EAAA,GACP,EAAU,QAAQ,IAAW,EAAG,GAAK,EAAA,OAAO,OAAO,GAClD,GAAK,EAAA,OAAO,OAAO,GAGvB,KAAA,aAAa,GAAW,EAG1B,OAAA,KAAK,aAAa,IAEjC,EArIA,GAAa,QAAA,SAAA,EAuIb,SAAiB,IACb,SAAY,GACR,EAAA,OAAA,SACA,EAAA,MAAA,QAFJ,CAAY,EAAA,WAAA,EAAA,SAAQ,KADxB,CAAiB,EAAA,QAAA,WAAA,QAAA,SAAQ,KAvIZ,QAAA,SAAA;;ACiPA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAvRb,IAAA,EAAA,QAAA,YACA,EAAA,QAAA,iBACA,EAAA,QAAA,cAGA,EAAA,WAqBE,SAAA,EAAY,GACL,KAAA,GAAK,EAAA,YAAY,SAAS,SAE1B,KAAA,YAAc,EACd,KAAA,iBAAmB,KACnB,KAAA,eAAiB,GAEjB,KAAA,WAAa,GAEb,KAAA,YAAc,GACd,KAAA,SAAW,GAEX,KAAA,MAAQ,GAER,KAAA,UAAY,IAAI,EAEhB,KAAA,UAAU,SAAW,EAAU,SAAS,cAExC,KAAA,MAAO,EAEP,KAAA,UAAU,OAAS,EAAA,OAAO,OAAO,CACpC,EAAU,OAAO,WACjB,EAAU,OAAO,UACjB,EAAU,OAAO,WACjB,EAAU,OAAO,UAGd,KAAA,UAAU,MAAQ,EAAA,OAAO,OAAO,CACnC,EAAU,MAAM,QAChB,EAAU,MAAM,QAChB,EAAU,MAAM,QAChB,EAAU,MAAM,WAGb,KAAA,UAAU,KAAO,EAAA,OAAO,OAAO,CAClC,EAAU,KAAK,aACf,EAAU,KAAK,cAGZ,KAAA,UAAY,IAAI,EAAA,SAoNzB,OAjNE,EAAA,UAAA,WAAA,WACS,OAAA,KAAK,aAGd,EAAA,UAAA,mBAAA,SAAmB,GACZ,KAAA,aAAe,GAGtB,EAAA,UAAA,mBAAA,SAAmB,GACZ,KAAA,aAAe,GAItB,EAAA,UAAA,KAAA,WACwB,KAAK,aAQtB,IARC,IAEF,EAAuB,EACvB,EAAsB,EAEpB,EAAa,KAAK,aAClB,EAAY,KAAK,YAEd,EAAI,EAAG,EAAI,GAAI,IAClB,EAAA,OAAO,OAAO,KAAa,GAAgB,KAAK,MAAwB,IAAlB,KAAK,eAC3D,EAAA,OAAO,OAAO,KAAY,GAAe,KAAK,MAAwB,IAAlB,KAAK,eAI1D,KAAA,mBAAmB,GACnB,KAAA,mBAAmB,IAK1B,EAAA,UAAA,MAAA,SAAM,GAIU,IAHV,IAAA,EAAyB,GACzB,EAAsB,GAEZ,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAa,CAAlB,IAAA,EAAC,EAAA,GACR,EAAY,KAAK,KAAK,MAAM,KAAK,YAAY,IAGjC,IAAA,IAAA,EAAA,EAAA,EAAA,EAAY,MAAM,GAAlB,EAAA,EAAA,OAAA,IAAsB,CAA3B,IACH,EAAY,IAAI,EADb,EAAC,EAAA,IAIR,EAAE,UAAU,SAAW,KAAK,UAAU,SACtC,EAAE,UAAU,OAAS,KAAK,UAAU,OACpC,EAAE,UAAU,MAAQ,KAAK,UAAU,MACnC,EAAE,UAAU,KAAO,KAAK,UAAU,KAGjB,IAAA,IAAA,EAAA,EAAA,EAAA,KAAK,YAAL,EAAA,EAAA,OAAA,IAAkB,CAA1B,IAAA,EAAI,EAAA,GACX,EAAE,cAAc,GAGD,IAAA,IAAA,EAAA,EAAA,EAAA,KAAK,SAAL,EAAA,EAAA,OAAA,IAAe,CAAvB,IAAA,EAAI,EAAA,GACX,EAAE,WAAW,GAIf,EAAE,mBAAmB,KAAK,kBAE1B,EAAU,KAAK,GAOV,OAHF,KAAA,YAAc,KAAK,MAAM,EAAY,GAAK,KAAK,aAG7C,GAGT,EAAA,UAAA,aAAA,SAAa,GACP,OAAC,KAAK,WAAW,eAAe,EAAM,IAInC,KAAK,WAAW,EAAM,IAHpB,GAMX,EAAA,UAAA,mBAAA,SAAmB,EAAc,GAC1B,KAAK,WAAW,eAAe,EAAM,MACnC,KAAA,WAAW,EAAM,IAAM,GAGzB,KAAA,WAAW,EAAM,KAAO,EAE7B,QAAQ,IAAI,uBAAuB,KAAK,GAAE,QAAQ,EAAM,GAAE,OAAO,KAAK,WAAW,EAAM,IAAG,MAG5F,EAAA,UAAA,OAAA,WACM,IAAA,EAAkB,EAKf,OAHH,KAAK,UAAU,QAAU,EAAU,OAAO,aAAY,GAAU,GAChE,KAAK,cAAc,WAAU,GAAU,GAEpC,GAGT,EAAA,UAAA,QAAA,WACM,IAAA,EAAmB,EAKhB,OAHH,KAAK,UAAU,QAAU,EAAU,OAAO,YAAW,GAAW,GAChE,KAAK,cAAc,kBAAiB,GAAW,GAE5C,GAGT,EAAA,UAAA,QAAA,WACS,OAAA,EAAA,OAAO,OAAO,KAAK,mBAG5B,EAAA,UAAA,mBAAA,SAAmB,GACZ,KAAA,iBAAmB,GAG1B,EAAA,UAAA,SAAA,SAAS,GACA,OAAA,KAAK,eAAe,EAAE,KAG/B,EAAA,UAAA,iBAAA,SAAiB,EAAe,GAE1B,IAAA,EAA2B,EAG3B,KAAK,eAAe,eAAe,EAAE,MAAK,EAAkB,KAAK,eAAe,EAAE,KAGjF,KAAA,eAAe,EAAE,IAAM,EAAgB,GAG9C,EAAA,UAAA,cAAA,SAAc,GACP,KAAA,eAAe,EAAE,IAAM,GAG9B,EAAA,UAAA,cAAA,SAAc,GACR,KAAK,YAAY,QAAQ,IAAe,GACvC,KAAA,YAAY,KAAK,IAGxB,EAAA,UAAA,iBAAA,SAAiB,GAET,IAAA,EAAI,KAAK,YAAY,QAAQ,IACzB,GAAN,GAEC,KAAA,YAAY,OAAO,EAAG,IAG7B,EAAA,UAAA,cAAA,SAAc,GACR,OAAA,KAAK,YAAY,QAAQ,IAAe,GAI9C,EAAA,UAAA,WAAA,SAAW,GACL,KAAK,SAAS,QAAQ,IAAY,GACjC,KAAA,SAAS,KAAK,IAGrB,EAAA,UAAA,cAAA,SAAc,GAEN,IAAA,EAAI,KAAK,SAAS,QAAQ,IACtB,GAAN,GAEC,KAAA,SAAS,OAAO,EAAG,IAG1B,EAAA,UAAA,WAAA,SAAW,GACL,OAAA,KAAK,SAAS,QAAQ,IAAY,GAIxC,EAAA,UAAA,MAAA,WACM,OAAqB,GAArB,KAAK,MAAM,OAAoB,UACvB,OAAS,EAAA,SAAS,QAAQ,KAAK,UAAU,UAAU,KAAK,SAGtE,EAAA,UAAA,iBAAA,WACM,OAAqB,GAArB,KAAK,MAAM,OAAoB,UACvB,OAAS,EAAA,SAAS,QAAQ,KAAK,UAAU,UAAU,KAAK,SAGtE,EAAA,UAAA,QAAA,SAAQ,GACD,KAAA,MAAQ,GAGf,EAAA,UAAA,KAAA,WACS,OAAA,KAAK,OAGd,EAAA,UAAA,SAAA,WACS,OAAA,KAAK,WAGN,EAAA,UAAA,WAAR,WACM,IAAA,EAAa,KAMV,OAJH,KAAK,cAAc,UAAS,GAAI,GAEhC,KAAK,cAAc,iBAAgB,GAAI,GAEpC,GAGD,EAAA,UAAA,UAAR,WAGS,OAFU,MAIrB,EAhRA,GAAa,QAAA,MAAA,EAkRb,IAAA,EAAA,WAwCE,SAAA,KAmBF,OArDS,EAAA,eAAP,SAAsB,GACb,OAAA,GACA,KAAA,EAAU,SAAS,cAAsB,MAAA,gBACzC,KAAA,EAAU,SAAS,QAAgB,MAAA,UACnC,KAAA,EAAU,SAAS,cAAsB,MAAA,gBACzC,KAAA,EAAU,SAAS,QAAgB,MAAA,YAIrC,EAAA,aAAP,SAAoB,GACX,OAAA,GACA,KAAA,EAAU,OAAO,WAAmB,MAAA,aACpC,KAAA,EAAU,OAAO,UAAkB,MAAA,YACnC,KAAA,EAAU,OAAO,WAAmB,MAAA,aACpC,KAAA,EAAU,OAAO,QAAgB,MAAA,YAInC,EAAA,YAAP,SAAmB,GACV,OAAA,GACA,KAAA,EAAU,MAAM,QAAgB,MAAA,eAChC,KAAA,EAAU,MAAM,QAAgB,MAAA,cAChC,KAAA,EAAU,MAAM,QAAgB,MAAA,aAChC,KAAA,EAAU,MAAM,SAAiB,MAAA,iBAInC,EAAA,WAAP,SAAkB,GACT,OAAA,GACA,KAAA,EAAU,KAAK,aAAqB,MAAA,eACpC,KAAA,EAAU,KAAK,YAAoB,MAAA,gBAQ5C,EAAA,UAAA,eAAA,WACS,OAAA,EAAU,eAAe,KAAK,WAGvC,EAAA,UAAA,aAAA,WACS,OAAA,EAAU,aAAa,KAAK,SAGrC,EAAA,UAAA,YAAA,WACS,OAAA,EAAU,YAAY,KAAK,QAGpC,EAAA,UAAA,WAAA,WACS,OAAA,EAAU,WAAW,KAAK,OAErC,EA3DA,GAAa,QAAA,UAAA,EA6Db,SAAiB,IACf,SAAY,GACV,EAAA,cAAA,gBACA,EAAA,QAAA,UACA,EAAA,cAAA,gBACA,EAAA,QAAA,UAJF,CAAY,EAAA,WAAA,EAAA,SAAQ,KAOpB,SAAY,GACV,EAAA,WAAA,aACA,EAAA,UAAA,YACA,EAAA,WAAA,aACA,EAAA,QAAA,UAJF,CAAY,EAAA,SAAA,EAAA,OAAM,KAOlB,SAAY,GACV,EAAA,QAAA,UACA,EAAA,QAAA,UACA,EAAA,QAAA,UACA,EAAA,SAAA,WAJF,CAAY,EAAA,QAAA,EAAA,MAAK,KAOjB,SAAY,GACV,EAAA,aAAA,eACA,EAAA,YAAA,cAFF,CAAY,EAAA,OAAA,EAAA,KAAI,KAtBlB,CAAiB,EAAA,QAAA,YAAA,QAAA,UAAS,KA7Db,QAAA,UAAA;;AC9QA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IATb,IAAA,EAAA,QAAA,YASA,EAAA,WA+BE,SAAA,IACO,KAAA,aAAc,EACd,KAAA,QAAU,GACV,KAAA,eAAiB,GACjB,KAAA,YAAc,GAGf,IAAA,EAAI,EAAA,OAAO,SAAS,EAAG,GAGpB,OAFF,KAAA,MAAQ,EAAO,KAAK,UAElB,GACA,KAAA,EAAQ,KAAA,MAAQ,EAAO,KAAK,OAAQ,MACpC,KAAA,EAAQ,KAAA,MAAQ,EAAO,KAAK,UAAW,MACvC,KAAA,EAAQ,KAAA,MAAQ,EAAO,KAAK,MAAO,MACnC,KAAA,EAAQ,KAAA,MAAQ,EAAO,KAAK,UAAW,MACvC,KAAA,EAAQ,KAAA,MAAQ,EAAO,KAAK,OAAQ,MACpC,KAAA,EAAQ,KAAA,MAAQ,EAAO,KAAK,OAAQ,MACpC,KAAA,EAAQ,KAAA,MAAQ,EAAO,KAAK,WAK9B,KAAA,MAAQ,EAAA,OAAO,SAAS,EAAG,GAC3B,KAAA,OAAS,EAAA,OAAO,SAAS,EAAG,GAC5B,KAAA,WAAa,EAAA,OAAO,SAAS,EAAG,GA4JzC,OAnMU,EAAA,UAAA,YAAR,SAAoB,GACX,OAAA,GAEA,KAAA,EAAU,MAAA,KACV,KAAA,EAAU,MAAA,SACV,KAAA,EAAU,MAAA,kBACV,KAAA,EAAU,MAAA,WACV,KAAA,EAAU,MAAA,aACV,KAAA,EAAU,MAAA,YACV,KAAA,EAAU,MAAA,WAGV,MAAA,WA+BT,EAAA,UAAA,KAAA,WACS,OAAA,KAAK,OAGd,EAAA,UAAA,WAAA,WACS,OAAA,EAAO,KAAK,KAAK,QAG1B,EAAA,UAAA,oBAAA,WACS,OAAA,KAAK,OACL,KAAA,EAAO,KAAK,OAAe,MAAA,SAC3B,KAAA,EAAO,KAAK,UAAkB,MAAA,YAC9B,KAAA,EAAO,KAAK,MAAc,MAAA,QAC1B,KAAA,EAAO,KAAK,UAAkB,MAAA,YAC9B,KAAA,EAAO,KAAK,OAAe,MAAA,SAC3B,KAAA,EAAO,KAAK,OAAe,MAAA,SAC3B,KAAA,EAAO,KAAK,WAAmB,MAAA,aAC/B,KAAA,EAAO,KAAK,UAAkB,MAAA,cAKvC,EAAA,UAAA,gBAAA,WACS,OAAA,KAAK,OACL,KAAA,EAAO,KAAK,OAAe,MAAA,SAC3B,KAAA,EAAO,KAAK,UAAkB,MAAA,YAC9B,KAAA,EAAO,KAAK,MAAc,MAAA,QAC1B,KAAA,EAAO,KAAK,UAAkB,MAAA,cAC9B,KAAA,EAAO,KAAK,OAAe,MAAA,SAC3B,KAAA,EAAO,KAAK,OAAe,MAAA,SAC3B,KAAA,EAAO,KAAK,WAAmB,MAAA,aAC/B,KAAA,EAAO,KAAK,UAAkB,MAAA,cAKvC,EAAA,UAAA,KAAA,WACS,OAAA,KAAK,OACL,KAAA,EAAO,KAAK,OAAe,OAAA,KAAK,MAAQ,EACxC,KAAA,EAAO,KAAK,UAAkB,OAAA,KAAK,MAAQ,EAC3C,KAAA,EAAO,KAAK,MAAc,OAAA,KAAK,MAC/B,KAAA,EAAO,KAAK,UAAkB,OAAA,KAAK,MAAQ,EAC3C,KAAA,EAAO,KAAK,OAAe,OAAA,KAAK,MAAQ,EACxC,KAAA,EAAO,KAAK,OAAe,OAAA,KAAK,MAAQ,EACxC,KAAA,EAAO,KAAK,WAAmB,OAAA,KAAK,MAAQ,EAC5C,KAAA,EAAO,KAAK,UAAkB,OAAA,IAKvC,EAAA,UAAA,WAAA,WACS,OAAA,KAAK,YAAY,KAAK,SAI/B,EAAA,UAAA,MAAA,WACS,OAAA,KAAK,OACL,KAAA,EAAO,KAAK,OAAe,OAAA,KAAK,OAAS,EACzC,KAAA,EAAO,KAAK,UAAkB,OAAA,KAAK,OACnC,KAAA,EAAO,KAAK,MAAc,OAAA,KAAK,OAAS,EACxC,KAAA,EAAO,KAAK,UACZ,KAAA,EAAO,KAAK,OAAe,OAAA,KAAK,OAAS,EACzC,KAAA,EAAO,KAAK,OAAe,OAAA,KAAK,OAAS,EACzC,KAAA,EAAO,KAAK,WAAmB,OAAA,KAAK,OACpC,KAAA,EAAO,KAAK,UAAkB,OAAA,IAKvC,EAAA,UAAA,YAAA,WACS,OAAA,KAAK,YAAY,KAAK,UAI/B,EAAA,UAAA,UAAA,WACS,OAAA,KAAK,OACL,KAAA,EAAO,KAAK,OAAe,OAAA,KAAK,WAAa,EAC7C,KAAA,EAAO,KAAK,UAAkB,OAAA,KAAK,WAAa,EAChD,KAAA,EAAO,KAAK,MAAc,OAAA,KAAK,WAAa,EAC5C,KAAA,EAAO,KAAK,UAAkB,OAAA,KAAK,WAAa,EAChD,KAAA,EAAO,KAAK,OAAe,OAAA,KAAK,WAChC,KAAA,EAAO,KAAK,OAAe,OAAA,KAAK,WAAa,EAC7C,KAAA,EAAO,KAAK,WAAmB,OAAA,KAAK,WACpC,KAAA,EAAO,KAAK,UAAkB,OAAA,IAKvC,EAAA,UAAA,gBAAA,WACS,OAAA,KAAK,YAAY,KAAK,cAI/B,EAAA,UAAA,YAAA,WACS,OAAA,KAAK,QAAQ,QAItB,EAAA,UAAA,OAAA,WACS,OAAA,KAAK,SAId,EAAA,UAAA,WAAA,WAGgB,IAFV,IAAA,EAAe,EAEL,EAAA,EAAA,EAAA,KAAK,QAAL,EAAA,EAAA,OAAA,IAAc,CAC1B,GADQ,EAAA,GACC,aAGJ,OAAA,GAIT,EAAA,UAAA,SAAA,SAAS,GACF,KAAA,QAAQ,KAAK,IAKpB,EAAA,UAAA,YAAA,SAAY,GACJ,IAAA,EAAQ,KAAK,QAAQ,QAAQ,GAE/B,GAAS,GACN,KAAA,QAAQ,OAAO,EAAO,IAI/B,EAAA,UAAA,gBAAA,SAAgB,GAEV,KAAK,eAAe,QAAQ,IAAW,IAGtC,KAAA,eAAe,KAAK,GAGzB,EAAO,gBAAgB,QAGzB,EAAA,UAAA,OAAA,WACS,OAAA,KAAK,gBAGd,EAAA,UAAA,aAAA,SAAa,GACP,KAAK,YAAY,QAAQ,IAAc,GACtC,KAAK,YAAY,KAAK,IAG7B,EAAA,UAAA,aAAA,SAAa,GACP,OAAA,KAAK,YAAY,QAAQ,IAAc,GAG/C,EAnNA,GAAa,QAAA,OAAA,EAqNb,SAAiB,IACf,SAAY,GACV,EAAA,OAAA,SACA,EAAA,UAAA,YACA,EAAA,MAAA,QACA,EAAA,UAAA,YACA,EAAA,OAAA,SACA,EAAA,OAAA,SACA,EAAA,WAAA,aACA,EAAA,UAAA,YARF,CAAY,EAAA,OAAA,EAAA,KAAI,KADlB,CAAiB,EAAA,QAAA,SAAA,QAAA,OAAM,KArNV,QAAA,OAAA;;ACgRA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAzRb,IAAA,EAAA,QAAA,YACA,EAAA,QAAA,WACA,EAAA,QAAA,YACA,EAAA,QAAA,cAEA,EAAA,WAAA,SAAA,KAiEA,OA9DW,EAAA,SAAP,SAAgB,EAAc,EAAgB,GACtC,GAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAe,OAAO,EACrE,GAAA,EAAM,cAAc,QAAS,OAAO,EACpC,GAAA,EAAM,WAAW,gBAAiB,OAAO,EAEzC,IAAA,EAAa,KAGV,OAFH,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,UAAS,EAAI,MAEzD,EAAA,OAAO,kBAAkB,EAAG,EAAU,OAG1C,EAAA,SAAP,SAAgB,EAAc,GACtB,OAAA,EAAM,cAAc,QAAgB,EACpC,EAAM,WAAW,gBAAwB,EACzC,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAsB,EAErE,EAAO,QAAU,EAAA,OAAO,KAAK,OAAe,EAAA,OAAO,SAAS,EAAG,GACvD,EAAA,OAAO,UAAU,EAAG,IAG7B,EAAA,SAAP,WACW,OAAA,GAGJ,EAAA,QAAP,SAAe,GACJ,MAAA,CACH,kBACA,uBAID,EAAA,aAAP,SAAoB,GACT,MAAA,kDAAkD,EAAM,QAAO,wKAInE,EAAA,gBAAP,SAAuB,EAAc,GAC1B,MAAA,CACH,uKAEA,0GAID,EAAA,iBAAP,SAAwB,EAAc,GAC3B,MAAA,CACH,WACA,EAAM,cAAc,QAEhB,EAAA,OAAO,OAAO,MAAM,EAAM,UAAU,SAAW,EAAA,UAAU,SAAS,SAEtE,QAAQ,IAAO,EAAM,QAAO,0BAE5B,WACA,EAAM,WAAW,gBAEb,EAAA,OAAO,OAAO,MAAM,EAAM,UAAU,SAAW,EAAA,UAAU,SAAS,SAEtE,QAAQ,IAAO,EAAM,QAAO,yBA5Db,EAAA,GAAc,oBAgEzC,EAjEA,GAAa,QAAA,kBAAA,EAmEb,IAAA,EAAA,WAAA,SAAA,KAiDE,OA9CS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GACtC,GAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAe,OAAO,EACrE,GAAA,EAAM,cAAc,SAAU,OAAO,EAErC,IAAA,EAAa,KAGV,OAFH,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,UAAS,EAAI,MAEzD,EAAA,OAAO,kBAAkB,EAAG,EAAU,OAG1C,EAAA,SAAP,SAAgB,EAAc,GACtB,OAAA,EAAM,cAAc,SAAiB,EACrC,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAsB,EAErE,EAAO,YAAc,EAAU,EAAA,OAAO,SAAS,EAAG,GAC1C,EAAA,OAAO,UAAU,EAAG,IAG7B,EAAA,SAAP,WACW,OAAA,GAGJ,EAAA,QAAP,SAAe,GACJ,MAAA,IAGJ,EAAA,aAAP,SAAoB,GACT,MAAA,IAGJ,EAAA,gBAAP,SAAuB,EAAc,GAC1B,MAAA,CACH,sBAAsB,EAAM,QAAO,4NAMpC,EAAA,iBAAP,SAAwB,EAAc,GAC3B,MAAA,CACH,WACA,EAAM,cAAc,SACpB,QAAQ,IAAO,EAAM,QAAO,6BA5Cb,EAAA,GAAc,qBAgDvC,EAjDF,GAAa,QAAA,mBAAA,EAmDb,IAAA,EAAA,WAAA,SAAA,KA2DE,OAxDS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GAKtC,GAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAe,OAAO,EACrE,IAAC,EAAM,cAAc,SAAU,OAAO,EACtC,GAAA,EAAM,cAAc,gBAAiB,OAAO,EAE5C,IAAA,EAAa,KAGV,OAFH,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,YAAW,EAAI,MAEvD,EAAA,OAAO,kBAAkB,EAAG,EAAU,OAG1C,EAAA,SAAP,SAAgB,EAAc,GAKtB,OAAC,EAAM,cAAc,SACrB,EAAM,cAAc,gBAAwB,EAC5C,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAsB,EAErE,EAAO,YAAc,EAAU,EAAA,OAAO,SAAS,EAAG,GAC1C,EAL8B,GAQvC,EAAA,SAAP,WACW,OAAA,GAGJ,EAAA,QAAP,SAAe,GACJ,MAAA,IAGJ,EAAA,aAAP,SAAoB,GACT,MAAA,IAGJ,EAAA,gBAAP,SAAuB,EAAc,GAC1B,MAAA,CACA,EAAM,mBAAkB,yIAK5B,EAAA,iBAAP,SAAwB,EAAc,GAC3B,MAAA,CACH,WACI,EAAM,cAAc,gBACpB,EAAM,mBAAmB,GACzB,QAAQ,IAAO,EAAM,QAAO,oCAtDjB,EAAA,GAAc,4BA0DvC,EA3DF,GAAa,QAAA,0BAAA,EA6Db,IAAA,EAAA,WAAA,SAAA,KA+FE,OA1FS,EAAA,SAAP,SAAgB,EAAc,EAAgB,GAKtC,GAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAe,OAAO,EACrE,GAAA,EAAM,cAAc,YAAa,OAAO,EACxC,GAAA,EAAM,aAAe,GAAI,OAAO,EAEhC,IAAA,EAAa,KAGV,OAFH,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,aAAY,EAAI,MAExD,EAAA,OAAO,kBAAkB,EAAG,EAAU,MAG1C,EAAA,SAAP,SAAgB,EAAc,GAItB,OAAA,EAAM,cAAc,YAAoB,EACxC,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAsB,EACrE,EAAM,aAAe,GAAW,EAE7B,EAAA,OAAO,SAAS,EAAG,IAGvB,EAAA,SAAP,WACW,OAAA,GAGJ,EAAA,QAAP,SAAe,GACJ,MAAA,IAGJ,EAAA,aAAP,SAAoB,GACT,MAAA,IAGJ,EAAA,gBAAP,SAAuB,EAAc,GAG1B,OAFP,EAAsB,UAAY,EAAsB,kBAAkB,EAAO,GAE1E,CACH,mMAEE,EAAA,SAAS,QAAQ,EAAM,WAAW,UAAU,EAAsB,YAAW,MAIhF,EAAA,iBAAP,SAAwB,EAAc,GAC5B,IAAA,EAAY,EAAsB,UACjC,MAAA,CACH,WACA,EAAM,cAAc,YACpB,EAAM,QAAQ,GACd,QAAQ,IAAI,uCAKL,EAAA,kBAAf,SAAiC,EAAc,GAEvC,IAAA,EAA4B,GAE5B,EAAqB,GAyBlB,OAvBH,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAC/C,EAAY,SAEP,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,QACpD,EAAY,UAEP,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,UACpD,EAAY,WAGZ,EAAM,UAAU,QAAU,EAAA,UAAU,OAAO,WAC3C,EAAiB,KAAK,IAAI,EAAA,KAAK,WAAW,GAAM,EAAO,CAAC,KAEnD,EAAM,UAAU,OAAS,EAAA,UAAU,MAAM,QAC9C,EAAiB,KAAK,IAAI,EAAA,KAAK,YAAY,GAAM,EAAO,CAAC,KAEpD,EAAM,UAAU,MAAQ,EAAA,UAAU,KAAK,YAC5C,EAAiB,KAAK,IAAI,EAAA,KAAK,aAAa,GAAO,EAAO,CAAC,KAG3D,EAAiB,KAAK,IAAI,EAAA,KAAK,UAAU,GAAM,EAAO,CAAC,KAGpD,GA5FY,EAAA,GAAc,wBA8FvC,EA/FF,GAAa,QAAA,sBAAA,EAiGb,IAAA,EAAA,WAAA,SAAA,KAwEE,OArES,EAAA,SAAP,SAAgB,EAAc,EAAgB,GAMtC,GAAA,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAe,OAAO,EACrE,GAAA,EAAM,cAAc,eAAgB,OAAO,EAC3C,GAAA,EAAM,aAAe,IAAK,OAAO,EACjC,IAAC,EAAM,cAAc,SAAU,OAAO,EAGtC,GAAA,EAAM,WAAW,wBAAyB,OAAO,EAEjD,IAAA,EAAa,KAMV,OAHH,EAAO,OAAS,EAAG,EAAI,KAClB,EAAO,OAAS,IAAG,EAAI,MAEzB,EAAA,OAAO,kBAAkB,EAAG,EAAU,MAG1C,EAAA,SAAP,SAAgB,EAAc,GAKtB,OAAA,EAAM,cAAc,eAAuB,EAE3C,EAAM,UAAU,UAAY,EAAA,UAAU,SAAS,cAAsB,EACrE,EAAM,aAAe,IAAY,EAChC,EAAM,cAAc,SAErB,EAAM,WAAW,wBAAgC,EAEjD,EAAO,OAAS,EAAU,EAAA,OAAO,SAAS,EAAG,GACxC,EAAO,OAAS,EAAU,EAAA,OAAO,UAAU,EAAG,GAC3C,EAAA,OAAO,UAAU,EAAG,GANU,GASvC,EAAA,SAAP,WACW,OAAA,GAGJ,EAAA,QAAP,SAAe,GACJ,MAAA,IAGJ,EAAA,aAAP,SAAoB,GACT,MAAA,IAGJ,EAAA,gBAAP,SAAuB,EAAc,GAC5B,MAAA,CACD,2BAA2B,EAAM,QAAO,oOAMzC,EAAA,iBAAP,SAAwB,EAAc,GAC3B,MAAA,CACH,WACI,EAAM,cAAc,eACpB,QAAQ,IAAI,0CAnED,EAAA,GAAc,2BAuEvC,EAxEF,GAAa,QAAA,yBAAA","file":"tribe_events_discovery.c9f7034b.js","sourceRoot":"../src","sourcesContent":["export class Random {\n  static interval(min: number, max: number) : number {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  static choice<T>(array: T[]) : T {\n    const index = Random.interval(0, array.length - 1);\n    return array[index];\n  }\n\n  static chance(c: number) : boolean {\n    if (Math.random() < c) return true;\n    else return false;\n  }\n\n  static progressiveChance(c: number, progress: number, upperBound: number) : boolean {\n    const limit = Math.min(progress * c, upperBound);\n  \n    if (Math.random() < limit) return true;\n    else return false;\n  }\n}","export class IDAllocator {\n  private static ids : Object = {};\n\n  static allocate(base: string) : string {\n    if (!IDAllocator.ids.hasOwnProperty(base)) {\n      IDAllocator.ids[base] = 0;\n    }\n\n    let id : string = `${base}-${IDAllocator.ids[base]}`;\n    IDAllocator.ids[base]++;\n\n    return id;\n  }\n}","import { Random } from \"./random\";\n\nconst Alphabet : string[] = []\n\nfor (let i = 0; i < 26; i++) {\n  Alphabet[i] = String.fromCharCode(97 + i);  \n}\n\nconst Vowel : string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\nconst Consonant : string[] = Alphabet.filter(function (v, i, a) {return (Vowel.indexOf(v) == -1)});\n\nclass Suffix {\n    public readonly suffix : string;\n    public readonly optional : string;\n\n    constructor(suffix: string, optional: string) {\n        this.suffix = suffix;\n        this.optional = optional;\n    }\n}\n\nexport class Noun {\n    public readonly base : string;\n    \n    public readonly plural : boolean;\n    public readonly genitive : boolean;\n    \n    public readonly adjectives : string[];\n\n    constructor(base: string, plural: boolean, genitive: boolean, adjectives: string[]) {\n        this.base = base;\n        this.plural = plural;\n        this.genitive = genitive;\n        this.adjectives = adjectives;\n    }\n}\n\nexport class Language {\n    public static capitalize(word: string) : string {\n        let restOfWord : string = word.slice(1);\n        return word.charAt(0).toUpperCase() + restOfWord;\n    }\n\n    public static toTitle(sentence: string) : string {\n      return sentence.split(' ').map(Language.capitalize).join(' ');\n    }\n\n    private static getSuffix() : Suffix {\n        let optional : string = Random.choice(Vowel);\n\n        let suffix : string = Random.choice(Consonant) + Random.choice(Vowel);\n\n        return new Suffix(suffix, optional);\n    }\n\n    private static addSuffix(word: string, suffix: Suffix) : string {\n        if (Consonant.indexOf(word[word.length-1]) > -1) {\n            word += suffix.optional;\n        }\n        word += suffix.suffix;\n\n        return word;\n    }\n\n    private readonly plural : Suffix;\n    private readonly genitive : Suffix;\n    private readonly adjective : Suffix;\n\n    private readonly adjectivePolicy : Language.Position;\n\n    private translations : Object;\n\n    constructor() {\n        this.plural = Language.getSuffix();\n        this.genitive = Language.getSuffix();\n        this.adjective = Language.getSuffix();\n\n        if (Random.chance(0.5)) {\n            this.adjectivePolicy = Language.Position.Before;\n        }\n        else {\n            this.adjectivePolicy = Language.Position.After;\n        }\n\n        this.translations = {};\n    }\n\n    translate(sentence: Noun[]) : string {\n        let sentenceTranslated : string[] = [];\n        \n        for (let word of sentence) {\n            let wordTranslated : string = this.translateWord(word.base);\n\n            if (word.plural) wordTranslated = Language.addSuffix(wordTranslated, this.plural);\n            if (word.genitive) wordTranslated = Language.addSuffix(wordTranslated, this.genitive);\n\n            let adjectives : string[] = []\n            for (let adj of word.adjectives) {\n                let adjTranslated = this.translateWord(adj);\n\n                adjTranslated = Language.addSuffix(adjTranslated, this.adjective);\n\n                adjectives.push(adjTranslated);\n            }\n\n            if (this.adjectivePolicy == Language.Position.Before) {\n                sentenceTranslated = sentenceTranslated.concat(adjectives);\n            }\n\n            sentenceTranslated.push(wordTranslated);\n\n            if (this.adjectivePolicy == Language.Position.After) {\n                sentenceTranslated = sentenceTranslated.concat(adjectives);\n            }\n        }\n\n        return sentenceTranslated.join(\" \");\n    }\n\n    private translateWord(word: string) {\n        // First split word into phonemes.\n        let phonemes : string[] = [];\n\n        let currentPhoneme : string = \"\";\n\n        for (let letter of word.split('')) {\n            if (currentPhoneme.length > 0) {\n                let lastLetter = currentPhoneme[currentPhoneme.length - 1];\n\n                if (Vowel.indexOf(lastLetter) > -1) {\n                    phonemes.push(currentPhoneme);\n                    currentPhoneme = \"\";\n                }\n                else if ((Consonant.indexOf(lastLetter) > -1) && (Consonant.indexOf(letter) > -1)) {\n                    if (lastLetter != letter) {\n                        phonemes.push(currentPhoneme);\n                        currentPhoneme = \"\";\n                    }\n                }\n            }\n\n            currentPhoneme += letter;\n        }\n\n        if (currentPhoneme.length > 0) phonemes.push(currentPhoneme);\n\n        // Translate each phoneme.\n        let wordTranslated : string = \"\";\n\n        for (let p of phonemes) {\n            wordTranslated += this.translatePhoneme(p);\n        }\n\n        return wordTranslated;\n    }\n\n    private translatePhoneme(phoneme: string) {\n        if (!this.translations.hasOwnProperty(phoneme)) {\n            let t : string = \"\";\n\n            for (let letter of phoneme.split('')) {\n                if (Consonant.indexOf(letter) > -1) t += Random.choice(Consonant);\n                else t += Random.choice(Vowel);\n            }\n\n            this.translations[phoneme] = t;\n        }\n\n        return this.translations[phoneme];\n    }\n}\n\nexport namespace Language {\n    export enum Position {\n        Before = \"Before\",\n        After = \"After\",\n    }\n}","import { Random } from \"./random\";\nimport { IDAllocator } from \"./idallocator\";\nimport { Language, Noun } from \"./language\";\n\n// A tribe is a group of people with common traits.\nexport class Tribe {\n  private _population : number;\n\n  private _migrationChance : number;\n\n  private _eventProgress : Object;\n\n  private _technology : string[];\n  private _culture : string[];\n\n  private _name : Noun[];\n  private _language : Language;\n\n  private _relations : Object;\n\n  public attitudes: Attitudes;\n\n  public dead : boolean;\n\n  public readonly id : string;\n\n  constructor(population: number) {\n    this.id = IDAllocator.allocate(\"tribe\");\n\n    this._population = population;\n    this._migrationChance = 0.000001;\n    this._eventProgress = {};\n\n    this._relations = {};\n\n    this._technology = [];\n    this._culture = [];\n\n    this._name = [];\n\n    this.attitudes = new Attitudes();\n\n    this.attitudes.monolith = Attitudes.Monolith.Unencountered;\n\n    this.dead = false;\n\n    this.attitudes.others = Random.choice([\n      Attitudes.Others.Aggressive,\n      Attitudes.Others.Defensive,\n      Attitudes.Others.Diplomatic,\n      Attitudes.Others.Insular\n    ]);\n\n    this.attitudes.world = Random.choice([\n      Attitudes.World.Exploit,\n      Attitudes.World.Explore,\n      Attitudes.World.Harmony,\n      Attitudes.World.Survival\n    ])\n\n    this.attitudes.self = Random.choice([\n      Attitudes.Self.Hierarchical,\n      Attitudes.Self.Egalitarian\n    ])\n\n    this._language = new Language();\n  }\n\n  population() : number {\n    return this._population;\n  }\n\n  decreasePopulation(value: number) {\n    this._population -= value;\n  }\n\n  increasePopulation(value: number) {\n    this._population += value;\n  }\n\n  // Determines change in tribe's population.\n  grow() {\n    const oldPopulation = this.population();\n\n    let growthCount : number = 0;\n    let deathCount : number = 0;\n\n    const growthRate = this.growthRate();\n    const deathRate = this.deathRate();\n\n    for (let i = 0; i < 20; i++) {\n      if (Random.chance(growthRate)) growthCount += (Math.floor(this.population()*0.05));\n      if (Random.chance(deathRate)) deathCount += (Math.floor(this.population()*0.05));\n    }\n\n    // Increase population by growth count and decrease by death count.\n    this.increasePopulation(growthCount);\n    this.decreasePopulation(deathCount);\n  }\n\n  // Splits the tribe into multiple groups according to the proportions given.\n  // Returns a list of the new tribes (excluding the original).\n  split(proportions: number[]) : Tribe[] {\n    let populations : number[] = [];\n    let newTribes : Tribe[] = [];\n\n    for (let p of proportions) {\n      populations.push(Math.floor(this._population*p));\n    }\n\n    for (let p of populations.slice(1)) {\n      let t : Tribe = new Tribe(p);\n\n      // Set attitudes of the new tribe to the same as this one.\n      t.attitudes.monolith = this.attitudes.monolith;\n      t.attitudes.others = this.attitudes.others;\n      t.attitudes.world = this.attitudes.world;\n      t.attitudes.self = this.attitudes.self;\n\n      // Set technology and culture of new tribe.\n      for (let tech of this._technology) {\n        t.addTechnology(tech);\n      }\n\n      for (let cult of this._culture) {\n        t.addCulture(cult);\n      }\n\n      // Set migration chance of new tribe.\n      t.setMigrationChance(this._migrationChance);\n\n      newTribes.push(t);\n    }\n\n    // Reduce this tribe's population to the first proportion.\n    this._population = Math.floor(proportions[0] * this._population);\n\n    // Return the new tribes.\n    return newTribes;\n  }\n\n  relationship(tribe: Tribe) : number {\n    if (!this._relations.hasOwnProperty(tribe.id)) {\n      return 0;\n    }\n\n    return this._relations[tribe.id];\n  }\n\n  changeRelationship(tribe: Tribe, value: number) {\n    if (!this._relations.hasOwnProperty(tribe.id)) {\n      this._relations[tribe.id] = 0;\n    }\n\n    this._relations[tribe.id] += value;\n\n    console.log(`Set relationship of ${this.id} for ${tribe.id} to ${this._relations[tribe.id]}.`);\n  }\n\n  attack() : number {\n    let attack : number = 0;\n\n    if (this.attitudes.others == Attitudes.Others.Aggressive) attack += 1;\n    if (this.hasTechnology(\"tools\")) attack += 1;\n\n    return attack;\n  }\n\n  defense() : number {\n    let defense : number = 0;\n\n    if (this.attitudes.others == Attitudes.Others.Defensive) defense += 1;\n    if (this.hasTechnology(\"construction\")) defense += 1;\n\n    return defense;\n  }\n\n  migrate() : boolean {\n    return Random.chance(this._migrationChance);\n  }\n\n  setMigrationChance(c: number) {\n    this._migrationChance = c;\n  }\n\n  progress(e: TribeEvent) : number {\n    return this._eventProgress[e.id];\n  }\n\n  increaseProgress(e: TribeEvent, progress: number) {\n    // Default to starting from 0 if no progress is stored.\n    let currentProgress : number = 0;\n\n    // Get the progress from the map if it exists.\n    if (this._eventProgress.hasOwnProperty(e.id)) currentProgress = this._eventProgress[e.id];\n\n    // Set the new progress.\n    this._eventProgress[e.id] = currentProgress+progress;\n  }\n\n  resetProgress(e: TribeEvent) {\n    this._eventProgress[e.id] = 0;\n  }\n\n  addTechnology(technology: string) {\n    if (this._technology.indexOf(technology) > -1) return;\n    this._technology.push(technology);\n  }\n\n  removeTechnology(technology: string) {\n    // Return silently if tribe doesn't have technology.\n    const i = this._technology.indexOf(technology);\n    if (i == -1) return;\n\n    this._technology.splice(i, 1);\n  }\n\n  hasTechnology(technology: string) : boolean {\n    if (this._technology.indexOf(technology) > -1) return true;\n    else return false;\n  }\n\n  addCulture(culture: string) {\n    if (this._culture.indexOf(culture) > -1) return;\n    this._culture.push(culture);\n  }\n\n  removeCulture(culture: string) {\n    // Return silently if tribe doesn't have culture.\n    const i = this._culture.indexOf(culture);\n    if (i == -1) return;\n\n    this._culture.splice(i, 1);\n  }\n\n  hasCulture(culture: string) : boolean {\n    if (this._culture.indexOf(culture) > -1) return true;\n    else return false;\n  }\n\n  title() : string {\n    if (this._name.length == 0) return \"a tribe\";\n    else return \"the \" + Language.toTitle(this._language.translate(this._name));\n  }\n\n  titleCapitalized() : string {\n    if (this._name.length == 0) return \"A tribe\";\n    else return \"The \" + Language.toTitle(this._language.translate(this._name));\n  }\n\n  setName(name: Noun[]) {\n    this._name = name;\n  }\n\n  name() : Noun[] {\n    return this._name;\n  }\n\n  language() : Language {\n    return this._language;\n  }\n\n  private growthRate() : number {\n    let g : number = 0.0001;\n\n    if (this.hasTechnology(\"fire\")) g = 4 * g;\n\n    if (this.hasTechnology(\"agriculture\")) g = 4 * g;\n\n    return g;\n  }\n\n  private deathRate() : number {\n    let d : number = 0.0001;\n\n    return d;\n  }\n}\n\nexport class Attitudes {\n  public monolith: Attitudes.Monolith;\n  public others: Attitudes.Others;\n  public world: Attitudes.World;\n  public self: Attitudes.Self;\n\n  static MonolithString(monolith: Attitudes.Monolith) : string {\n    switch(monolith) {\n      case Attitudes.Monolith.Unencountered: return \"unencountered\";\n      case Attitudes.Monolith.Curious: return \"curious\";\n      case Attitudes.Monolith.Superstitious: return \"superstitious\";\n      case Attitudes.Monolith.Fearful: return \"fearful\";\n    }\n  }\n\n  static OthersString(others: Attitudes.Others) : string {\n    switch(others) {\n      case Attitudes.Others.Aggressive: return \"aggressive\";\n      case Attitudes.Others.Defensive: return \"defensive\";\n      case Attitudes.Others.Diplomatic: return \"diplomatic\";\n      case Attitudes.Others.Insular: return \"insular\";\n    }\n  }\n\n  static WorldString(world: Attitudes.World) : string {\n    switch(world) {\n      case Attitudes.World.Exploit: return \"exploitative\";\n      case Attitudes.World.Explore: return \"explorative\";\n      case Attitudes.World.Harmony: return \"harmonious\";\n      case Attitudes.World.Survival: return \"survivalists\";\n    }\n  }\n\n  static SelfString(self: Attitudes.Self) : string {\n    switch(self) {\n      case Attitudes.Self.Hierarchical: return \"hierarchical\";\n      case Attitudes.Self.Egalitarian: return \"egalitarian\";\n    }\n  }\n\n  constructor() {\n\n  }\n\n  monolithString() : string {\n    return Attitudes.MonolithString(this.monolith);\n  }\n\n  othersString() : string {\n    return Attitudes.OthersString(this.others);\n  }\n\n  worldString() : string {\n    return Attitudes.WorldString(this.world);\n  }\n\n  selfString() : string {\n    return Attitudes.SelfString(this.self);\n  }\n}\n\nexport namespace Attitudes {\n  export enum Monolith {\n    Unencountered = \"unencountered\",\n    Curious = \"curious\",\n    Superstitious = \"superstitious\",\n    Fearful = \"fearful\",\n  }\n\n  export enum Others {\n    Aggressive = \"aggressive\",\n    Defensive = \"defensive\",\n    Diplomatic = \"diplomatic\",\n    Insular = \"insular\",\n  }\n\n  export enum World {\n    Exploit = \"exploit\",\n    Explore = \"explore\",\n    Harmony = \"harmony\",\n    Survival = \"survival\",\n  }\n\n  export enum Self {\n    Hierarchical = \"hierarchical\",\n    Egalitarian = \"egalitarian\",\n  }\n}","import { Random } from \"./random\";\nimport { Tribe } from \"./tribe\";\n\n// A region is a part of the world that can be inhabited by tribes.\n//\n// Regions have three statistics:\n// food: level of food available in the region.\n// water: level of water available in the region.\n// resources: level of resources available in the region.\nexport class Region {\n  private _food: number;\n  private _water: number;\n  private _resources: number;\n\n  private _type: Region.Type;\n\n  private _tribes: Tribe[];\n\n  private _nearbyRegions: Region[];\n\n  private _structures: string[];\n\n  public hasMonolith: boolean;\n\n  // Given a level number, returns a string description.\n  private levelString(level : number) : string {\n    switch(level)\n    {\n      case 0: return \"no\";\n      case 1: return \"scarce\";\n      case 2: return \"barely adequate\";\n      case 3: return \"adequate\";\n      case 4: return \"sufficient\";\n      case 5: return \"plentiful\";\n      case 6: return \"abundant\";\n    }\n\n    return \"INVALID\";\n  }\n\n  constructor() {\n    this.hasMonolith = false;\n    this._tribes = [];\n    this._nearbyRegions = [];\n    this._structures = [];\n\n    // Choose a random type for the region.\n    let t = Random.interval(0, 6);\n    this._type = Region.Type.Undefined;\n\n    switch(t) {\n      case 0: this._type = Region.Type.Desert; break;\n      case 1: this._type = Region.Type.Grassland; break;\n      case 2: this._type = Region.Type.Hills; break;\n      case 3: this._type = Region.Type.Mountains; break;\n      case 4: this._type = Region.Type.Tundra; break;\n      case 5: this._type = Region.Type.Valley; break;\n      case 6: this._type = Region.Type.Rainforest; break;\n    }\n\n    // Determine food, water, resource levels.\n    // We generate a number between 2 and 4, which is then augmented by the type.\n    this._food = Random.interval(2, 4);\n    this._water = Random.interval(2, 4);\n    this._resources = Random.interval(2, 4);\n  }\n\n  // Returns the type of the region.\n  type() : Region.Type {\n    return this._type;\n  }\n\n  typeString() : string {\n    return Region.Type[this._type];\n  }\n\n  typeStringLowercase() : string {\n    switch(this._type) {\n      case Region.Type.Desert: return \"desert\";\n      case Region.Type.Grassland: return \"grassland\";\n      case Region.Type.Hills: return \"hills\";\n      case Region.Type.Mountains: return \"mountains\";\n      case Region.Type.Tundra: return \"tundra\";\n      case Region.Type.Valley: return \"valley\";\n      case Region.Type.Rainforest: return \"rainforest\";\n      case Region.Type.Undefined: return \"UNDEFINED\";\n    }\n  }\n\n  // Returns the string description of the region's type.\n  typeDescription() : string {\n    switch(this._type) {\n      case Region.Type.Desert: return \"desert\";\n      case Region.Type.Grassland: return \"grassland\";\n      case Region.Type.Hills: return \"hilly\";\n      case Region.Type.Mountains: return \"mountainous\";\n      case Region.Type.Tundra: return \"tundra\";\n      case Region.Type.Valley: return \"valley\";\n      case Region.Type.Rainforest: return \"rainforest\";\n      case Region.Type.Undefined: return \"UNDEFINED\";\n    }\n  }\n\n  // Returns the food level of the region, with the type modifier.\n  food() : number {\n    switch(this._type) {\n      case Region.Type.Desert: return this._food - 1;\n      case Region.Type.Grassland: return this._food + 1;\n      case Region.Type.Hills: return this._food;\n      case Region.Type.Mountains: return this._food - 2;\n      case Region.Type.Tundra: return this._food - 1;\n      case Region.Type.Valley: return this._food + 1;\n      case Region.Type.Rainforest: return this._food + 2;\n      case Region.Type.Undefined: return 0;\n    }\n  }\n\n  // Returns a string representation of the region's food level.\n  foodString() : string {\n    return this.levelString(this.food());\n  }\n\n  // Returns the water level of the region, with the type modifier.\n  water() : number {\n    switch(this._type) {\n      case Region.Type.Desert: return this._water - 2;\n      case Region.Type.Grassland: return this._water;\n      case Region.Type.Hills: return this._water + 1;\n      case Region.Type.Mountains: return this._water - 1;\n      case Region.Type.Tundra: return this._water - 1;\n      case Region.Type.Valley: return this._water + 2;\n      case Region.Type.Rainforest: return this._water;\n      case Region.Type.Undefined: return 0;\n    }\n  }\n\n  // Returns a string representation of the region's water level.\n  waterString() : string {\n    return this.levelString(this.water());\n  }\n\n  // Returns the resource level of the region, with the type modifier.\n  resources() : number {\n    switch(this._type) {\n      case Region.Type.Desert: return this._resources + 1;\n      case Region.Type.Grassland: return this._resources - 2;\n      case Region.Type.Hills: return this._resources + 1;\n      case Region.Type.Mountains: return this._resources + 2;\n      case Region.Type.Tundra: return this._resources;\n      case Region.Type.Valley: return this._resources - 1;\n      case Region.Type.Rainforest: return this._resources;\n      case Region.Type.Undefined: return 0;\n    }\n  }\n\n  // Returns a string representation of the region's resources level.\n  resourcesString() : string {\n    return this.levelString(this.resources());\n  }\n\n  // Returns the number of tribes in this region.\n  tribesCount() : number {\n    return this._tribes.length;\n  }\n\n  // Returns a list of tribes in this region.\n  tribes() : Tribe[] {\n    return this._tribes;\n  }\n\n  // Returns the population of this region.\n  population() : number {\n    let sum : number = 0;\n\n    for (let t of this._tribes) {\n      sum += t.population();\n    }\n\n    return sum;\n  }\n\n  // Adds a tribe to this region.\n  addTribe(tribe: Tribe) {\n    this._tribes.push(tribe);\n  }\n\n  // Removes a tribe from this region.\n  // Exits silently if the tribe isn't in the region.\n  removeTribe(tribe: Tribe) {\n    const index = this._tribes.indexOf(tribe);\n\n    if (index >= 0) {\n      this._tribes.splice(index, 1);\n    }\n  }\n\n  addNearbyRegion(region: Region) {\n    // Do nothing if we've already added this region.\n    if (this._nearbyRegions.indexOf(region) > -1) return;\n\n    // Add the other region.\n    this._nearbyRegions.push(region);\n\n    // Call addNearbyRegion for the other region, passing this.\n    region.addNearbyRegion(this);\n  }\n\n  nearby() : Region[] {\n    return this._nearbyRegions;\n  }\n\n  addStructure(structure: string) {\n    if (this._structures.indexOf(structure) > -1) return;\n    else this._structures.push(structure);\n  }\n\n  hasStructure(structure: string) : boolean {\n    if (this._structures.indexOf(structure) > -1) return true;\n    else return false;\n  }\n}\n\nexport namespace Region {\n  export enum Type {\n    Desert = \"Desert\",\n    Grassland = \"Grassland\",\n    Hills = \"Hills\",\n    Mountains = \"Mountains\",\n    Tundra = \"Tundra\",\n    Valley = \"Valley\",\n    Rainforest = \"Rainforest\",\n    Undefined = \"Undefined\"\n  }\n}\n","import { Random } from \"./random\";\nimport { Tribe, Attitudes } from \"./tribe\";\nimport { Region } from \"./region\";\nimport { Language, Noun } from \"./language\";\n\nexport class DiscoverFireEvent {\n    public static readonly id : string = \"DiscoverFireEvent\";\n  \n    static triggers(tribe: Tribe, region: Region, progress: number) : boolean {\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return false;\n        if (tribe.hasTechnology(\"fire\")) return false;\n        if (tribe.hasCulture(\"afraidOfFire\")) return false;\n    \n        let c : number = 0.000001;\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Curious) c = 0.000002;\n    \n        return Random.progressiveChance(c, progress, 0.005);\n    }\n  \n    static progress(tribe: Tribe, region: Region) : number {\n        if (tribe.hasTechnology(\"fire\")) return 0;\n        if (tribe.hasCulture(\"afraidOfFire\")) return 0;\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return 0;\n    \n        if (region.type() == Region.Type.Desert) return Random.interval(0, 3);\n        else return Random.interval(-1, 2);\n    }\n  \n    static isChoice() : boolean {\n        return true;\n    }\n  \n    static choices(tribe: Tribe) : string[] {\n        return [\n            \"Fire is useful.\",\n            \"Fire is dangerous.\"\n        ];\n    }\n  \n    static choicePrompt(tribe: Tribe) : string {\n        return `While wandering on a hot, dry day, a member of ${tribe.title()} notices food left in the wake of a wildfire.\n        Noticing that the food seems firmer and smells different, the tribesperson brings it back to show the others.`;\n    }\n  \n    static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n        return [\n            `The tribe is curious about the possible uses of this phenomenon. Some begin using it to cook their food,\n            while others use it to provide light at night.`,\n            `The tribe is afraid of this phenomenon. They avoid it, not understanding the benefits it could bring.`\n        ];\n    }\n  \n    static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n        return [\n            function () {\n            tribe.addTechnology(\"fire\");\n\n            if (Random.chance(0.1)) tribe.attitudes.monolith = Attitudes.Monolith.Curious;\n            \n            console.log(`${tribe.title()} has discovered fire.`);\n            },\n            function () {\n            tribe.addCulture(\"afraidOfFire\");\n            \n            if (Random.chance(0.1)) tribe.attitudes.monolith = Attitudes.Monolith.Fearful;\n            \n            console.log(`${tribe.title()} has shunned fire.`);\n            }\n        ];\n    }\n}\n\nexport class DiscoverToolsEvent {\n    public static readonly id : string = \"DiscoverToolsEvent\";\n  \n    static triggers(tribe: Tribe, region: Region, progress: number) : boolean {\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return false;\n        if (tribe.hasTechnology(\"tools\")) return false;\n    \n        let c : number = 0.000001;\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Curious) c = 0.000002;\n    \n        return Random.progressiveChance(c, progress, 0.005);\n    }\n  \n    static progress(tribe: Tribe, region: Region) : number {\n        if (tribe.hasTechnology(\"tools\")) return 0;\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return 0;\n    \n        if (region.resources() > 2) return Random.interval(0, 3);\n        else return Random.interval(-1, 2);\n    }\n  \n    static isChoice() : boolean {\n        return false;\n    }\n  \n    static choices(tribe: Tribe) : string[] {\n        return [];\n    }\n  \n    static choicePrompt(tribe: Tribe) : string {\n        return \"\";\n    }\n  \n    static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n        return [\n            `A small group from ${tribe.title()} have developed simple stone tools to aid them in their daily lives.\n            They show the rest of their tribe, and the tools quickly catch on, with the tribe using them to enhance\n            their abilities.`\n        ];\n    }\n  \n    static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n        return [\n            function () {\n            tribe.addTechnology(\"tools\");\n            console.log(`${tribe.title()} has discovered tools.`);\n            }\n        ];\n    }\n  }\n  \nexport class DiscoverConstructionEvent {\n    public static readonly id : string = \"DiscoverConstructionEvent\";\n  \n    static triggers(tribe: Tribe, region: Region, progress: number) : boolean {\n        // Can't trigger if:\n        // Tribe is unencountered\n        // Tribe doesn't have tools\n        // Tribe already has construction.\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return false;\n        if (!tribe.hasTechnology(\"tools\")) return false;\n        if (tribe.hasTechnology(\"construction\")) return false;\n    \n        let c : number = 0.000001;\n        if (tribe.attitudes.others == Attitudes.Others.Defensive) c = 0.000002;\n    \n        return Random.progressiveChance(c, progress, 0.005);\n    }\n  \n    static progress(tribe: Tribe, region: Region) : number {\n        // Can't progress if:\n        // Tribe is unencountered\n        // Tribe doesn't have tools\n        // Tribe already has construction.\n        if (!tribe.hasTechnology(\"tools\")) return 0;\n        if (tribe.hasTechnology(\"construction\")) return 0;\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return 0;\n    \n        if (region.resources() > 0) return Random.interval(0, 1);\n        else return 0;\n    }\n  \n    static isChoice() : boolean {\n        return false;\n    }\n  \n    static choices(tribe: Tribe) : string[] {\n        return [];\n    }\n  \n    static choicePrompt(tribe: Tribe) : string {\n        return \"\";\n    }\n  \n    static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n        return [\n            `${tribe.titleCapitalized()} has begun using stone and wood, along with their tools, to construct\n            simple buildings in which to live and store food.`\n        ];\n    }\n  \n    static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n        return [\n            function () {\n                tribe.addTechnology(\"construction\");\n                tribe.setMigrationChance(0);\n                console.log(`${tribe.title()} has discovered construction.`);\n            }\n        ];\n    }\n  }\n  \nexport class DiscoverLanguageEvent {\n    public static readonly id : string = \"DiscoverLanguageEvent\";\n\n    private static tribeName : Noun[];\n  \n    static triggers(tribe: Tribe, region: Region, progress: number) : boolean {\n        // Can't trigger if:\n        // Tribe is unencountered\n        // Tribe population is < 80\n        // Tribe already has language\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return false;\n        if (tribe.hasTechnology(\"language\")) return false;\n        if (tribe.population() < 80) return false;\n    \n        let c : number = 0.000001;\n        if (tribe.attitudes.others == Attitudes.Others.Diplomatic) c = 0.000002;\n    \n        return Random.progressiveChance(c, progress, 0.01);\n    }\n  \n    static progress(tribe: Tribe, region: Region) : number {\n        // Can't progress if:\n        // Tribe is unencountered\n        // Tribe population is < 80\n        if (tribe.hasTechnology(\"language\")) return 0;\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return 0;\n        if (tribe.population() < 80) return 0;\n    \n        return Random.interval(0, 3);\n    }\n  \n    static isChoice() : boolean {\n        return false;\n    }\n  \n    static choices(tribe: Tribe) : string[] {\n        return [];\n    }\n  \n    static choicePrompt(tribe: Tribe) : string {\n        return \"\";\n    }\n  \n    static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n        DiscoverLanguageEvent.tribeName = DiscoverLanguageEvent.generateTribeName(tribe, region);\n\n        return [\n            `You notice that a tribe seems to be using a more advanced form of communication.\n            As your language coprocessor engages, you discover that they now call themselves the\n            ${Language.toTitle(tribe.language().translate(DiscoverLanguageEvent.tribeName))}.`\n        ];\n    }\n  \n    static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n        const tribeName = DiscoverLanguageEvent.tribeName;\n        return [\n            function () {\n            tribe.addTechnology(\"language\");\n            tribe.setName(tribeName);\n            console.log(`A tribe has discovered language.`);\n            }\n        ];\n    }\n  \n    private static generateTribeName(tribe: Tribe, region: Region) : Noun[] {\n        // Determine what to call the tribe.\n        let tribeDescription : Noun[] = [];\n\n        let adjective : string = \"\";\n        \n        if (tribe.attitudes.monolith == Attitudes.Monolith.Superstitious) {\n            adjective = \"devout\";\n        }\n        else if (tribe.attitudes.monolith == Attitudes.Monolith.Curious) {\n            adjective = \"curious\";\n        }\n        else if (tribe.attitudes.monolith == Attitudes.Monolith.Fearful) {\n            adjective = \"fearful\";\n        }\n\n        if (tribe.attitudes.others == Attitudes.Others.Aggressive) {\n            tribeDescription.push(new Noun(\"warrior\", true, false, [adjective]));\n        }\n        else if (tribe.attitudes.world == Attitudes.World.Explore) {\n            tribeDescription.push(new Noun(\"explorer\", true, false, [adjective]));\n        }\n        else if (tribe.attitudes.self == Attitudes.Self.Egalitarian) {\n            tribeDescription.push(new Noun(\"community\", false, false, [adjective]));\n        }\n        else {\n            tribeDescription.push(new Noun(\"person\", true, false, [adjective]));\n        }\n\n        return tribeDescription;\n    }\n  }\n\nexport class DiscoverAgricultureEvent {\n    public static readonly id : string = \"DiscoverAgricultureEvent\";\n  \n    static triggers(tribe: Tribe, region: Region, progress: number) : boolean {\n        // Can't trigger if:\n        // Tribe is unencountered\n        // Tribe population is < 200\n        // Tribe doesn't have tools\n        // Tribe already has agriculture\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return false;\n        if (tribe.hasTechnology(\"agriculture\")) return false;\n        if (tribe.population() < 200) return false;\n        if (!tribe.hasTechnology(\"tools\")) return false;\n\n        // If the tribe has already abandoned agriculture in the past, this event cannot trigger.\n        if (tribe.hasCulture(\"abandonedAgriculture\")) return false;\n    \n        let c : number = 0.000001;\n\n        // Increase chance in regions with high food.\n        if (region.food() > 4) c = 0.000005;\n        else if (region.food() > 2) c = 0.000002;\n        \n        return Random.progressiveChance(c, progress, 0.01);\n    }\n  \n    static progress(tribe: Tribe, region: Region) : number {\n        // Can't progress if:\n        // Tribe is unencountered\n        // Tribe population is < 200\n        // Tribe doesn't have tools.\n        if (tribe.hasTechnology(\"agriculture\")) return 0;\n\n        if (tribe.attitudes.monolith == Attitudes.Monolith.Unencountered) return 0;\n        if (tribe.population() < 200) return 0;\n        if (!tribe.hasTechnology(\"tools\")) return 0;\n\n        if (tribe.hasCulture(\"abandonedAgriculture\")) return 0;\n    \n        if (region.food() > 4) return Random.interval(1, 5);\n        else if (region.food() > 2) return Random.interval(-1, 4);\n        else return Random.interval(-2, 3);\n    }\n  \n    static isChoice() : boolean {\n        return false;\n    }\n  \n    static choices(tribe: Tribe) : string[] {\n        return [];\n    }\n  \n    static choicePrompt(tribe: Tribe) : string {\n        return \"\";\n    }\n  \n    static outcomeMessages(tribe: Tribe, region: Region) : string[] {\n      return [\n            `A handful of members of ${tribe.title()} seem to have stopped hunting or gathering,\n            and instead have begun collecting wild seeds and planting them. After the first harvest,\n            this new method of producing food is adopted by the whole tribe.`\n      ];\n    }\n  \n    static outcomeFunctions(tribe: Tribe, region: Region) : (() => void)[] {\n        return [\n            function () {\n                tribe.addTechnology(\"agriculture\");\n                console.log(`A tribe has discovered agriculture.`);\n            }\n        ];\n    }\n  }"]}